{"version":3,"sources":["components/RunningLogsList/RunningLogListItem/RunningLogListItem.js","components/RunningLogsList/RunningLogsList.js","components/VegaLiteChart/VegaLiteChart.js","models/log-parser.js","components/MainComponent/MainComponent.js","App.js","serviceWorker.js","index.js","components/RunningLogsList/RunningLogListItem/RunningLogListItem.module.css","components/RunningLogsList/RunningLogsList.module.css","components/MainComponent/MainComponent.module.css","components/VegaLiteChart/VegaLiteChart.module.css"],"names":["RunningLogsListItem","props","style","selected","styles","RunningLogListItemClicked","RunningLogListItem","object_url","data","key","className","onClick","itemClicked","runningDate","jobName","step","checklist","RunningLogListItemNumeric","actionsNum","layersNum","batchJobsNum","runningTime","href","RunningLogsList","useEffect","handleKeyDown","e","code","stopPropagation","preventDefault","logItemClicked","Math","min","selectedIndex","logsListData","length","max","document","addEventListener","removeEventListener","RunningLogsListTable","map","index","VegaLiteChart","spec","title","runData","values","mark","type","tooltip","encoding","x","field","timeUnit","x2","y","color","width","autosize","VegaLite","getListData","localData","batch","ActNum","Set","action","LayerName","size","StepName","ChecklistName","time_diff","start_time","complete_time","start","split","t","Number","start_sec","complete","MainComponent","useState","logDataArray","setLogDataArray","setLogsListData","chartData","setChartData","setRunData","setIndex","loadFiles","a","logs_api_uri","fetch","response","json","resp_json_str","keys_list","JSON","parse","body","keys","promises","Promise","all","respArray","json_promises","resp","dataArray","forEach","i","sort","b","Date","fetchData","localDataArray","localLogsListData","localChartData","stats","timestamp","acpTime","find","Stage","Index","StageIndex","Object","Name","AnalysisName","Layer","StartTime","CompleteTime","Time","StartDate","EndDate","splitterObj","splitterTime","mergerObj","mergerTime","uploadObj","uploadTime","downloadObj","downloadTime","getChartData","localRunData","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"6RAyCeA,MAtCf,SAA6BC,GACzB,IAAIC,EAAQD,EAAME,SAAWC,IAAOC,0BAA4BD,IAAOE,mBACnEC,EAAa,8DAA8DN,EAAMO,KAAKC,IAC1F,OACI,wBAAIC,UAAWR,EAAOS,QAASV,EAAMW,aACjC,4BACKX,EAAMO,KAAKK,aAEhB,4BACKZ,EAAMO,KAAKM,SAEhB,4BACKb,EAAMO,KAAKO,MAEhB,4BACKd,EAAMO,KAAKQ,WAEhB,wBAAIN,UAAWN,IAAOa,2BACjBhB,EAAMO,KAAKU,YAEhB,wBAAIR,UAAWN,IAAOa,2BACjBhB,EAAMO,KAAKW,WAEhB,wBAAIT,UAAWN,IAAOa,2BACjBhB,EAAMO,KAAKY,cAEhB,4BACKnB,EAAMO,KAAKa,aAAe,UAE/B,4BACI,uBAAGC,KAAMf,GACJN,EAAMO,KAAKC,QCkCjBc,MAhEf,SAAyBtB,GAAQ,IAAD,EAyB5B,OAxBAuB,qBAAW,WACP,IAAMC,EAAgB,SAACC,GACnB,OAAQA,EAAEC,MACN,IAAK,YACDD,EAAEE,kBACFF,EAAEG,iBACF5B,EAAM6B,eAAeC,KAAKC,IAAI/B,EAAMgC,cAAc,EAAGhC,EAAMiC,aAAaC,SACxE,MACJ,IAAK,UACDT,EAAEE,kBACFF,EAAEG,iBACF5B,EAAM6B,eAAeC,KAAKK,IAAInC,EAAMgC,cAAc,EAAE,MAQhE,OADAI,SAASC,iBAAiB,UAAWb,GAC9B,WACHY,SAASE,oBAAoB,UAAWd,OAK5C,yBAAKf,UAAWN,IAAOmB,iBACnB,gCACI,6CACA,8BACI,uBAAGD,KAAK,kGAAR,oBAKR,2BAAOZ,UAAWN,IAAOoC,sBACrB,+BACA,4BACI,4CACA,wCACA,oCACA,yCACA,yCACA,wCACA,sCACA,4CACA,0DAGJ,yCACCvC,EAAMiC,oBADP,aACC,EAAoBO,KAAK,SAACjC,EAAMkC,GAAP,OACtB,kBAAC,EAAD,CAAqBjC,IAAKiC,EACLlC,KAAMA,EACNL,SAAUF,EAAMgC,gBAAgBS,EAChC9B,YAAa,kBAAMX,EAAM6B,eAAeY,a,0BCjBlEC,MArCf,SAAuB1C,GAAQ,IAAD,EACpB2C,EAAO,CACTC,MAAK,UAAE5C,EAAM6C,eAAR,aAAE,EAAehC,QACtBN,KAAM,CAAEuC,OAAQ9C,EAAMO,MACtBwC,KAAM,CAAEC,KAAM,MAAOC,QAAS,IAC9BC,SAAU,CACNC,EAAG,CACCH,KAAM,WACNI,MAAO,YACPC,SAAU,uBAEdC,GAAI,CACAN,KAAM,WACNI,MAAO,UACPC,SAAU,uBAEdE,EAAG,CACCP,KAAM,UACNI,MAAO,SAEXI,MAAO,CAAEJ,MAAO,WAEpBK,MAAO,IAEPC,SAAU,OAGd,OACI,yBAAKjD,UAAWN,IAAOuC,eAEf1C,EAAMO,MAAQP,EAAM6C,QAAQzB,YACxB,kBAACuC,EAAA,EAAD,CAAUhB,KAAMA,EAAMpC,KAAMP,EAAMO,OAAU,Y,OCmEzD,SAASqD,EAAYC,GACxB,IAAM5C,EAAU,OAAG4C,QAAH,IAAGA,OAAH,EAAGA,EAAWC,MAAMD,EAAUC,MAAM5B,OAAS,GAAG6B,OAC1D7C,EAAY,IAAI8C,IAAJ,OAAQH,QAAR,IAAQA,OAAR,EAAQA,EAAWC,MAAMtB,KAAI,SAAAyB,GAAM,OAAIA,EAAOC,cAAYC,KAC5E,MAAO,CACHvD,YAAW,OAAEiD,QAAF,IAAEA,OAAF,EAAEA,EAAWjD,YACxBC,QAAO,OAAEgD,QAAF,IAAEA,OAAF,EAAEA,EAAWhD,QACpBC,KAAI,OAAE+C,QAAF,IAAEA,OAAF,EAAEA,EAAWC,MAAM,GAAGM,SAC1BrD,UAAS,OAAE8C,QAAF,IAAEA,OAAF,EAAEA,EAAWC,MAAM,GAAGO,cAC/BpD,WAAYA,EACZC,UAAWA,EACXE,YAAW,OAAEyC,QAAF,IAAEA,OAAF,EAAEA,EAAWzC,YACxBD,aAAY,OAAE0C,QAAF,IAAEA,OAAF,EAAEA,EAAWC,MAAM5B,OAC/B1B,IAAG,OAAEqD,QAAF,IAAEA,OAAF,EAAEA,EAAWrD,KAgHxB,SAAS8D,EAAUC,EAAYC,GAC3B,IAAIC,EAAQF,EAAWG,MAAM,KAAKlC,KAAI,SAAAmC,GAAC,OAAIC,OAAOD,MAC9CE,EAAuB,KAAXJ,EAAM,GAAuB,GAAXA,EAAM,GAAUA,EAAM,GACpDK,EAAWN,EAAcE,MAAM,KAAKlC,KAAI,SAAAmC,GAAC,OAAIC,OAAOD,MAGxD,OAFiC,KAAdG,EAAS,GAA0B,GAAdA,EAAS,GAAUA,EAAS,GACtCD,EClJnBE,MA7Ef,SAAuB/E,GAAQ,IAAD,EACcgF,mBAAS,IADvB,mBACnBC,EADmB,KACLC,EADK,OAEcF,mBAAS,IAFvB,mBAEnB/C,EAFmB,KAELkD,EAFK,OAIQH,mBAAS,MAJjB,mBAInBI,EAJmB,KAIRC,EAJQ,OAKIL,mBAAS,MALb,mBAKnBnC,EALmB,KAKVyC,EALU,OAMAN,mBAAS,GANT,mBAMnBvC,EANmB,KAMZ8C,EANY,cAQXC,IARW,2EAQ1B,0CAAAC,EAAA,6DACQC,EAAe,sEADvB,SAGyBC,MAAMD,GAH/B,cAGQE,EAHR,gBAI8BA,EAASC,OAJvC,cAIQC,EAJR,OAKQC,EAAYC,KAAKC,MAAMH,EAAcI,MAAMC,KAE3CC,EAAWL,EAAUvD,KAAK,SAAAhC,GAAG,OAAImF,MAAM,GAAD,OAAID,EAAJ,YAAoBlF,OAPlE,UAQ0B6F,QAAQC,IAAIF,GARtC,eAQQG,EARR,OASQC,EAAgBD,EAAU/D,KAAI,SAAAiE,GAAI,OAAIA,EAAKZ,UATnD,UAU0BQ,QAAQC,IAAIE,GAVtC,eAUQE,EAVR,QAWcC,SAAS,SAACpG,EAAKqG,GAAN,OAAYrG,EAAKC,IAAMuF,EAAUa,MACpDF,EAAUG,MAAK,SAASpB,EAAEqB,GACtB,OAAO,IAAIC,KAAKD,EAAElG,aAAe,IAAImG,KAAKtB,EAAE7E,gBAbpD,kBAeW8F,GAfX,6CAR0B,sBAkE1B,OAvCAnF,qBAAW,WACP,IAAMyF,EAAS,uCAAG,4BAAAvB,EAAA,sEACeD,IADf,QACRyB,EADQ,QAEK/E,OAAS,GACxBgD,EAAgB+B,GAHN,2CAAH,qDAOa,IAAxBhC,EAAa/C,QACb8E,OAKRzF,qBAAW,WACP,GAAI0D,EAAa/C,OAAS,EAAG,CACzB,IAAMgF,EAAoBjC,EAAazC,KAAI,SAAAjC,GAAI,OAAIqD,EAAYrD,MAC/D4E,EAAgB+B,MAErB,CAACjC,IAGJ1D,qBAAU,WACN,GAAI0D,EAAa/C,OAAS,EAAG,CACzB,IAAM2B,EAAYoB,EAAaxC,GACzB0E,EAAiBtD,EAAUzC,YDftC,SAAsBb,GACzB,IAAI6G,EAAQ7G,EAAKuD,MAAMtB,KAAI,SAAAyB,GACvB,IAAIoD,EAAY9G,EAAK+G,QAAQC,MACzB,SAAA9B,GAAC,OAAIA,EAAE+B,QAAUvD,EAAOuD,OAAS/B,EAAEgC,QAAUxD,EAAOyD,cAExD,MAAO,CACHC,OAAQ,MACR5D,OAAQE,EAAOF,OACf6D,KAAM3D,EAAO4D,aACbC,MAAO7D,EAAOC,UACdsD,MAAOvD,EAAOuD,MACdC,MAAOxD,EAAOyD,WACdK,UAAWV,EAAYA,EAAUU,UAAY,GAC7CC,aAAcX,EAAYA,EAAUW,aAAe,GACnDC,KAAM3D,EAAU+C,EAAUU,UAAWV,EAAUW,cAC/CE,UAAW,IAAInB,KAAJ,qBAAuBM,EAAUU,YAC5CI,QAAS,IAAIpB,KAAJ,qBAAuBM,EAAUW,mBAI9CI,EAAc,CACdT,OAAQ,WACRC,KAAM,WACNH,MAAO,EACPS,UAAW,IAAInB,KAAJ,qBAAuBxG,EAAK8H,aAAaN,YACpDI,QAAS,IAAIpB,KAAJ,qBAAuBxG,EAAK8H,aAAaL,gBAGlDM,EAAY,CACZX,OAAQ,SACRC,KAAM,SACNH,MAAOL,EAAMlF,OAAS,EACtBgG,UAAW,IAAInB,KAAJ,qBAAuBxG,EAAKgI,WAAWR,YAClDI,QAAS,IAAIpB,KAAJ,qBAAuBxG,EAAKgI,WAAWP,gBAGhDQ,EAAY,CACZb,OAAQ,SACRC,KAAM,SACNH,OAAQ,EACRS,UAAW,IAAInB,KAAJ,qBAAuBxG,EAAKkI,WAAWV,YAClDI,QAAS,IAAIpB,KAAJ,qBAAuBxG,EAAKkI,WAAWT,gBAGhDU,EAAc,CACdf,OAAQ,WACRC,KAAM,WACNH,MAAOL,EAAMlF,OAAS,EACtBgG,UAAW,IAAInB,KAAJ,qBAAuBxG,EAAKoI,aAAaZ,YACpDI,QAAS,IAAIpB,KAAJ,qBAAuBxG,EAAKoI,aAAaX,gBAKtD,OADAZ,EAAK,CAAIoB,EAAWJ,GAAf,mBAA+BhB,GAA/B,CAAsCkB,EAAWI,ICtCCE,CAAa/E,GAAa,KACnEgF,EAAejF,EAAYC,GAEjCwB,EAAa8B,GACb7B,EAAWuD,MAEhB,CAAC5D,EAAcxC,IASd,0BAAMhC,UAAWN,IAAO4E,eACpB,kBAAC,EAAD,CACI9C,aAAcA,EACdD,cAAeS,EACfZ,eATW,SAACY,GACpB8C,EAAS9C,MASL,kBAAC,EAAD,CAAelC,KAAM6E,EAAWvC,QAASA,M,OClEtCiG,MAVf,WACI,OACI,yBAAKrI,UAAU,OACX,kDACA,6BACA,kBAAC,EAAD,QCGQsI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFlH,SAASmH,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a,mBExI5BC,EAAOC,QAAU,CAAC,mBAAqB,+CAA+C,0BAA4B,sDAAsD,0BAA4B,sDAAsD,0BAA4B,sDAAsD,6BAA+B,yDAAyD,4BAA8B,wDAAwD,8BAAgC,4D,mBCA1hBD,EAAOC,QAAU,CAAC,gBAAkB,yCAAyC,qBAAuB,gD,mBCApGD,EAAOC,QAAU,CAAC,cAAgB,uC,mBCAlCD,EAAOC,QAAU,CAAC,cAAgB,uC","file":"static/js/main.6bfeb8cd.chunk.js","sourcesContent":["import React from 'react';\r\nimport styles from './RunningLogListItem.module.css';\r\n\r\nfunction RunningLogsListItem(props) {\r\n    let style = props.selected ? styles.RunningLogListItemClicked : styles.RunningLogListItem\r\n    let object_url = \"https://s3.console.aws.amazon.com/s3/object/acp-cloud-logs/\"+props.data.key;\r\n    return (\r\n        <tr className={style} onClick={props.itemClicked}>\r\n            <td>\r\n                {props.data.runningDate}\r\n            </td>\r\n            <td>\r\n                {props.data.jobName}\r\n            </td>\r\n            <td>\r\n                {props.data.step}\r\n            </td>\r\n            <td>\r\n                {props.data.checklist}\r\n            </td>\r\n            <td className={styles.RunningLogListItemNumeric}>\r\n                {props.data.actionsNum}\r\n            </td>\r\n            <td className={styles.RunningLogListItemNumeric}>\r\n                {props.data.layersNum}\r\n            </td>\r\n            <td className={styles.RunningLogListItemNumeric}>\r\n                {props.data.batchJobsNum}\r\n            </td>\r\n            <td>\r\n                {props.data.runningTime || \"Failed\"}\r\n            </td>\r\n            <td>\r\n                <a href={object_url}>\r\n                    {props.data.key}\r\n                </a>\r\n            </td>\r\n        </tr>\r\n    );\r\n}\r\n\r\nexport default RunningLogsListItem;\r\n","import React, {useEffect} from 'react';\r\nimport styles from './RunningLogsList.module.css';\r\nimport RunningLogsListItem from \"./RunningLogListItem/RunningLogListItem\";\r\n\r\nfunction RunningLogsList(props) {\r\n    useEffect( () => {\r\n        const handleKeyDown = (e) => {\r\n            switch (e.code) {\r\n                case \"ArrowDown\":\r\n                    e.stopPropagation();\r\n                    e.preventDefault();\r\n                    props.logItemClicked(Math.min(props.selectedIndex+1, props.logsListData.length));\r\n                    break;\r\n                case \"ArrowUp\":\r\n                    e.stopPropagation();\r\n                    e.preventDefault();\r\n                    props.logItemClicked(Math.max(props.selectedIndex-1,0));\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n        }\r\n\r\n        document.addEventListener('keydown', handleKeyDown);\r\n        return () => {\r\n            document.removeEventListener('keydown', handleKeyDown);\r\n        };\r\n    })\r\n\r\n    return (\r\n        <div className={styles.RunningLogsList}>\r\n            <header>\r\n                <span>Amazon s3 ></span>\r\n                <span>\r\n                    <a href=\"https://s3.console.aws.amazon.com/s3/buckets/acp-cloud-logs/?region=eu-central-1&tab=overview#\">\r\n                        acp-cloud-logs\r\n                    </a>\r\n                </span>\r\n            </header>\r\n            <table className={styles.RunningLogsListTable}>\r\n                <thead>\r\n                <tr>\r\n                    <th>Running date</th>\r\n                    <th>Job Name</th>\r\n                    <th>Step</th>\r\n                    <th>Checklist</th>\r\n                    <th># Actions</th>\r\n                    <th># Layers</th>\r\n                    <th># ACPs</th>\r\n                    <th>Running Time</th>\r\n                    <th>S3 bucket key (filename)</th>\r\n                </tr>\r\n                </thead>\r\n                <tbody>\r\n                {props.logsListData?.map( (data, index) =>\r\n                    <RunningLogsListItem key={index}\r\n                                         data={data}\r\n                                         selected={props.selectedIndex===index}\r\n                                         itemClicked={() => props.logItemClicked(index)}\r\n                    />\r\n                )}\r\n                </tbody>\r\n            </table>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default RunningLogsList;\r\n","import React from 'react';\r\nimport { VegaLite } from 'react-vega'\r\nimport styles from './VegaLiteChart.module.css';\r\n\r\nfunction VegaLiteChart(props) {\r\n    const spec = {\r\n        title: props.runData?.jobName,\r\n        data: { values: props.data },\r\n        mark: { type: \"bar\", tooltip: [] },\r\n        encoding: {\r\n            x: {\r\n                type: \"temporal\",\r\n                field: \"StartDate\",\r\n                timeUnit: \"hoursminutesseconds\"\r\n            },\r\n            x2: {\r\n                type: \"temporal\",\r\n                field: \"EndDate\",\r\n                timeUnit: \"hoursminutesseconds\"\r\n            },\r\n            y: {\r\n                type: \"nominal\",\r\n                field: \"Index\"\r\n            },\r\n            color: { field: \"Object\" }\r\n        },\r\n        width: 800,\r\n        // height: 800,\r\n        autosize: \"fit\"\r\n    }\r\n\r\n    return (\r\n        <div className={styles.VegaLiteChart}>\r\n            {\r\n                props.data && props.runData.runningTime ?\r\n                    <VegaLite spec={spec} data={props.data}/> : \"No data\"\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default VegaLiteChart;\r\n","export function parse(text) {\r\n    const row_lines = text.split('\\n');\r\n    const arrayOfTimestamps = timestamps(row_lines);\r\n    return {\r\n        runningDate: runningDate(row_lines),\r\n        runningTime: runningTime(row_lines),\r\n        jobName: jobName(row_lines),\r\n        batch: batch(arrayOfTimestamps),\r\n        uploadTime: uploadTime(arrayOfTimestamps),\r\n        splitterTime: splitterTime(arrayOfTimestamps),\r\n        acpTime: acpTime(arrayOfTimestamps),\r\n        mergerTime: mergerTime(arrayOfTimestamps),\r\n        downloadTime: downloadTime(arrayOfTimestamps)\r\n    }\r\n}\r\n\r\nfunction jobName(row_lines) {\r\n    const job_line = row_lines.filter(line => line.match(\"Job:\"))[0];\r\n    const job_name = job_line.split(' ')[1];\r\n    return job_name;\r\n}\r\n\r\nfunction runningDate(row_lines) {\r\n    let arrayOfLines = row_lines.filter(line => line.match(\"time\"));\r\n    let splitArray = arrayOfLines[0].split(' ');\r\n    let [day, month, year] = splitArray[1].split(':')[1].split('/');\r\n    let [hour, min] = splitArray[2].split(':');\r\n    return new Date(Date.UTC(year, month - 1, day, hour, min)).toUTCString();\r\n}\r\n\r\nfunction runningTime(row_lines) {\r\n    let job_started_line = row_lines\r\n        .filter(line => line.match(\"Ready for commands\"))[0];\r\n    let start_time = JSON.parse(job_started_line).time;\r\n    let job_ended_line = row_lines\r\n        .filter(line => line.match(\"Job is ready\"));\r\n    if (job_ended_line.length === 0)\r\n        return null;\r\n\r\n    let end_time = JSON.parse(job_ended_line).time;\r\n\r\n    return secToHHMMSS(\r\n        time_diff(start_time, end_time))\r\n}\r\n\r\nexport function getChartData(data) {\r\n    let stats = data.batch.map(action => {\r\n        let timestamp = data.acpTime.find(\r\n            a => a.Stage === action.Stage && a.Index === action.StageIndex\r\n        );\r\n        return {\r\n            Object: \"Acp\",\r\n            ActNum: action.ActNum,\r\n            Name: action.AnalysisName,\r\n            Layer: action.LayerName,\r\n            Stage: action.Stage,\r\n            Index: action.StageIndex,\r\n            StartTime: timestamp ? timestamp.StartTime : \"\",\r\n            CompleteTime: timestamp ? timestamp.CompleteTime : \"\",\r\n            Time: time_diff(timestamp.StartTime, timestamp.CompleteTime),\r\n            StartDate: new Date(`01/01/1970 ${timestamp.StartTime}`),\r\n            EndDate: new Date(`01/01/1970 ${timestamp.CompleteTime}`)\r\n        };\r\n    });\r\n\r\n    let splitterObj = {\r\n        Object: \"Splitter\",\r\n        Name: \"Splitter\",\r\n        Index: 0,\r\n        StartDate: new Date(`01/01/1970 ${data.splitterTime.StartTime}`),\r\n        EndDate: new Date(`01/01/1970 ${data.splitterTime.CompleteTime}`)\r\n    };\r\n\r\n    let mergerObj = {\r\n        Object: \"Merger\",\r\n        Name: \"Merger\",\r\n        Index: stats.length + 1,\r\n        StartDate: new Date(`01/01/1970 ${data.mergerTime.StartTime}`),\r\n        EndDate: new Date(`01/01/1970 ${data.mergerTime.CompleteTime}`)\r\n    };\r\n\r\n    let uploadObj = {\r\n        Object: \"Upload\",\r\n        Name: \"Upload\",\r\n        Index: -1,\r\n        StartDate: new Date(`01/01/1970 ${data.uploadTime.StartTime}`),\r\n        EndDate: new Date(`01/01/1970 ${data.uploadTime.CompleteTime}`)\r\n    };\r\n\r\n    let downloadObj = {\r\n        Object: \"Download\",\r\n        Name: \"Download\",\r\n        Index: stats.length + 2,\r\n        StartDate: new Date(`01/01/1970 ${data.downloadTime.StartTime}`),\r\n        EndDate: new Date(`01/01/1970 ${data.downloadTime.CompleteTime}`)\r\n    };\r\n\r\n    // stats = [uploadObj, splitterObj, ...stats, mergerObj, downloadTime];\r\n    stats = [uploadObj, splitterObj, ...stats, mergerObj, downloadObj];\r\n    return stats;\r\n}\r\n\r\nexport function getListData(localData) {\r\n    const actionsNum = localData?.batch[localData.batch.length - 1].ActNum;\r\n    const layersNum = new Set(localData?.batch.map(action => action.LayerName)).size;\r\n    return {\r\n        runningDate: localData?.runningDate,\r\n        jobName: localData?.jobName,\r\n        step: localData?.batch[0].StepName,\r\n        checklist: localData?.batch[0].ChecklistName,\r\n        actionsNum: actionsNum,\r\n        layersNum: layersNum,\r\n        runningTime: localData?.runningTime,\r\n        batchJobsNum: localData?.batch.length,\r\n        key: localData?.key,\r\n    }\r\n}\r\n\r\nfunction batch(arrayOfTimestamps) {\r\n    let batchObject = arrayOfTimestamps.filter(d => d.type === \"Batch\")[0]\r\n    return JSON.parse(batchObject.message);\r\n}\r\n\r\nfunction uploadTime(arrayOfTimestamps) {\r\n    let uploadTime = {\r\n        StartTime: arrayOfTimestamps.find(\r\n            d => d.object === \"WebClient\" && d.message === \"Job was registered\"\r\n        ).time,\r\n        CompleteTime: arrayOfTimestamps.find(\r\n            d => d.object === \"WebClient\" && d.message === \"After send\"\r\n        ).time\r\n    };\r\n    return uploadTime;\r\n}\r\n\r\nfunction splitterTime(arrayOfTimestamps) {\r\n    let splitter = arrayOfTimestamps.filter(d => d.object === \"Splitter\")\r\n    let s = {\r\n        StartTime: toLocal(\r\n            splitter.find(s => s.message === \"Splitter started\").time\r\n        ),\r\n        CompleteTime: toLocal(splitter.find(s => s.message === \"End of Split\").time)\r\n    };\r\n    return s;\r\n}\r\n\r\nfunction mergerTime(arrayOfTimestamps) {\r\n    let merger = arrayOfTimestamps.filter(d => d.object === \"Merger\");\r\n    if (!merger) return null\r\n\r\n    let mergerStartedMessage = merger.find(s => s.message === \"Preparing job for merge\");\r\n    let mergerCompleteMessage = merger.find(s => s.message === \"Moving Job to S3\");\r\n\r\n    if (!mergerStartedMessage || !mergerCompleteMessage) return null;\r\n\r\n    let s = {\r\n        StartTime: toLocal(mergerStartedMessage.time),\r\n        CompleteTime: toLocal(mergerCompleteMessage.time)\r\n    };\r\n    return s;\r\n}\r\n\r\nfunction downloadTime(arrayOfTimestamps) {\r\n    let downloadStartMessage = arrayOfTimestamps.find(d => d.object === \"WebClient\" && d.message === \"Download Data\");\r\n    let downloadCompleteMessage = arrayOfTimestamps.find(d => d.object === \"WebClient\" && d.message === \"Job is ready\");\r\n    if (!downloadStartMessage || !downloadCompleteMessage) return null;\r\n\r\n    let downloadTime = {\r\n        StartTime: downloadStartMessage.time,\r\n        CompleteTime: downloadCompleteMessage.time\r\n    };\r\n    return downloadTime;\r\n}\r\n\r\nfunction acpTime(arrayOfTimestamps) {\r\n    let acp = arrayOfTimestamps.filter(d => d.type === \"Progress\");\r\n    let acp_transformed = acp.map(action => {\r\n        let message = action.message.split(' ');\r\n        let localTime = toLocal(action.time);\r\n        return {\r\n            Time: localTime,\r\n            Step: message[0],\r\n            Stage: message[1].split(':')[1],\r\n            Index: Number(message[2].split(':')[1])\r\n        };\r\n    });\r\n    let acp_started = acp_transformed\r\n        .filter(action => action.Step === \"Starting\")\r\n        .map(action => {\r\n            return {\r\n                Stage: action.Stage,\r\n                Index: action.Index,\r\n                StartTime: action.Time\r\n            };\r\n        });\r\n    let acp_completed = acp_transformed\r\n        .filter(action => action.Step === \"Completed\")\r\n        .map(action => {\r\n            return {\r\n                Stage: action.Stage,\r\n                Index: action.Index,\r\n                CompleteTime: action.Time\r\n            };\r\n        });\r\n    let acp_timestamp = acp_started.map(action => {\r\n        let completeTimeMessage = acp_completed.find(\r\n            c => c.Stage === action.Stage && c.Index === action.Index\r\n        );\r\n\r\n        return completeTimeMessage ? {\r\n            Stage: action.Stage,\r\n            Index: action.Index,\r\n            StartTime: action.StartTime,\r\n            CompleteTime: completeTimeMessage.CompleteTime\r\n        }  : null;\r\n    });\r\n    return acp_timestamp;\r\n}\r\n\r\nfunction timestamps(row_lines) {\r\n    let arrayOfLines = row_lines.filter(line => line.match(\"time\"));\r\n    let tmpArrayOfLines = [...arrayOfLines];\r\n    tmpArrayOfLines.splice(0, 1);\r\n    return tmpArrayOfLines.map(line => JSON.parse(line));\r\n}\r\n\r\nfunction time_diff(start_time, complete_time) {\r\n    let start = start_time.split(':').map(t => Number(t));\r\n    let start_sec = start[0] * 3600 + start[1] * 60 + start[2];\r\n    let complete = complete_time.split(':').map(t => Number(t));\r\n    let complete_sec = complete[0] * 3600 + complete[1] * 60 + complete[2];\r\n    let diff_sec = complete_sec - start_sec;\r\n    return diff_sec;\r\n}\r\n\r\nfunction secToHHMMSS(time) {\r\n    return new Date(time * 1000).toISOString().substr(11, 8);\r\n}\r\n\r\nfunction toLocal(hhmmss) {\r\n    if (!hhmmss) return null;\r\n    let [HH, MM, SS] = hhmmss.split(':');\r\n    let local = [Number(HH) + 3, MM, SS].join(':');\r\n    return local;\r\n}\r\n","import React, {useEffect, useState} from 'react';\r\nimport styles from './MainComponent.module.css';\r\nimport RunningLogsList from \"../RunningLogsList/RunningLogsList\";\r\nimport VegaLiteChart from \"../VegaLiteChart/VegaLiteChart\";\r\nimport {getChartData, getListData} from \"../../models/log-parser\";\r\n\r\n// import axios from \"axios\";\r\n\r\nfunction MainComponent(props) {\r\n    const [logDataArray, setLogDataArray] = useState([]);\r\n    const [logsListData, setLogsListData] = useState([]);\r\n\r\n    const [chartData, setChartData] = useState(null);\r\n    const [runData, setRunData] = useState(null);\r\n    const [index, setIndex] = useState(0);\r\n\r\n    async function loadFiles() {\r\n        let logs_api_uri = \"https://bah2tkltg6.execute-api.eu-central-1.amazonaws.com/test/list\";\r\n\r\n        let response = await fetch(logs_api_uri);\r\n        let resp_json_str = await response.json()\r\n        let keys_list = JSON.parse(resp_json_str.body).keys;\r\n\r\n        let promises = keys_list.map (key => fetch(`${logs_api_uri}/${key}`))\r\n        let respArray = await Promise.all(promises)\r\n        let json_promises = respArray.map(resp => resp.json())\r\n        let dataArray = await Promise.all(json_promises);\r\n        dataArray.forEach( (data,i) => data.key = keys_list[i] )\r\n        dataArray.sort(function(a,b){\r\n            return new Date(b.runningDate) - new Date(a.runningDate);\r\n        });\r\n        return dataArray;\r\n    }\r\n\r\n    // Effect to load all data from AWS s3\r\n    useEffect( () => {\r\n        const fetchData = async () => {\r\n            const localDataArray = await loadFiles();\r\n            if (localDataArray.length > 0) {\r\n                setLogDataArray(localDataArray);           // all the data\r\n            }\r\n        };\r\n\r\n        if (logDataArray.length === 0) {\r\n            fetchData();\r\n        }\r\n    });\r\n\r\n    // Effect to update list to be displayed\r\n    useEffect( () => {\r\n        if (logDataArray.length > 0) {\r\n            const localLogsListData = logDataArray.map(data => getListData(data))\r\n            setLogsListData(localLogsListData)\r\n        }\r\n    }, [logDataArray])\r\n\r\n    // Effect to update chart on click on a row in the list\r\n    useEffect(() => {\r\n        if (logDataArray.length > 0) {\r\n            const localData = logDataArray[index];\r\n            const localChartData = localData.runningTime ? getChartData(localData) : null;\r\n            const localRunData = getListData(localData);\r\n\r\n            setChartData(localChartData);              // chart data for selected log in the list\r\n            setRunData(localRunData);                  // run data for selected row in the list, help to build chart\r\n        }\r\n    }, [logDataArray, index]);\r\n\r\n\r\n    // Effect to update current index\r\n    const logItemClicked = (index) => {\r\n        setIndex(index);\r\n    }\r\n\r\n    return (\r\n        <main className={styles.MainComponent}>\r\n            <RunningLogsList\r\n                logsListData={logsListData}\r\n                selectedIndex={index}\r\n                logItemClicked={logItemClicked}/>\r\n            <VegaLiteChart data={chartData} runData={runData} />\r\n        </main>\r\n    );\r\n}\r\n\r\nexport default MainComponent;\r\n","import React from 'react';\r\nimport MainComponent from \"./components/MainComponent/MainComponent\";\r\nimport './App.css';\r\n\r\nfunction App() {\r\n    return (\r\n        <div className=\"App\">\r\n            <h1>Cloud Running Logs</h1>\r\n            <hr/>\r\n            <MainComponent />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"RunningLogListItem\":\"RunningLogListItem_RunningLogListItem__1S2n8\",\"RunningLogListItemClicked\":\"RunningLogListItem_RunningLogListItemClicked__14z5x\",\"RunningLogListItemNumeric\":\"RunningLogListItem_RunningLogListItemNumeric__24czR\",\"RunningLogListItemJobName\":\"RunningLogListItem_RunningLogListItemJobName__Y8UPs\",\"RunningLogListItemNumActions\":\"RunningLogListItem_RunningLogListItemNumActions__1Ci-9\",\"RunningLogListItemNumLayers\":\"RunningLogListItem_RunningLogListItemNumLayers__3gAIe\",\"RunningLogListItemRunningTime\":\"RunningLogListItem_RunningLogListItemRunningTime__20Nah\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"RunningLogsList\":\"RunningLogsList_RunningLogsList__3FvQO\",\"RunningLogsListTable\":\"RunningLogsList_RunningLogsListTable__lSMj_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"MainComponent\":\"MainComponent_MainComponent__v6Cpx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"VegaLiteChart\":\"VegaLiteChart_VegaLiteChart__2LGfz\"};"],"sourceRoot":""}