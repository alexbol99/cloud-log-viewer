{"version":3,"sources":["components/RunningLogsList/RunningLogListItem/RunningLogListItem.js","UI/Button/Button.js","components/RunningLogsList/RunningLogsListHeader/RunningLogsListHeader.js","components/RunningLogsList/RunningLogsList.js","components/VegaLiteChart/VegaLiteChart.js","models/logData.js","models/logParser.js","components/MainComponent/MainComponent.js","App.js","serviceWorker.js","index.js","components/RunningLogsList/RunningLogListItem/RunningLogListItem.module.css","components/RunningLogsList/RunningLogsList.module.css","components/MainComponent/MainComponent.module.css","UI/Button/Button.module.css","components/RunningLogsList/RunningLogsListHeader/RunningLogsListHeader.module.css","components/VegaLiteChart/VegaLiteChart.module.css"],"names":["RunningLogsListItem","props","refElement","useRef","useEffect","selected","scrollIntoView","style","styles","RunningLogListItemClicked","RunningLogListItem","batchFailed","RunningLogListItemFailed","object_url","data","key","tableClientRect","current","parentElement","getBoundingClientRect","rowClientReact","bottom","top","className","onClick","itemClicked","ref","runningDate","jobName","step","checklist","RunningLogListItemNumeric","actionsNum","layersNum","batchJobsNum","runningTime","href","target","rel","button","title","classes","Button","icon","size","spin","RunningLogsListHeader","faSyncAlt","loading","onRefreshButtonPressed","RunningLogsList","handleKeyDown","e","code","stopPropagation","preventDefault","selectedIndex","logsListData","length","logItemClicked","document","addEventListener","removeEventListener","RunningLogsListTable","map","index","errorTime","VegaLiteChart","spec","runData","values","mark","type","tooltip","encoding","x","field","timeUnit","x2","y","sort","color","width","autosize","VegaLite","getListData","localData","batch","ActNum","Set","action","LayerName","StepName","ChecklistName","time_diff","start_time","complete_time","start","split","t","Number","start_sec","complete","parse","text","row_lines","arrayOfTimestamps","arrayOfLines","filter","line","match","tmpArrayOfLines","splice","JSON","timestamps","errorTimeString","uploadTime","splitterTime","acpTime","mergerTime","downloadTime","splitArray","day","month","year","substr","hour","min","Date","UTC","toUTCString","time","job_started_line","job_ended_line","end_time","toISOString","batchObject","d","message","StartTime","find","object","CompleteTime","splitter","toLocal","s","merger","mergerStartMessage","mergerCompleteMessage","downloadStartMessage","downloadCompleteMessage","errorTimeStr","acp_transformed","Time","Step","Stage","Index","acp_started","acp_completed","completeTimeMessage","c","Succeed","errorMessage","hhmmss","HH","MM","SS","join","MainComponent","useState","logDataArray","setLogDataArray","setIndex","setLoading","chartData","loadFiles","a","logs_api_uri","fetch","response","json","resp_json_str","keys_list","body","keys","promises","Promise","all","respArray","json_promises","resp","textArray","dataArray","forEach","i","b","fetchData","localDataArray","mergerObj","downloadObj","stats","timestamp","StageIndex","Object","Name","AnalysisName","Layer","ActParam","BeginNf","EndNf","StartDate","EndDate","uploadObj","splitterObj","getChartData","App","fontSize","Boolean","window","location","hostname","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","module","exports"],"mappings":"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","file":"static/js/main.8cfe074a.chunk.js","sourcesContent":["import React, {useRef, useEffect} from 'react';\r\nimport styles from './RunningLogListItem.module.css';\r\n\r\nfunction RunningLogsListItem(props) {\r\n    const refElement = useRef();\r\n    useEffect( () => {\r\n        if (props.selected) {\r\n            scrollIntoView();\r\n        }\r\n    })\r\n\r\n    let style = props.selected ? styles.RunningLogListItemClicked : styles.RunningLogListItem;\r\n    style = props.batchFailed ? `${style} ${styles.RunningLogListItemFailed}` : style;\r\n    let object_url = \"https://s3.console.aws.amazon.com/s3/object/acp-cloud-logs/\"+props.data.key;\r\n\r\n    const scrollIntoView = () => {\r\n        const tableBody = refElement.current.parentElement;\r\n        const table = tableBody.parentElement;\r\n        const tableClientRect = table.getBoundingClientRect();\r\n        const rowClientReact = refElement.current.getBoundingClientRect();\r\n        if (rowClientReact.bottom > tableClientRect.bottom) {\r\n            refElement.current.scrollIntoView(false);\r\n        }\r\n        if (rowClientReact.top < tableClientRect.top) {\r\n            refElement.current.scrollIntoView(true);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <tr className={style} onClick={props.itemClicked} ref={refElement}>\r\n            <td>\r\n                {props.data.runningDate}\r\n            </td>\r\n            <td>\r\n                {props.data.jobName}\r\n            </td>\r\n            <td>\r\n                {props.data.step}\r\n            </td>\r\n            <td>\r\n                {props.data.checklist}\r\n            </td>\r\n            <td className={styles.RunningLogListItemNumeric}>\r\n                {props.data.actionsNum}\r\n            </td>\r\n            <td className={styles.RunningLogListItemNumeric}>\r\n                {props.data.layersNum}\r\n            </td>\r\n            <td className={styles.RunningLogListItemNumeric}>\r\n                {props.data.batchJobsNum}\r\n            </td>\r\n            <td>\r\n                {props.data.runningTime || \"Failed\"}\r\n            </td>\r\n            <td>\r\n                <a href={object_url} target=\"_blank\" rel=\"noopener noreferrer\">\r\n                    {props.data.key}\r\n                </a>\r\n            </td>\r\n        </tr>\r\n    );\r\n}\r\n\r\nexport default RunningLogsListItem;\r\n","import React from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport classes from \"./Button.module.css\";\r\n\r\nconst button = (props) => {\r\n    return (\r\n        <button title={props.title} onClick={props.onClick} className={classes.Button}>\r\n            <FontAwesomeIcon icon={props.icon} size=\"2x\" spin={props.spin}  />\r\n        </button>\r\n    );\r\n};\r\n\r\nexport default button;","import React from 'react';\r\nimport Button from '../../../UI/Button/Button';\r\nimport { faSyncAlt } from '@fortawesome/free-solid-svg-icons'\r\n\r\nimport styles from './RunningLogsListHeader.module.css'\r\n\r\nfunction RunningLogsListHeader(props) {\r\n    return (\r\n        <header className={styles.RunningLogsListHeader}>\r\n            <span>Amazon s3 ></span>\r\n            <span>\r\n                <a href=\"https://s3.console.aws.amazon.com/s3/buckets/acp-cloud-logs/?region=eu-central-1&tab=overview#\"\r\n                   target=\"_blank\" rel=\"noopener noreferrer\">\r\n                    acp-cloud-logs\r\n                </a>\r\n            </span>\r\n            <span>\r\n                <Button\r\n                    title=\"Reload logs from S3 bucket\"\r\n                    icon={faSyncAlt}\r\n                    spin={props.loading}\r\n                    onClick={props.onRefreshButtonPressed}\r\n                />\r\n            </span>\r\n        </header>\r\n    );\r\n}\r\n\r\nexport default RunningLogsListHeader;\r\n","import React, {useEffect} from 'react';\r\nimport styles from './RunningLogsList.module.css';\r\nimport RunningLogsListItem from \"./RunningLogListItem/RunningLogListItem\";\r\nimport RunningLogsListHeader from \"./RunningLogsListHeader/RunningLogsListHeader\";\r\n\r\nfunction RunningLogsList(props) {\r\n    useEffect( () => {\r\n        const handleKeyDown = (e) => {\r\n            switch (e.code) {\r\n                case \"ArrowDown\":\r\n                    e.stopPropagation();\r\n                    e.preventDefault();\r\n                    if (props.selectedIndex < props.logsListData.length-1) {\r\n                        props.logItemClicked(props.selectedIndex+1);\r\n                    }\r\n                    break;\r\n                case \"ArrowUp\":\r\n                    e.stopPropagation();\r\n                    e.preventDefault();\r\n                    if (props.selectedIndex > 0) {\r\n                        props.logItemClicked(props.selectedIndex-1);\r\n                    }\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n        }\r\n\r\n        document.addEventListener('keydown', handleKeyDown);\r\n        return () => {\r\n            document.removeEventListener('keydown', handleKeyDown);\r\n        };\r\n    })\r\n\r\n    return (\r\n        <div className={styles.RunningLogsList}>\r\n            <RunningLogsListHeader\r\n                loading={props.loading}\r\n                onRefreshButtonPressed={props.onRefreshButtonPressed}\r\n            />\r\n            {/*<header>*/}\r\n            {/*    <span>Amazon s3 ></span>*/}\r\n            {/*    <span>*/}\r\n            {/*        <a href=\"https://s3.console.aws.amazon.com/s3/buckets/acp-cloud-logs/?region=eu-central-1&tab=overview#\"*/}\r\n            {/*           target=\"_blank\" rel=\"noopener noreferrer\">*/}\r\n            {/*            acp-cloud-logs*/}\r\n            {/*        </a>*/}\r\n            {/*    </span>*/}\r\n            {/*</header>*/}\r\n            <table className={styles.RunningLogsListTable}>\r\n                <thead>\r\n                    <tr>\r\n                        <th>Running date</th>\r\n                        <th>Job Name</th>\r\n                        <th>Step</th>\r\n                        <th>Checklist</th>\r\n                        <th># Actions</th>\r\n                        <th># Layers</th>\r\n                        <th># ACPs</th>\r\n                        <th>Running Time</th>\r\n                        <th>S3 bucket key (filename)</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {props.logsListData?.map( (data, index) =>\r\n                        <RunningLogsListItem key={index}\r\n                                             data={data}\r\n                                             selected={props.selectedIndex===index}\r\n                                             batchFailed={!!data.errorTime}\r\n                                             itemClicked={() => props.logItemClicked(index)}\r\n                        />\r\n                    )}\r\n                </tbody>\r\n            </table>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default RunningLogsList;\r\n","import React from 'react';\r\nimport { VegaLite } from 'react-vega'\r\nimport styles from './VegaLiteChart.module.css';\r\n\r\nfunction VegaLiteChart(props) {\r\n    const spec = {\r\n        \"$schema\": \"https://vega.github.io/schema/vega-lite/v4.json\",\r\n        title: props.runData?.jobName,\r\n        data: { values: props.data },\r\n        mark: { type: \"bar\", tooltip: [] },\r\n        encoding: {\r\n            x: {\r\n                type: \"temporal\",\r\n                field: \"StartDate\",\r\n                timeUnit: \"hoursminutesseconds\"\r\n            },\r\n            x2: {\r\n                type: \"temporal\",\r\n                field: \"EndDate\",\r\n                timeUnit: \"hoursminutesseconds\"\r\n            },\r\n            y: {\r\n                type: \"nominal\",\r\n                field: \"Index\",\r\n                sort: null\r\n            },\r\n            color: { field: \"Object\" }\r\n        },\r\n        width: 800,\r\n        // height: 800,\r\n        autosize: \"fit\"\r\n    }\r\n\r\n    return (\r\n        <div className={styles.VegaLiteChart}>\r\n            {\r\n                props.data && props.runData.runningTime ?\r\n                    <VegaLite spec={spec} data={props.data}/> : null\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default VegaLiteChart;\r\n","export function getChartData(data) {\r\n    let stats = data.batch.map(action => {\r\n        let timestamp = data.acpTime.find(\r\n            a => a.Stage === action.Stage && a.Index === action.StageIndex\r\n        );\r\n        return {\r\n            Object: timestamp.Succeed ? \"Acp\" : \"Acp Failed\",\r\n            Stage: action.Stage,\r\n            Index: action.Stage + '_' + action.StageIndex,\r\n            ActNum: action.ActNum,\r\n            Name: action.AnalysisName,\r\n            Layer: action.LayerName,\r\n            ActParam: action.ActParam,\r\n            BeginNf: action.BeginNf,\r\n            EndNf: action.EndNf,\r\n            StartTime: timestamp ? timestamp.StartTime : \"\",\r\n            CompleteTime: timestamp ? timestamp.CompleteTime : \"\",\r\n            Time: time_diff(timestamp.StartTime, timestamp.CompleteTime),\r\n            StartDate: new Date(`01/01/1970 ${timestamp.StartTime}`),\r\n            EndDate: new Date(`01/01/1970 ${timestamp.CompleteTime}`)\r\n        };\r\n    });\r\n\r\n    let uploadObj = {\r\n        Object: \"Upload\",\r\n        Name: \"Upload\",\r\n        Index: -1,\r\n        StartDate: new Date(`01/01/1970 ${data.uploadTime.StartTime}`),\r\n        EndDate: new Date(`01/01/1970 ${data.uploadTime.CompleteTime}`)\r\n    };\r\n\r\n    let splitterObj = {\r\n        Object: \"Splitter\",\r\n        Name: \"Splitter\",\r\n        Index: 0,\r\n        StartDate: new Date(`01/01/1970 ${data.splitterTime.StartTime}`),\r\n        EndDate: new Date(`01/01/1970 ${data.splitterTime.CompleteTime}`)\r\n    };\r\n\r\n    let mergerObj;\r\n    if (data.mergerTime.StartTime && data.mergerTime.CompleteTime) {\r\n        mergerObj = {\r\n            Object: \"Merger\",\r\n            Name: \"Merger\",\r\n            Index: stats.length + 1,\r\n            StartDate: new Date(`01/01/1970 ${data.mergerTime.StartTime}`),\r\n            EndDate: new Date(`01/01/1970 ${data.mergerTime.CompleteTime}`)\r\n        };\r\n    }\r\n\r\n    let downloadObj;\r\n    if (data.downloadTime.StartTime && data.downloadTime.CompleteTime) {\r\n        downloadObj = {\r\n            Object: \"Download\",\r\n            Name: \"Download\",\r\n            Index: stats.length + 2,\r\n            StartDate: new Date(`01/01/1970 ${data.downloadTime.StartTime}`),\r\n            EndDate: new Date(`01/01/1970 ${data.downloadTime.CompleteTime}`)\r\n        };\r\n    }\r\n\r\n    stats = [uploadObj, splitterObj, ...stats];\r\n    if (mergerObj) stats = [...stats, mergerObj];\r\n    if (downloadObj) stats = [...stats, downloadObj];\r\n\r\n    return stats;\r\n}\r\n\r\n\r\nexport function getListData(localData) {\r\n    const actionsNum = localData?.batch[localData.batch.length - 1].ActNum;\r\n    const layersNum = new Set(localData?.batch.map(action => action.LayerName)).size;\r\n    return {\r\n        runningDate: localData?.runningDate,\r\n        jobName: localData?.jobName,\r\n        step: localData?.batch[0].StepName,\r\n        checklist: localData?.batch[0].ChecklistName,\r\n        actionsNum: actionsNum,\r\n        layersNum: layersNum,\r\n        runningTime: localData?.runningTime,\r\n        batchJobsNum: localData?.batch.length,\r\n        key: localData?.key,\r\n        errorTime: localData?.errorTime\r\n    }\r\n}\r\n\r\nfunction time_diff(start_time, complete_time) {\r\n    let start = start_time.split(':').map(t => Number(t));\r\n    let start_sec = start[0] * 3600 + start[1] * 60 + start[2];\r\n    let complete = complete_time.split(':').map(t => Number(t));\r\n    let complete_sec = complete[0] * 3600 + complete[1] * 60 + complete[2];\r\n    let diff_sec = complete_sec - start_sec;\r\n    return diff_sec;\r\n}\r\n","export function parse(text) {\r\n    const row_lines = text.split('\\n');\r\n    const arrayOfTimestamps = timestamps(row_lines);\r\n    const errorTimeString = errorTime(row_lines, arrayOfTimestamps);\r\n    return {\r\n        runningDate: runningDate(row_lines),\r\n        runningTime: runningTime(row_lines, errorTimeString),\r\n        jobName: jobName(row_lines),\r\n        batch: batch(arrayOfTimestamps),\r\n        uploadTime: uploadTime(arrayOfTimestamps),\r\n        splitterTime: splitterTime(arrayOfTimestamps),\r\n        acpTime: acpTime(row_lines, arrayOfTimestamps),\r\n        mergerTime: mergerTime(arrayOfTimestamps),\r\n        downloadTime: downloadTime(arrayOfTimestamps),\r\n        errorTime: errorTimeString\r\n    };\r\n}\r\n\r\nfunction jobName(row_lines) {\r\n    const job_line = row_lines.filter(line => line.match(\"Job:\"))[0];\r\n    const job_name = job_line.split(' ')[1];\r\n    return job_name;\r\n}\r\n\r\nfunction runningDate(row_lines) {\r\n    let arrayOfLines = row_lines.filter(line => line.match(\"time\"));\r\n    let splitArray = arrayOfLines[0].split(' ');\r\n    let [day, month, year] = splitArray[1].split(':')[1].split('/');\r\n    if (day.length > 2) day = day.substr(1);\r\n    let [hour, min] = splitArray[2].split(':');\r\n    if (hour.length > 2) hour = hour.substr(1);\r\n    if (min.length > 2) min = min.substr(1);\r\n    return new Date(Date.UTC(year, month - 1, day, hour, min)).toUTCString();\r\n}\r\n\r\nfunction runningTime(row_lines, errorTime) {\r\n    let job_started_line = row_lines\r\n        .filter(line => line.match(\"Ready for commands\"))[0];\r\n    let start_time = JSON.parse(job_started_line).time;\r\n    let job_ended_line = row_lines\r\n        .filter(line => line.match(\"Job is ready\"));\r\n    let end_time = job_ended_line.length > 0 ? JSON.parse(job_ended_line).time : errorTime;\r\n\r\n    return end_time ? secToHHMMSS(\r\n        time_diff(start_time, end_time)) : \"\";\r\n}\r\n\r\n// export function getChartData(data) {\r\n//     let stats = data.batch.map(action => {\r\n//         let timestamp = data.acpTime.find(\r\n//             a => a.Stage === action.Stage && a.Index === action.StageIndex\r\n//         );\r\n//         return {\r\n//             Object: \"Acp\",\r\n//             ActNum: action.ActNum,\r\n//             Name: action.AnalysisName,\r\n//             Layer: action.LayerName,\r\n//             Stage: action.Stage,\r\n//             Index: action.StageIndex,\r\n//             StartTime: timestamp ? timestamp.StartTime : \"\",\r\n//             CompleteTime: timestamp ? timestamp.CompleteTime : \"\",\r\n//             Time: time_diff(timestamp.StartTime, timestamp.CompleteTime),\r\n//             StartDate: new Date(`01/01/1970 ${timestamp.StartTime}`),\r\n//             EndDate: new Date(`01/01/1970 ${timestamp.CompleteTime}`)\r\n//         };\r\n//     });\r\n\r\n//     let splitterObj = {\r\n//         Object: \"Splitter\",\r\n//         Name: \"Splitter\",\r\n//         Index: 0,\r\n//         StartDate: new Date(`01/01/1970 ${data.splitterTime.StartTime}`),\r\n//         EndDate: new Date(`01/01/1970 ${data.splitterTime.CompleteTime}`)\r\n//     };\r\n\r\n//     let mergerObj = {\r\n//         Object: \"Merger\",\r\n//         Name: \"Merger\",\r\n//         Index: stats.length + 1,\r\n//         StartDate: new Date(`01/01/1970 ${data.mergerTime.StartTime}`),\r\n//         EndDate: new Date(`01/01/1970 ${data.mergerTime.CompleteTime}`)\r\n//     };\r\n\r\n//     let uploadObj = {\r\n//         Object: \"Upload\",\r\n//         Name: \"Upload\",\r\n//         Index: -1,\r\n//         StartDate: new Date(`01/01/1970 ${data.uploadTime.StartTime}`),\r\n//         EndDate: new Date(`01/01/1970 ${data.uploadTime.CompleteTime}`)\r\n//     };\r\n\r\n//     let downloadObj = {\r\n//         Object: \"Download\",\r\n//         Name: \"Download\",\r\n//         Index: stats.length + 2,\r\n//         StartDate: new Date(`01/01/1970 ${data.downloadTime.StartTime}`),\r\n//         EndDate: new Date(`01/01/1970 ${data.downloadTime.CompleteTime}`)\r\n//     };\r\n\r\n//     // stats = [uploadObj, splitterObj, ...stats, mergerObj, downloadTime];\r\n//     stats = [uploadObj, splitterObj, ...stats, mergerObj, downloadObj];\r\n//     return stats;\r\n// }\r\n\r\nfunction batch(arrayOfTimestamps) {\r\n    let batchObject = arrayOfTimestamps.filter(d => d.type === \"Batch\")[0];\r\n    return JSON.parse(batchObject.message);\r\n}\r\n\r\nfunction uploadTime(arrayOfTimestamps) {\r\n    let uploadTime = {\r\n        StartTime: arrayOfTimestamps.find(\r\n            d => d.object === \"WebClient\" && d.message === \"Job was registered\"\r\n        ).time,\r\n        CompleteTime: arrayOfTimestamps.find(\r\n            d => d.object === \"WebClient\" && d.message === \"After send\"\r\n        ).time\r\n    };\r\n    return uploadTime;\r\n}\r\n\r\nfunction splitterTime(arrayOfTimestamps) {\r\n    let splitter = arrayOfTimestamps.filter(d => d.object === \"Splitter\")\r\n    let s = {\r\n        StartTime: toLocal(\r\n            splitter.find(s => s.message === \"Splitter started\").time\r\n        ),\r\n        CompleteTime: toLocal(splitter.find(s => s.message === \"End of Split\").time)\r\n    };\r\n    return s;\r\n}\r\n\r\nfunction mergerTime(arrayOfTimestamps) {\r\n    let merger = arrayOfTimestamps.filter(d => d.object === \"Merger\");\r\n    // if (!merger) return null\r\n\r\n    let mergerStartMessage = merger.find(s => s.message === \"Preparing job for merge\");\r\n    let mergerCompleteMessage = merger.find(s => s.message === \"Moving Job to S3\");\r\n\r\n    let s = {\r\n        StartTime: mergerStartMessage ? toLocal(mergerStartMessage.time) : null,\r\n        CompleteTime: mergerCompleteMessage ? toLocal(mergerCompleteMessage.time) : null\r\n    };\r\n    return s;\r\n}\r\n\r\nfunction downloadTime(arrayOfTimestamps) {\r\n    let downloadStartMessage = arrayOfTimestamps.find(d => d.object === \"WebClient\" && d.message === \"Download Data\");\r\n    let downloadCompleteMessage = arrayOfTimestamps.find(d => d.object === \"WebClient\" && d.message === \"Job is ready\");\r\n    let downloadTime = {\r\n        StartTime: downloadStartMessage ? downloadStartMessage.time : null,\r\n        CompleteTime: downloadCompleteMessage ? downloadCompleteMessage.time : null\r\n    };\r\n    return downloadTime;\r\n}\r\n\r\nfunction acpTime(row_lines, arrayOfTimestamps) {\r\n    let errorTimeStr = errorTime(row_lines, arrayOfTimestamps);\r\n    let acp = arrayOfTimestamps.filter(d => (d.type === \"Progress\" || d.type === \"Info\") && d.object === \"ACP\");\r\n    let acp_transformed = acp.map(action => {\r\n        let message = action.message.split(' ');\r\n        let localTime = toLocal(action.time);\r\n        return {\r\n            Time: localTime,\r\n            Step: message[0],\r\n            Stage: message[1].split(':')[1],\r\n            Index: Number(message[2].split(':')[1]) + 1\r\n        };\r\n    });\r\n    let acp_started = acp_transformed\r\n        .filter(action => action.Step === \"Starting\")\r\n        .map(action => {\r\n            return {\r\n                Stage: action.Stage,\r\n                Index: action.Index,\r\n                StartTime: action.Time\r\n            };\r\n        });\r\n    let acp_completed = acp_transformed\r\n        .filter(action => action.Step === \"Completing\")\r\n        .map(action => {\r\n            return {\r\n                Stage: action.Stage,\r\n                Index: action.Index,\r\n                CompleteTime: action.Time\r\n            };\r\n        });\r\n    let acp_timestamp = acp_started.map(action => {\r\n        let completeTimeMessage = acp_completed.find(\r\n            c => c.Stage === action.Stage && c.Index === action.Index\r\n        );\r\n\r\n        return {\r\n            Stage: action.Stage,\r\n            Index: action.Index,\r\n            StartTime: action.StartTime,\r\n            CompleteTime: completeTimeMessage ? completeTimeMessage.CompleteTime : errorTimeStr,\r\n            Succeed: !!completeTimeMessage\r\n        };\r\n    });\r\n    return acp_timestamp;\r\n}\r\n\r\nfunction errorTime(row_lines, arrayOfTimestamps) {\r\n    let errorMessage = arrayOfTimestamps.find(\r\n        d => d.object === \"WebClient\" && d.type === \"ERROR\"\r\n    );\r\n\r\n    let errorTime = null;\r\n    if (errorMessage) {\r\n        errorTime = errorMessage.time\r\n    }\r\n    // else {\r\n    //     let ping_lines = row_lines\r\n    //         .filter(line => line.match(\"I am alive\"));\r\n    //     errorTime = ping_lines.length > 0 ? JSON.parse(ping_lines[ping_lines.length - 1]).Time : null;\r\n    // }\r\n    return errorTime;\r\n}\r\n\r\nfunction timestamps(row_lines) {\r\n    let arrayOfLines = row_lines.filter(line => line.match(\"time\"));\r\n    let tmpArrayOfLines = [...arrayOfLines];\r\n    tmpArrayOfLines.splice(0, 1);\r\n    return tmpArrayOfLines.map(line => JSON.parse(line));\r\n}\r\n\r\nfunction time_diff(start_time, complete_time) {\r\n    let start = start_time.split(':').map(t => Number(t));\r\n    let start_sec = start[0] * 3600 + start[1] * 60 + start[2];\r\n    let complete = complete_time.split(':').map(t => Number(t));\r\n    let complete_sec = complete[0] * 3600 + complete[1] * 60 + complete[2];\r\n    let diff_sec = complete_sec - start_sec;\r\n    return diff_sec;\r\n}\r\n\r\nfunction secToHHMMSS(time) {\r\n    return new Date(time * 1000).toISOString().substr(11, 8);\r\n}\r\n\r\nfunction toLocal(hhmmss) {\r\n    if (!hhmmss) return null;\r\n    let [HH, MM, SS] = hhmmss.split(':');\r\n    let local = [Number(HH) + 3, MM, SS].join(':');\r\n    return local;\r\n}\r\n","import React, {useEffect, useState} from 'react';\r\nimport styles from './MainComponent.module.css';\r\nimport RunningLogsList from \"../RunningLogsList/RunningLogsList\";\r\nimport VegaLiteChart from \"../VegaLiteChart/VegaLiteChart\";\r\nimport {getChartData, getListData} from \"../../models/logData\";\r\nimport {parse} from \"../../models/logParser\";\r\n\r\nfunction MainComponent(props) {\r\n    const [logDataArray, setLogDataArray] = useState([]);\r\n    const [index, setIndex] = useState(0);\r\n    const [loading, setLoading] = useState(false);\r\n\r\n    let logsListData = [];\r\n    let chartData = null;\r\n    let runData = null;\r\n\r\n    const loadFiles = async() => {\r\n        let logs_api_uri = \"https://bah2tkltg6.execute-api.eu-central-1.amazonaws.com/test/list\";\r\n\r\n        let response = await fetch(logs_api_uri);\r\n        let resp_json_str = await response.json()\r\n        let keys_list = JSON.parse(resp_json_str.body).keys;\r\n\r\n        let promises = keys_list.map (key => fetch(`${logs_api_uri}/${key}`))\r\n        let respArray = await Promise.all(promises)\r\n        let json_promises = respArray.map(resp => resp.json())\r\n        let textArray = await Promise.all(json_promises);\r\n        let dataArray = textArray.map( e => parse(e.text));\r\n        dataArray.forEach( (data,i) => data.key = keys_list[i] )\r\n        dataArray.sort(function(a,b){\r\n            return new Date(b.runningDate) - new Date(a.runningDate);\r\n        });\r\n        return dataArray;\r\n    }\r\n\r\n    const fetchData = async () => {\r\n        setLoading(true);\r\n        const localDataArray = await loadFiles();\r\n        // If all data loaded, render list and select first row\r\n        if (localDataArray.length > 0) {\r\n            setLoading(false);\r\n            setLogDataArray(localDataArray);             // trigger rendering\r\n        }\r\n    };\r\n\r\n    // Effect to load all data from AWS s3\r\n    useEffect( () => {\r\n        if (logDataArray.length === 0) {\r\n            fetchData();\r\n        }\r\n    });\r\n\r\n    // Callback to set new chart data and update selected index\r\n    const logItemClicked = (index) => {\r\n        setIndex(index);                                     // trigger rendering\r\n    }\r\n\r\n    const reload = () => {\r\n        fetchData()\r\n        // setLoading(true)\r\n    }\r\n\r\n    // Setup data before rendering\r\n    if (logDataArray.length > 0) {\r\n        logsListData = logDataArray.map(data => getListData(data))\r\n\r\n        let localData = logDataArray[index];\r\n        try {\r\n            chartData = getChartData(localData);\r\n        }\r\n        catch (e) {\r\n            chartData = null;\r\n        }\r\n\r\n        runData = getListData(localData);\r\n    }\r\n\r\n    return (\r\n        <main className={styles.MainComponent}>\r\n            <RunningLogsList\r\n                logsListData={logsListData}\r\n                selectedIndex={index}\r\n                loading={loading}\r\n                logItemClicked={logItemClicked}\r\n                onRefreshButtonPressed={reload}\r\n            />\r\n            <VegaLiteChart data={chartData} runData={runData} />\r\n        </main>\r\n    );\r\n}\r\n\r\nexport default MainComponent;\r\n","import React from 'react';\r\nimport MainComponent from \"./components/MainComponent/MainComponent\";\r\nimport './App.css';\r\n\r\nfunction App() {\r\n    return (\r\n        <div className=\"App\">\r\n            <div className=\"content\">\r\n                <h1>DFM Cloud Monitor</h1>\r\n                <hr />\r\n                <MainComponent />\r\n                <hr />\r\n            </div>\r\n            <footer className=\"footer\">\r\n                <p style={{fontSize:\"12px\"}}>Alex Bol 2020</p>\r\n            </footer>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"RunningLogListItem\":\"RunningLogListItem_RunningLogListItem__3ikvQ\",\"RunningLogListItemClicked\":\"RunningLogListItem_RunningLogListItemClicked__2_f2Z\",\"RunningLogListItemFailed\":\"RunningLogListItem_RunningLogListItemFailed__2UuwH\",\"RunningLogListItemNumeric\":\"RunningLogListItem_RunningLogListItemNumeric__1cPYu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"RunningLogsList\":\"RunningLogsList_RunningLogsList__2_vp0\",\"RunningLogsListTable\":\"RunningLogsList_RunningLogsListTable__1kV1q\",\"fadeIn\":\"RunningLogsList_fadeIn__1Lct4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"MainComponent\":\"MainComponent_MainComponent___86ZC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Button\":\"Button_Button__1u8dQ\",\"Icon\":\"Button_Icon__1mPII\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"RunningLogsListHeader\":\"RunningLogsListHeader_RunningLogsListHeader__319DL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"VegaLiteChart\":\"VegaLiteChart_VegaLiteChart__3wHRE\"};"],"sourceRoot":""}