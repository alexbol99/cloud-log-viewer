{"version":3,"sources":["UI/Button/Button.js","models/aws_api.js","components/FileUploadButton/FileUploadButton.js","components/MainComponent/RunningLogsList/RunningLogsListHeader/RunningLogsListHeader.js","UI/ModalPopup/ModalPopup.js","UI/Modal.js","components/FileContentPopup/FileContentPopup.js","components/MainComponent/RunningLogsList/RunningLogListItem/RunningLogListItem.js","components/MainComponent/RunningLogsList/RunningLogsListTable/RunningLogsListTable.js","models/logData.js","components/MainComponent/RunningLogsList/SearchInputComponent/SearchInputComponent.js","components/MainComponent/RunningLogsList/RunningLogsList.js","components/MainComponent/ChartAreaComponent/VegaLiteChart/VegaLiteChart.js","components/MainComponent/ChartAreaComponent/ChartAreaComponent.js","models/logFileParser.js","components/MainComponent/MainComponent.js","App.js","serviceWorker.js","index.js","components/MainComponent/RunningLogsList/RunningLogListItem/RunningLogListItem.module.css","components/MainComponent/RunningLogsList/RunningLogsListTable/RunningLogsListTable.module.css","UI/ModalPopup/ModalPopup.module.css","components/MainComponent/MainComponent.module.css","UI/Button/Button.module.css","components/MainComponent/RunningLogsList/RunningLogsListHeader/RunningLogsListHeader.module.css","components/FileContentPopup/FileContentPopup.module.css","components/MainComponent/RunningLogsList/SearchInputComponent/SearchInputComponent.module.css","components/MainComponent/RunningLogsList/RunningLogsList.module.css","components/MainComponent/ChartAreaComponent/ChartAreaComponent.module.css","components/MainComponent/ChartAreaComponent/VegaLiteChart/VegaLiteChart.module.css"],"names":["button","props","title","onClick","className","classes","Button","icon","size","spin","text","api_uri","fetchKeysList","a","fetch","response","json","keysList","JSON","parse","body","keys","fetchFileContent","key","resp","getPresignedURL","selectedFile","url","name","presignedURL","console","log","message","uploadFileToS3","method","headers","src","file","deleteFilesFromS3","keysToDelete","deletedKeys","stringify","alert","FileUploadButton","uploadFiles","selectedFiles","promises","map","selectedFileNames","Promise","all","respArray","onUploadSucceed","multiple","multipleMaxCount","onSuccess","browseFiles","RunningLogsListHeader","offsetX","offsetY","dragX","dragY","styles","onDeleteButtonPressed","faSyncAlt","loading","onRefreshButtonPressed","Modal","children","mount","document","getElementById","el","createElement","useEffect","appendChild","removeChild","createPortal","ModalPopup","handleKeyDown","ev","code","closePopup","elementDrag","window","event","clientX","clientY","element","target","style","top","offsetTop","left","offsetLeft","closeDragElement","onmouseup","onmousemove","addEventListener","removeEventListener","showPopup","id","BackDrop","onMouseDown","header","FileContentPopup","row_lines","content","split","showFileContentPopup","closeFileContentPopup","line","RunningLogsListItem","useState","setShowFileContentPopup","refElement","useRef","data","selected","scrollIntoView","tableClientRect","current","parentElement","getBoundingClientRect","rowClientReact","bottom","RunningLogListItemClicked","RunningLogListItem","errorTime","RunningLogListItemFailed","checkMarkStyle","marked","RunningLogListItemCheckMarkClicked","RunningLogListItemCheckMarkNotClicked","actionsNum","batch","length","ActNum","layersNum","Set","action","LayerName","stepName","StepName","checklistName","ChecklistName","batchJobsNum","e","preventDefault","stopPropagation","ctrlKey","checkMarkClicked","shiftKey","getSelection","empty","itemShiftClicked","itemClicked","ref","faTrashAlt","runningDate","jobName","RunningLogListItemNumeric","runningTime","RunningLogsListTable","dataLength","logDataArray","next","hasMore","RunningLogsListTableCheckMark","width","index","logItemClicked","logItemShiftClicked","time_diff","start_time","complete_time","Date","isNaN","toISOString","substr","SearchInputComponent","faSearch","type","placeholder","onChange","RunningLogsList","onSearchJobNameChanged","selectedIndex","fetchMoreData","VegaLiteChart","chartData","localData","logData","mergerObj","downloadObj","stats","timestamp","acpTime","find","Stage","Index","StageIndex","Object","Succeed","Name","AnalysisName","Layer","ActParam","BeginNf","EndNf","ContourGroupId","ContourGroupNum","StartDate","StartTime","EndDate","CompleteTime","Time","uploadObj","uploadTime","splitterObj","splitterTime","mergerTime","downloadTime","getChartData","client","spec","subtitle","values","mark","tooltip","encoding","x","field","timeUnit","x2","y","sort","color","autosize","VegaLite","actions","export","source","compiled","editor","downloadFileName","theme","ChartAreaComponent","refContainer","chartWidth","setChartWidth","currentContainerWidth","clientWidth","numCharts","arrayOfTimestamps","arrayOfLines","filter","match","tmpArrayOfLines","splice","timeStamp","utcDate","dateStr","i","timeStampToDate","time","toDateString","push","timestamps","errorTimeString","job_name","job_line","ext_name","slice","indexOf","toLocaleString","job_ended_arr","end_time","d","batchObject","join","object","splitter","s","merger","mergerStartMessage","mergerCompleteMessage","downloadStartMessage","downloadCompleteMessage","errorTimeStr","acp_transformed","Step","Number","acp_started","acp_completed","completeTimeMessage","c","errorMessage","timeStr","splitArray","month","day","year","hour","min","sec","UTC","MainComponent","setLogDataArray","setLoading","searchJobNamePattern","setSearchJobNamePattern","fetchData","localDataArray","resolve","reject","newDataArray","concat","undefined","keysListToFetch","filteredKeysList","filterNewKeysList","Array","allSettled","res","fetchedDataArray","p","status","value","b","some","deleteFile","keyStr","confirm","newLogDataArray","includes","clickedData","clickedIndex","findIndex","forEach","App","fontSize","Boolean","location","hostname","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","module","exports"],"mappings":"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","file":"static/js/main.eca17a6f.chunk.js","sourcesContent":["import React from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport classes from \"./Button.module.css\";\r\n\r\nconst button = (props) => {\r\n    return (\r\n        <button title={props.title} onClick={props.onClick} className={classes.Button}>\r\n            {props.icon ?\r\n            <FontAwesomeIcon icon={props.icon} size=\"x\" spin={props.spin}  /> :\r\n                null}\r\n            {props.text}\r\n        </button>\r\n    );\r\n};\r\n\r\nexport default button;","// let awsRegion = \"eu-central-1\";\r\n// let api_uri = \"https://bah2tkltg6.execute-api.eu-central-1.amazonaws.com/test/list\";\r\nlet api_uri = \"https://vm7sirnd04.execute-api.us-east-1.amazonaws.com/test\";\r\n\r\n// Fetch keys list (filenames) from s3 bucket using given api\r\nexport const fetchKeysList = async() => {\r\n    let response = await fetch(`${api_uri}/list`);\r\n    let json = await response.json();\r\n    let keysList = JSON.parse(json.body).keys;\r\n    return keysList;\r\n}\r\n\r\n// Fetch content of single file from s3 bucket key\r\nexport const fetchFileContent = async (key) => {\r\n    let resp = await fetch(`${api_uri}/list/${key}`);\r\n    let text = await resp.json();\r\n    return text;\r\n}\r\n// Fetch content of files from s3 bucket by given list of keys\r\n// export const fetchFileContentByKeysList = async (keysList) => {\r\n//     let promises = keysList.map (key => fetch(`${api_uri}/list/${key}`))\r\n//     let respArray = await Promise.all(promises)\r\n//     let json_promises = respArray.map(resp => resp.json())\r\n//     let textArray = await Promise.all(json_promises);\r\n//     return textArray;\r\n// }\r\n\r\nexport const getPresignedURL = async (selectedFile) => {\r\n    const url = `${api_uri}/get-presigned-url/${selectedFile.name}`\r\n    let presignedURL = null;\r\n    try {\r\n        let response = await fetch(url);\r\n        let json = await response.json();\r\n        presignedURL = json.url;\r\n    }\r\n    catch (err) {\r\n        console.log(err.message)\r\n    }\r\n    return presignedURL;\r\n};\r\n\r\nexport const uploadFileToS3 = async (selectedFile) => {\r\n    // Step 1 - get pre-signed POST data.\r\n    const presignedURL = await getPresignedURL(selectedFile);\r\n    // if (!presignedURL)  failed to get presigned url - return rejected promise ?\r\n    // Step 2 - upload the file to S3.\r\n    return fetch(presignedURL, {\r\n            method: \"PUT\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n            body: selectedFile.src.file\r\n        })\r\n};\r\n\r\n// export const uploadFileToS3 = async (presignedURL, file) => {\r\n//     let json = null;\r\n//     try {\r\n//         let response = await fetch(presignedURL, {\r\n//             method: \"PUT\",\r\n//             headers: {\r\n//                 \"Content-Type\": \"application/json\"\r\n//             },\r\n//             body: file\r\n//         });\r\n//         json = await response.json();\r\n//     }\r\n//     catch (err) {\r\n//         console.log(err.message)\r\n//     }\r\n//\r\n//     return json;\r\n// };\r\n\r\nexport const deleteFilesFromS3 = async (keysToDelete) => {\r\n    const url = `${api_uri}/delete`;\r\n    let deletedKeys = [];\r\n    try {\r\n        let response = await fetch(url,{\r\n            method:\"DELETE\",\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n                // 'Content-Type': 'application/x-www-form-urlencoded',\r\n            },\r\n            body: JSON.stringify( {keys: keysToDelete})\r\n        });\r\n        let json = await response.json();\r\n        console.log(json.keys);\r\n        deletedKeys = json.keys;\r\n    }\r\n    catch (e) {\r\n        alert(\"error delete files\")\r\n    }\r\n    return deletedKeys;\r\n}\r\n","import React from \"react\";\r\nimport Files from \"react-butterfiles\";\r\n// import readFiles from \"../../models/readFile\";\r\n// import styles from \"./FileUploadButton.module.css\";\r\nimport Button from \"../../UI/Button/Button\"\r\nimport {uploadFileToS3} from \"../../models/aws_api\";\r\n\r\n/**\r\n * Component renders a simple \"Select file...\" button which opens a file browser.\r\n * Once a valid file has been selected, the upload process will start.\r\n * @returns {*}\r\n * @constructor\r\n */\r\nconst FileUploadButton = (props) => {\r\n    const uploadFiles = async (selectedFiles) => {\r\n        let promises = selectedFiles.map( selectedFile => uploadFileToS3(selectedFile) );\r\n        let selectedFileNames = selectedFiles.map( selectedFile => selectedFile.name );\r\n\r\n        try {\r\n            let respArray = await Promise.all(promises);\r\n            // let json_promises = respArray.map(resp => resp.json())\r\n            // json = await Promise.all(json_promises);\r\n            props.onUploadSucceed(selectedFileNames);\r\n            return respArray;\r\n        }\r\n        catch (err) {\r\n            console.log(err);\r\n            return err.message;\r\n        }\r\n    }\r\n\r\n    return  (\r\n        <Files\r\n            multiple={true}\r\n            multipleMaxCount={300}\r\n            onSuccess={selectedFiles => uploadFiles(selectedFiles)}\r\n        >\r\n            {({ browseFiles }) =>\r\n                <Button\r\n                    title=\"Upload log files\"\r\n                    text=\"Upload\"\r\n                    onClick={browseFiles}>\r\n                </Button>}\r\n        </Files>\r\n    );\r\n}\r\n\r\nexport default FileUploadButton;","import React from 'react';\r\nimport Button from '../../../../UI/Button/Button';\r\nimport { faSyncAlt } from '@fortawesome/free-solid-svg-icons'\r\nimport FileUploadButton from \"../../../FileUploadButton/FileUploadButton\";\r\nimport styles from './RunningLogsListHeader.module.css'\r\n\r\nfunction RunningLogsListHeader(props) {\r\n    return (\r\n        <header className={styles.RunningLogsListHeader}>\r\n            <FileUploadButton\r\n                onUploadSucceed={props.onUploadSucceed}\r\n            />\r\n            <Button\r\n                title=\"Delete log files\"\r\n                text=\"Delete\"\r\n                // icon={faSyncAlt}\r\n                // spin={props.loading}\r\n                onClick={props.onDeleteButtonPressed}\r\n            />\r\n            {/*<Button*/}\r\n            {/*    title=\"Compare two logs\"*/}\r\n            {/*    text=\"Compare\"*/}\r\n            {/*    // icon={faSyncAlt}*/}\r\n            {/*    // spin={props.loading}*/}\r\n            {/*    // onClick={props.onDeleteButtonPressed}*/}\r\n            {/*/>*/}\r\n            <Button\r\n                title=\"Reload files\"\r\n                icon={faSyncAlt}\r\n                spin={props.loading}\r\n                onClick={props.onRefreshButtonPressed}\r\n            />\r\n\r\n        </header>\r\n    );\r\n}\r\n\r\nexport default RunningLogsListHeader;\r\n","import React, { useEffect } from \"react\";\r\nimport Modal from \"../Modal\";\r\nimport classes from \"./ModalPopup.module.css\";\r\n\r\nlet offsetX;\r\nlet offsetY;\r\nlet dragX;\r\nlet dragY;\r\n\r\nconst ModalPopup = (props) => {\r\n\r\n    const onBackDropClicked = (ev) => {\r\n        if (ev.target.id === \"backDrop\") {\r\n            props.closePopup();\r\n        }\r\n    };\r\n\r\n    const handleKeyDown = (ev) => {\r\n        if (ev.code === \"Escape\") {\r\n            props.closePopup();\r\n        }\r\n    };\r\n\r\n    const elementDrag = (ev) => {\r\n        ev = ev || window.event;\r\n        // calculate the new cursor position:\r\n        offsetX = dragX - ev.clientX;\r\n        offsetY = dragY - ev.clientY;\r\n        dragX = ev.clientX;\r\n        dragY = ev.clientY;\r\n        // set the element's new position:\r\n        let element = ev.target;\r\n        element.style.top = (element.offsetTop - offsetY) + \"px\";\r\n        element.style.left = (element.offsetLeft - offsetX) + \"px\";\r\n    };\r\n\r\n    const closeDragElement = (ev) => {\r\n        /* stop moving when mouse button is released:*/\r\n        ev.target.onmouseup = null;\r\n        ev.target.onmousemove = null;\r\n    };\r\n\r\n    const dragMouseDown = (ev) => {\r\n        ev = ev || window.event;\r\n        // get the mouse cursor position at startup:\r\n        dragX = ev.clientX;\r\n        dragY = ev.clientY;\r\n        ev.target.onmouseup = closeDragElement;\r\n        // call a function whenever the cursor moves:\r\n        ev.target.onmousemove = elementDrag;\r\n    };\r\n\r\n    useEffect(() => {\r\n        document.addEventListener('keydown', handleKeyDown);\r\n        return () => document.removeEventListener('keydown', handleKeyDown);\r\n    } );\r\n\r\n    return props.showPopup ? (\r\n        <Modal>\r\n            <div\r\n                id=\"backDrop\"\r\n                className={classes.BackDrop}\r\n                onClick={onBackDropClicked}\r\n            >\r\n                <div className={classes.ModalPopup}\r\n                     onMouseDown={dragMouseDown}\r\n                >\r\n                    <header>{props.header}</header>\r\n                    {props.children}\r\n                </div>\r\n            </div>\r\n        </Modal>\r\n    ) : null;\r\n};\r\n\r\nexport default ModalPopup;\r\n","import { useEffect } from \"react\";\r\nimport { createPortal } from \"react-dom\";\r\n\r\nconst Modal = ({children}) => {\r\n    const mount = document.getElementById(\"modal-root\");\r\n    const el = document.createElement(\"div\");\r\n\r\n    useEffect(() => {\r\n        mount.appendChild(el);\r\n        return () => mount.removeChild(el);\r\n    }, [el, mount]);\r\n\r\n    return createPortal(children, el)\r\n};\r\n\r\nexport default Modal;\r\n","/**\r\n * Created by alexanderbol on 13/04/2017.\r\n */\r\n\r\nimport React from 'react';\r\nimport classes from './FileContentPopup.module.css';\r\nimport ModalPopup from \"../../UI/ModalPopup/ModalPopup\";\r\n\r\nconst FileContentPopup = (props) => {\r\n    const row_lines = props.content.split('\\n');\r\n    return (\r\n        <ModalPopup\r\n            showPopup={props.showFileContentPopup}\r\n            closePopup={props.closeFileContentPopup}\r\n            header=\"Log File Content\"\r\n        >\r\n            <div className={classes.FileContentPopup}>\r\n                {\r\n                    row_lines.map( line =>\r\n                        <p>{line}</p>\r\n                    )\r\n                }\r\n            </div>\r\n        </ModalPopup>\r\n    )\r\n};\r\n\r\nexport default FileContentPopup;\r\n","import React, {useRef, useEffect, useState} from 'react';\r\nimport styles from './RunningLogListItem.module.css';\r\nimport FileContentPopup from \"../../../FileContentPopup/FileContentPopup\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {faTrashAlt} from '@fortawesome/free-solid-svg-icons'\r\n\r\nfunction RunningLogsListItem(props) {\r\n    const [showFileContentPopup, setShowFileContentPopup] = useState(false);\r\n    const refElement = useRef();\r\n\r\n    useEffect( () => {\r\n        if (props.data.selected) {\r\n            scrollIntoView();\r\n        }\r\n    })\r\n\r\n    const scrollIntoView = () => {\r\n        const tableBody = refElement.current.parentElement;\r\n        const table = tableBody.parentElement;\r\n        const tableClientRect = table.getBoundingClientRect();\r\n        const rowClientReact = refElement.current.getBoundingClientRect();\r\n        if (rowClientReact.bottom > tableClientRect.bottom) {\r\n            refElement.current.scrollIntoView(false);\r\n        }\r\n        if (rowClientReact.top < tableClientRect.top) {\r\n            refElement.current.scrollIntoView(true);\r\n        }\r\n    }\r\n\r\n    // Callback to display Log File Content Popup\r\n    const showLogFileContentPopup = () => {\r\n        setShowFileContentPopup(true)\r\n    }\r\n\r\n    const closeLogFileContentPopup = () => {\r\n        setShowFileContentPopup(false)\r\n    }\r\n\r\n    const itemClicked = (e) => {\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n\r\n        if (e.ctrlKey) {\r\n            props.checkMarkClicked();\r\n        }\r\n        else if (e.shiftKey) {\r\n            document.getSelection().empty();\r\n            props.itemShiftClicked();\r\n        }\r\n        else {\r\n            props.itemClicked();\r\n        }\r\n    }\r\n\r\n    let style = props.data.selected ? styles.RunningLogListItemClicked : styles.RunningLogListItem;\r\n\r\n    const batchFailed= !!props.data.errorTime;\r\n    style = batchFailed ? `${style} ${styles.RunningLogListItemFailed}` : style;\r\n\r\n    let checkMarkStyle = props.marked ?\r\n        styles.RunningLogListItemCheckMarkClicked : styles.RunningLogListItemCheckMarkNotClicked;\r\n\r\n    const actionsNum = props.data?.batch[props.data.batch.length - 1].ActNum;\r\n    const layersNum = new Set(props.data?.batch.map(action => action.LayerName)).size;\r\n    const stepName = props.data?.batch[0].StepName;\r\n    const checklistName = props.data?.batch[0].ChecklistName;\r\n    const batchJobsNum = props.data?.batch.length;\r\n\r\n    return (\r\n        <>\r\n            <tr className={style} onClick={itemClicked} ref={refElement}>\r\n                <td className={checkMarkStyle}>\r\n                    <FontAwesomeIcon icon={faTrashAlt} />\r\n                </td>\r\n                <td>\r\n                    {props.data.runningDate}\r\n                </td>\r\n                <td>\r\n                    {props.data.jobName}\r\n                </td>\r\n                <td>\r\n                    {stepName}\r\n                </td>\r\n                <td>\r\n                    {checklistName}\r\n                </td>\r\n                <td className={styles.RunningLogListItemNumeric}>\r\n                    {actionsNum}\r\n                </td>\r\n                <td className={styles.RunningLogListItemNumeric}>\r\n                    {layersNum}\r\n                </td>\r\n                <td className={styles.RunningLogListItemNumeric}>\r\n                    {batchJobsNum}\r\n                </td>\r\n                <td>\r\n                    {props.data.runningTime || \"Failed\"}\r\n                </td>\r\n                <td>\r\n                    <div onClick={showLogFileContentPopup} >\r\n                        {props.data.key}\r\n                    </div>\r\n                </td>\r\n            </tr>\r\n\r\n            {showFileContentPopup ?\r\n                <FileContentPopup\r\n                    showFileContentPopup={showFileContentPopup}\r\n                    closeFileContentPopup={closeLogFileContentPopup}\r\n                    content={props.data.text}\r\n                /> : null }\r\n\r\n        </>\r\n    );\r\n}\r\n\r\nexport default RunningLogsListItem;\r\n","import React, {useEffect} from 'react';\r\nimport InfiniteScroll from 'react-infinite-scroll-component';\r\nimport styles from './RunningLogsListTable.module.css';\r\nimport RunningLogsListItem from \"../RunningLogListItem/RunningLogListItem\";\r\nimport {faTrashAlt} from '@fortawesome/free-solid-svg-icons'\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\n\r\nfunction RunningLogsListTable(props) {\r\n\r\n    // useEffect( () => {\r\n    //     const handleKeyDown = (e) => {\r\n    //         switch (e.code) {\r\n    //             case \"ArrowDown\":\r\n    //                 e.stopPropagation();\r\n    //                 e.preventDefault();\r\n    //                 if (props.selectedIndex < props.logDataArray.length-1) {\r\n    //                     props.logItemClicked(props.selectedIndex+1);\r\n    //                 }\r\n    //                 break;\r\n    //             case \"ArrowUp\":\r\n    //                 e.stopPropagation();\r\n    //                 e.preventDefault();\r\n    //                 if (props.selectedIndex > 0) {\r\n    //                     props.logItemClicked(props.selectedIndex-1);\r\n    //                 }\r\n    //                 break;\r\n    //             default:\r\n    //                 break;\r\n    //         }\r\n    //     }\r\n    //\r\n    //     document.addEventListener('keydown', handleKeyDown);\r\n    //\r\n    //     return () => {\r\n    //         document.removeEventListener('keydown', handleKeyDown);\r\n    //     };\r\n    // })\r\n\r\n    const fetchMoreData = () => {\r\n        // alert(\"Fetch more data\")\r\n        // props.fetchMoreData();\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <InfiniteScroll\r\n                dataLength={props.logDataArray?.length}\r\n                next={fetchMoreData}\r\n                hasMore={true}\r\n            >\r\n\r\n                <table className={styles.RunningLogsListTable}>\r\n                    <thead>\r\n                    <tr>\r\n                        <th className={styles.RunningLogsListTableCheckMark} style={{width: \"3%\"}}>\r\n                            <FontAwesomeIcon icon={faTrashAlt} />\r\n                        </th>\r\n                        <th style={{width:\"15%\"}}>Running date</th>\r\n                        <th style={{width:\"25%\"}}>Job Name</th>\r\n                        <th style={{width:\"3%\"}}>Step</th>\r\n                        <th style={{width:\"15%\"}}>Checklist</th>\r\n                        <th style={{width:\"5%\"}}># Actions</th>\r\n                        <th style={{width:\"5%\"}}># Layers</th>\r\n                        <th style={{width:\"5%\"}}># ACPs</th>\r\n                        <th style={{width:\"4%\"}}>Running Time</th>\r\n                        <th style={{width:\"10%\"}}>Log File Name</th>\r\n                    </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {props.logDataArray?.map( (data, index) =>\r\n                            <RunningLogsListItem key={index}\r\n                                                 data={data}\r\n                                                 // selected={props.selectedIndex===index}\r\n                                                 marked={data.marked}\r\n                                                 itemClicked={() => props.logItemClicked(data)}\r\n                                                 itemShiftClicked = {() => props.logItemShiftClicked(data)}\r\n                                                 checkMarkClicked = {() => props.checkMarkClicked(data)}\r\n                            />\r\n                        )}\r\n                    </tbody>\r\n                </table>\r\n            </InfiniteScroll>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default RunningLogsListTable;\r\n","export function getChartData(data) {\r\n    let stats = data.batch.map(action => {\r\n        let timestamp = data.acpTime.find(\r\n            a => (a.Stage === action.Stage || a.Stage === \"\") &&\r\n                a.Index === action.StageIndex\r\n        );\r\n        return {\r\n            Object: timestamp.Succeed ? \"Acp\" : \"Acp Failed\",\r\n            Stage: action.Stage,\r\n            Index: action.Stage + '_' + action.StageIndex,\r\n            ActNum: action.ActNum,\r\n            Name: action.AnalysisName,\r\n            Layer: action.LayerName,\r\n            ActParam: action.ActParam,\r\n            BeginNf: action.BeginNf,\r\n            EndNf: action.EndNf,\r\n            ContourGroupId: action.ContourGroupId,\r\n            ContourGroupNum: action.ContourGroupNum,\r\n            StartDate: timestamp ? timestamp.StartTime : \"\",\r\n            EndDate: timestamp ? timestamp.CompleteTime : \"\",\r\n            Time: time_diff(timestamp.StartTime, timestamp.CompleteTime)\r\n        };\r\n    });\r\n\r\n    let uploadObj = {\r\n        Object: \"Upload\",\r\n        Name: \"Upload\",\r\n        Index: -1,\r\n        StartDate: data.uploadTime.StartTime,\r\n        EndDate: data.uploadTime.CompleteTime,\r\n        Time: time_diff(data.uploadTime.StartTime, data.uploadTime.CompleteTime)\r\n    };\r\n\r\n    let splitterObj = {\r\n        Object: \"Splitter\",\r\n        Name: \"Splitter\",\r\n        Index: 0,\r\n        StartDate: data.splitterTime.StartTime,\r\n        EndDate: data.splitterTime.CompleteTime,\r\n        Time: time_diff(data.splitterTime.StartTime, data.splitterTime.CompleteTime)\r\n    };\r\n\r\n    let mergerObj;\r\n    if (data.mergerTime.StartTime && data.mergerTime.CompleteTime) {\r\n        mergerObj = {\r\n            Object: \"Merger\",\r\n            Name: \"Merger\",\r\n            Index: stats.length + 1,\r\n            StartDate: data.mergerTime.StartTime,\r\n            EndDate: data.mergerTime.CompleteTime,\r\n            Time: time_diff(data.mergerTime.StartTime, data.mergerTime.CompleteTime)\r\n        };\r\n    }\r\n\r\n    let downloadObj;\r\n    if (data.downloadTime.StartTime && data.downloadTime.CompleteTime) {\r\n        downloadObj = {\r\n            Object: \"Download\",\r\n            Name: \"Download\",\r\n            Index: stats.length + 2,\r\n            StartDate: data.downloadTime.StartTime,\r\n            EndDate: data.downloadTime.CompleteTime,\r\n            Time: time_diff(data.downloadTime.StartTime, data.downloadTime.CompleteTime)\r\n        };\r\n    }\r\n\r\n    stats = [uploadObj, splitterObj, ...stats];\r\n    if (mergerObj) stats = [...stats, mergerObj];\r\n    if (downloadObj) stats = [...stats, downloadObj];\r\n\r\n    return stats;\r\n}\r\n\r\n// export function getListData(localData) {\r\n//     const actionsNum = localData?.batch[localData.batch.length - 1].ActNum;\r\n//     const layersNum = new Set(localData?.batch.map(action => action.LayerName)).size;\r\n//     return {\r\n//         runningDate: localData?.runningDate,\r\n//         jobName: localData?.jobName,\r\n//         step: localData?.batch[0].StepName,\r\n//         checklist: localData?.batch[0].ChecklistName,\r\n//         actionsNum: actionsNum,\r\n//         layersNum: layersNum,\r\n//         runningTime: localData?.runningTime,\r\n//         batchJobsNum: localData?.batch.length,\r\n//         key: localData?.key,\r\n//         errorTime: localData?.errorTime,\r\n//         text: localData?.text,\r\n//         marked: localData?.marked,\r\n//         selected: localData?.selected\r\n//     }\r\n// }\r\n\r\n// function time_diff(start_time, complete_time) {\r\n//     let start = start_time.split(':').map(t => Number(t));\r\n//     let start_sec = start[0] * 3600 + start[1] * 60 + start[2];\r\n//     let complete = complete_time.split(':').map(t => Number(t));\r\n//     let complete_sec = complete[0] * 3600 + complete[1] * 60 + complete[2];\r\n//     let diff_sec = complete_sec - start_sec;\r\n//     return diff_sec;\r\n// }\r\n\r\nfunction time_diff(start_time, complete_time) {\r\n    if (start_time instanceof Date && !isNaN(start_time) &&\r\n    complete_time instanceof Date && !isNaN(complete_time)) {\r\n     return msecToHHMMSS(complete_time - start_time);\r\n    }\r\n    else {\r\n        return 0;\r\n    }\r\n}\r\n\r\nfunction msecToHHMMSS(time) {\r\n    return new Date(time).toISOString().substr(11, 8);\r\n}\r\n","import React from \"react\";\r\nimport { faSearch } from '@fortawesome/free-solid-svg-icons'\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport styles from \"./SearchInputComponent.module.css\";\r\n\r\nconst SearchInputComponent = (props) => {\r\n    return (\r\n        <div className={styles.SearchInputComponent}>\r\n            <FontAwesomeIcon icon={faSearch} />\r\n            <input type=\"text\" name=\"searchJobName\" placeholder=\"job name\" onChange={props.onChange} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchInputComponent;","import React from 'react';\r\nimport RunningLogsListHeader from \"./RunningLogsListHeader/RunningLogsListHeader\";\r\nimport RunningLogsListTable from \"./RunningLogsListTable/RunningLogsListTable\";\r\nimport {getListData} from \"../../../models/logData\";\r\nimport SearchInputComponent from \"./SearchInputComponent/SearchInputComponent\";\r\nimport styles from './RunningLogsList.module.css';\r\n\r\nfunction RunningLogsList(props) {\r\n    return (\r\n        <div className={styles.RunningLogsList}>\r\n            <RunningLogsListHeader\r\n                loading={props.loading}\r\n                onUploadSucceed={props.onUploadSucceed}\r\n                onDeleteButtonPressed={props.onDeleteButtonPressed}\r\n                onRefreshButtonPressed={props.onRefreshButtonPressed}\r\n            />\r\n\r\n            <SearchInputComponent\r\n                onChange={props.onSearchJobNameChanged}\r\n            />\r\n\r\n            <RunningLogsListTable\r\n                logDataArray={props.logDataArray}\r\n                selectedIndex={props.selectedIndex}\r\n                logItemClicked={props.logItemClicked}\r\n                logItemShiftClicked={props.logItemShiftClicked}\r\n                checkMarkClicked={props.checkMarkClicked}\r\n                fetchMoreData={props.onRefreshButtonPressed}\r\n            />\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default RunningLogsList;\r\n","import React from 'react';\r\nimport { VegaLite } from 'react-vega'\r\nimport styles from './VegaLiteChart.module.css';\r\nimport {getChartData, getListData} from \"../../../../models/logData\";\r\n\r\nfunction VegaLiteChart(props) {\r\n    // Setup data before rendering\r\n    let chartData = null;\r\n    let runData = null;\r\n\r\n    let localData = props.logData;\r\n    try {\r\n        chartData = getChartData(localData);\r\n    } catch (e) {\r\n        chartData = null;\r\n    }\r\n    // runData = getListData(localData);\r\n\r\n    const client = localData.key.split('-')[0] || \"unknown\";\r\n    const spec = {\r\n        \"$schema\": \"https://vega.github.io/schema/vega-lite/v4.json\",\r\n        title: {\r\n            text: localData?.jobName,\r\n            subtitle: `Client: ${client} Running time: ${localData?.runningTime}`\r\n        },\r\n        data: { values: chartData },\r\n        mark: { type: \"bar\", tooltip: [] },\r\n        encoding: {\r\n            x: {\r\n                type: \"temporal\",\r\n                field: \"StartDate\",\r\n                timeUnit: \"hoursminutesseconds\"\r\n            },\r\n            x2: {\r\n                type: \"temporal\",\r\n                field: \"EndDate\",\r\n                timeUnit: \"hoursminutesseconds\"\r\n            },\r\n            y: {\r\n                type: \"nominal\",\r\n                field: \"Index\",\r\n                sort: null\r\n            },\r\n            color: { field: \"Object\" }\r\n        },\r\n        // resize: true,\r\n        width: props.width,\r\n        // height: 800,\r\n        autosize: \"fit\",\r\n    }\r\n\r\n    return (\r\n        <div className={styles.VegaLiteChart}>\r\n            {\r\n                chartData && localData.runningTime ?\r\n                    <VegaLite\r\n                        spec={spec}\r\n                        data={chartData}\r\n                        actions={{\r\n                            export: true,\r\n                            source: false,\r\n                            compiled: false,\r\n                            editor: false\r\n                        }}\r\n                        downloadFileName={localData?.jobName}\r\n                        theme=\"urbaninstitute\"\r\n                    /> : null\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default VegaLiteChart;\r\n","import React, {useEffect, useRef, useState} from \"react\";\r\nimport styles from \"./ChartAreaComponent.module.css\";\r\nimport VegaLiteChart from \"./VegaLiteChart/VegaLiteChart\";\r\n\r\nconst ChartAreaComponent = (props) => {\r\n    const refContainer = useRef(null);\r\n    const [chartWidth, setChartWidth] = useState(800);\r\n\r\n    useEffect( () => {\r\n        if (refContainer.current) {\r\n            const currentContainerWidth = refContainer.current.clientWidth;\r\n            const numCharts = props.logDataArray.length;\r\n            const currentChartWidth = numCharts === 1 ? 800 : 0.8 * currentContainerWidth / 2;\r\n            setChartWidth(currentChartWidth);\r\n        }\r\n    },[props.logDataArray.length])\r\n\r\n    return props.logDataArray.length > 0 ? (\r\n        <div className={styles.ChartAreaComponent}  ref={refContainer}>\r\n            {\r\n                props.logDataArray.map( (data, index) => (\r\n                    <VegaLiteChart\r\n                        key={index}\r\n                        logData={data}\r\n                        width={chartWidth}\r\n                    />\r\n                ))\r\n            }\r\n        </div>\r\n    ) : null;\r\n}\r\n\r\nexport default ChartAreaComponent","export function parse(text) {\r\n    const row_lines = text.split('\\n');\r\n    const arrayOfTimestamps = timestamps(row_lines);\r\n    const errorTimeString = errorTime(row_lines, arrayOfTimestamps);\r\n    return {\r\n        runningDate: runningDate(arrayOfTimestamps),\r\n        runningTime: runningTime(arrayOfTimestamps, errorTimeString),\r\n        jobName: jobName(text),\r\n        batch: batch(arrayOfTimestamps),\r\n        uploadTime: uploadTime(arrayOfTimestamps),\r\n        splitterTime: splitterTime(arrayOfTimestamps),\r\n        acpTime: acpTime(row_lines, arrayOfTimestamps),\r\n        mergerTime: mergerTime(arrayOfTimestamps),\r\n        downloadTime: downloadTime(arrayOfTimestamps),\r\n        errorTime: errorTimeString\r\n    };\r\n}\r\n\r\nfunction jobName(text) {\r\n    const row_lines = text.split('\\n');\r\n    const job_line = row_lines.filter(line => line.match(\"Job:\"))[0];\r\n    let job_name;\r\n\r\n    if (job_line) {\r\n        job_name = job_line.split(' ')[1];\r\n    }\r\n    else {\r\n        let ext_name = row_lines\r\n            .filter((line) => line.match(\"JobInfo:\"))[0]\r\n            .split(\" \")[1]\r\n            .split(\"=\")[1];\r\n        job_name = ext_name.slice(6, ext_name.indexOf(\".acp_ex\"));\r\n    }\r\n    return job_name;\r\n}\r\n\r\nfunction runningDate(arrayOfTimestamps) {\r\n    let job_started = arrayOfTimestamps.filter(\r\n        line => line.message === \"Ready for commands\"\r\n    )[0];\r\n    return job_started.utcDate.toLocaleString();\r\n}\r\n\r\n// function runningDate(row_lines) {\r\n//     let arrayOfLines = row_lines.filter(line => line.match(\"time\"));\r\n//     let splitArray = arrayOfLines[0].split(' ');\r\n//     let [day, month, year] = splitArray[1].split(':')[1].split('/');\r\n//     if (day.length > 2) day = day.substr(1);\r\n//     let [hour, min] = splitArray[2].split(':');\r\n//     if (hour.trim().length > 2) hour = hour.substr(1);\r\n//     if (min.trim().length > 2) min = min.substr(1);\r\n//     return new Date(Date.UTC(year, month - 1, day, hour, min)).toUTCString();\r\n// }\r\n\r\nfunction runningTime(arrayOfTimestamps, errorTime) {\r\n    let job_started = arrayOfTimestamps.filter(\r\n        line => line.message === \"Ready for commands\"\r\n    )[0];\r\n    let start_time = job_started.utcDate;\r\n    let job_ended_arr = arrayOfTimestamps.filter(\r\n        line => line.message === \"Job is ready\"\r\n    );\r\n    let end_time = job_ended_arr.length > 0 ? job_ended_arr[0].utcDate : errorTime;\r\n\r\n    return end_time ? time_diff(start_time, end_time) : \"\";\r\n}\r\n\r\nfunction batch(arrayOfTimestamps) {\r\n    let batchObjectList = arrayOfTimestamps.filter(d => d.type === \"Batch\");\r\n    let messageList = batchObjectList.map(batchObject =>\r\n        batchObject.message.slice(2)\r\n    );\r\n    let message = messageList.join(\"\");\r\n    return JSON.parse(message);\r\n}\r\n\r\nfunction uploadTime(arrayOfTimestamps) {\r\n    let uploadTime = {\r\n        StartTime: arrayOfTimestamps.find(\r\n            d => d.object === \"WebClient\" && d.message === \"Job was registered\"\r\n        ).utcDate,\r\n        CompleteTime: arrayOfTimestamps.find(\r\n            d => d.object === \"WebClient\" && d.message === \"After send\"\r\n        ).utcDate\r\n    };\r\n    return uploadTime;\r\n}\r\n\r\nfunction splitterTime(arrayOfTimestamps) {\r\n    let splitter = arrayOfTimestamps.filter(d => d.object === \"Splitter\")\r\n    let s = {\r\n        StartTime: splitter.find(s => s.message === \"Splitter started\").utcDate,\r\n        CompleteTime: splitter.find(s => s.message === \"End of Split\").utcDate\r\n    };\r\n    return s;\r\n}\r\n\r\nfunction mergerTime(arrayOfTimestamps) {\r\n    let merger = arrayOfTimestamps.filter(d => d.object === \"Merger\");\r\n    let mergerStartMessage = merger.find(s => s.message === \"Preparing job for merge\");\r\n    let mergerCompleteMessage = merger.find(s => s.message === \"Moving Job to S3\");\r\n\r\n    let s = {\r\n        StartTime: mergerStartMessage ? mergerStartMessage.utcDate : null,\r\n        CompleteTime: mergerCompleteMessage ? mergerCompleteMessage.utcDate : null\r\n    };\r\n    return s;\r\n}\r\n\r\nfunction downloadTime(arrayOfTimestamps) {\r\n    let downloadStartMessage = arrayOfTimestamps.find(d => d.object === \"WebClient\" && d.message === \"Download Data\");\r\n    let downloadCompleteMessage = arrayOfTimestamps.find(d => d.object === \"WebClient\" && d.message === \"Job is ready\");\r\n    let downloadTime = {\r\n        StartTime: downloadStartMessage ? downloadStartMessage.utcDate : null,\r\n        CompleteTime: downloadCompleteMessage ? downloadCompleteMessage.utcDate : null\r\n    };\r\n    return downloadTime;\r\n}\r\n\r\nfunction acpTime(row_lines, arrayOfTimestamps) {\r\n    let errorTimeStr = errorTime(row_lines, arrayOfTimestamps);\r\n    let acp = arrayOfTimestamps.filter(d => (d.type === \"Progress\" || d.type === \"Info\") && d.object === \"ACP\");\r\n    let acp_transformed = acp.map(action => {\r\n        let message = action.message.split(' ');\r\n        return {\r\n            Time: action.utcDate,\r\n            Step: message[0],\r\n            Stage: message[1].split(':')[1],\r\n            Index: Number(message[2].split(':')[1]) + 1\r\n        };\r\n    });\r\n    let acp_started = acp_transformed\r\n        .filter(action => action.Step === \"Starting\")\r\n        .map(action => {\r\n            return {\r\n                Stage: action.Stage,\r\n                Index: action.Index,\r\n                StartTime: action.Time\r\n            };\r\n        });\r\n    let acp_completed = acp_transformed\r\n        .filter(action => action.Step === \"Completing\")\r\n        .map(action => {\r\n            return {\r\n                Stage: action.Stage,\r\n                Index: action.Index,\r\n                CompleteTime: action.Time\r\n            };\r\n        });\r\n    let acp_timestamp = acp_started.map(action => {\r\n        let completeTimeMessage = acp_completed.find(\r\n            c => c.Stage === action.Stage && c.Index === action.Index\r\n        );\r\n\r\n        return {\r\n            Stage: action.Stage,\r\n            Index: action.Index,\r\n            StartTime: action.StartTime,\r\n            CompleteTime: completeTimeMessage ? completeTimeMessage.CompleteTime : errorTimeStr,\r\n            Succeed: !!completeTimeMessage\r\n        };\r\n    });\r\n    return acp_timestamp;\r\n}\r\n\r\nfunction errorTime(row_lines, arrayOfTimestamps) {\r\n    let errorMessage = arrayOfTimestamps.find(\r\n        d => d.object === \"WebClient\" && d.type === \"ERROR\"\r\n    );\r\n\r\n    let errorTime = null;\r\n    if (errorMessage) {\r\n        errorTime = errorMessage.utcDate\r\n    }\r\n    // else {\r\n    //     let ping_lines = row_lines\r\n    //         .filter(line => line.match(\"I am alive\"));\r\n    //     errorTime = ping_lines.length > 0 ? JSON.parse(ping_lines[ping_lines.length - 1]).Time : null;\r\n    // }\r\n    return errorTime;\r\n}\r\n\r\nfunction timestamps(row_lines) {\r\n    let arrayOfLines = row_lines.filter(line => line.match(\"time\"));\r\n    let tmpArrayOfLines = [...arrayOfLines];\r\n    tmpArrayOfLines.splice(0, 1);\r\n    let arrayOfTimestamps = [];\r\n    let timeStamp;\r\n    let utcDate;\r\n    let dateStr = \"\";\r\n    for (let i = 0; i < tmpArrayOfLines.length; i++) {\r\n        try {\r\n            timeStamp = JSON.parse(tmpArrayOfLines[i]);\r\n            if (timeStamp.message === \"Submit Splitter\") continue; // bad format\r\n            utcDate = timeStampToDate(timeStamp.time, dateStr);\r\n            dateStr = utcDate.toDateString();\r\n            arrayOfTimestamps.push({ utcDate, ...timeStamp });\r\n        } catch (e) {\r\n            return [i, tmpArrayOfLines[i]];\r\n        }\r\n    }\r\n    return arrayOfTimestamps;\r\n}\r\n\r\nfunction time_diff(start_time, complete_time) {\r\n    if (start_time instanceof Date && !isNaN(start_time) &&\r\n        complete_time instanceof Date && !isNaN(complete_time)) {\r\n        return msecToHHMMSS(complete_time - start_time);\r\n    }\r\n    else {\r\n        return 0;\r\n    }\r\n}\r\n\r\nfunction msecToHHMMSS(time) {\r\n    return new Date(time).toISOString().substr(11, 8);\r\n}\r\n\r\nfunction timeStampToDate(timeStr, dateStr) {\r\n    let splitArray = timeStr.split(', ');\r\n    if (splitArray.length === 1) {   // bad format only time no date\r\n        return new Date(dateStr + ' ' + timeStr)\r\n    }\r\n    else {\r\n        let [month, day, year] = splitArray[0].split('/');\r\n        let [hour, min, sec] = splitArray[1].split(':');\r\n        return new Date(Date.UTC(year, month - 1, day, hour, min, sec)); // .toUTCString();\r\n    }\r\n}\r\n","import React, {useEffect, useState} from 'react';\r\nimport styles from './MainComponent.module.css';\r\nimport RunningLogsList from \"./RunningLogsList/RunningLogsList\";\r\nimport ChartAreaComponent from \"./ChartAreaComponent/ChartAreaComponent\";\r\nimport {parse} from \"../../models/logFileParser\";\r\nimport {/*fetchFileContentByKeysList,*/ fetchFileContent, fetchKeysList, deleteFilesFromS3} from \"../../models/aws_api\";\r\n\r\nfunction MainComponent(props) {\r\n    const [logDataArray, setLogDataArray] = useState([]);\r\n    const [loading, setLoading] = useState(false);\r\n    const [searchJobNamePattern, setSearchJobNamePattern] = useState(\"\");\r\n\r\n    // const numInChunk = 8;\r\n\r\n    // Fetch content of files from s3 bucket by given list of keys\r\n    // const fetchDataByKeysList = async (keysList) => {\r\n    //     let textArray = await fetchFileContentByKeysList(keysList);\r\n    //     let dataArray = textArray.map( e => parse(e.text));\r\n    //     dataArray.forEach( (data,i) => data.key = keysList[i] )\r\n    //     dataArray.forEach( (data,i) => data.text = textArray[i].text )\r\n    //     return dataArray;\r\n    // }\r\n\r\n    // Fetch content of one file from s3 bucket by given key\r\n    const fetchData = async (localDataArray, key, index) => {\r\n        return new Promise( async (resolve, reject) => {\r\n            try {\r\n                let text = await fetchFileContent(key);\r\n                let data = parse(text.text);\r\n                data.key = key;\r\n                data.text = text.text;\r\n                data.marked = false;\r\n                data.selected = false;\r\n\r\n                localDataArray[index] = data;\r\n                let newDataArray = logDataArray.concat(localDataArray);\r\n                newDataArray.filter (data => data !== undefined)\r\n                setLogDataArray(newDataArray);             // trigger rendering\r\n                resolve(data);\r\n            }\r\n            catch (err) {\r\n                reject(err.message)\r\n            }\r\n        })\r\n    }\r\n\r\n    const fetchMoreData = async (keysListToFetch) => {\r\n        setLoading(true);\r\n\r\n        let keysList = keysListToFetch || await fetchKeysList();\r\n        let filteredKeysList = filterNewKeysList(keysList);\r\n        // let chunkOfKeysList = filteredKeysList.slice(0,numInChunk);\r\n        if (filteredKeysList.length > 0) {\r\n            let localDataArray = new Array(filteredKeysList.length);\r\n            let promises = filteredKeysList.map( (key, index) => fetchData(localDataArray, key, index));\r\n            try {\r\n                let res = await Promise.allSettled(promises);\r\n                let fetchedDataArray = res.filter(p => p.status === \"fulfilled\").map(p => p.value);\r\n                let newDataArray = logDataArray.concat(fetchedDataArray);\r\n                newDataArray.sort(function(a,b){\r\n                    return new Date(b.runningDate) - new Date(a.runningDate);\r\n                });\r\n                if (!newDataArray.some(data => data.marked)) {\r\n                    newDataArray[0].marked = true;\r\n                }\r\n                if (!newDataArray.some(data => data.selected)) {\r\n                    newDataArray[0].selected = true;\r\n                }\r\n                setLogDataArray(newDataArray);             // trigger rendering\r\n            } catch (err) {\r\n                console.log(err.message)\r\n            }\r\n        }\r\n\r\n        setLoading(false);\r\n    }\r\n\r\n    // Filter keysList: keep only new keys that do not exist in logDataArray\r\n    const filterNewKeysList = (keysList) => {\r\n        let filteredKeyList = keysList\r\n            .filter( key => !logDataArray.some( data => data.key === key))\r\n        return filteredKeyList;\r\n    }\r\n\r\n    const syncData = () => {\r\n        fetchMoreData()\r\n    }\r\n\r\n    const fetchUploaded = (keysList) => {\r\n        fetchMoreData(keysList)\r\n    }\r\n\r\n    // Callback to set new chart data and update selected index\r\n    const logItemClicked = (clickedData) => {\r\n        if (!clickedData) return;\r\n        let newLogDataArray = logDataArray.slice();\r\n        let clickedIndex = newLogDataArray.findIndex( data => data.key === clickedData.key);\r\n        newLogDataArray.forEach( (data, i) => {\r\n            data.marked = (i === clickedIndex);\r\n            data.selected = (i === clickedIndex);\r\n        });\r\n        setLogDataArray(newLogDataArray);             // trigger rendering\r\n    }\r\n\r\n    const logItemShiftClicked = (clickedData) => {\r\n        if (!clickedData) return;\r\n        let newLogDataArray = logDataArray.slice();\r\n        let clickedIndex = newLogDataArray.findIndex( data => data.key === clickedData.key);\r\n        newLogDataArray.forEach( (data, i) =>\r\n            i === clickedIndex ? data.selected = !data.selected : data.selected);\r\n        setLogDataArray(newLogDataArray);             // trigger rendering\r\n    }\r\n\r\n    const checkMarkClicked = (clickedData) => {\r\n        if (!clickedData) return;\r\n        let newLogDataArray = logDataArray.slice();\r\n        let clickedIndex = newLogDataArray.findIndex( data => data.key === clickedData.key);\r\n        newLogDataArray.forEach( (data, i) =>\r\n            i === clickedIndex ? data.marked = !data.marked : data.marked);\r\n        setLogDataArray(newLogDataArray);             // trigger rendering\r\n    }\r\n\r\n    const deleteFile = async () => {\r\n        let keysToDelete = logDataArray\r\n            .filter( data => data.marked )\r\n            .map( data => data.key);\r\n        if (keysToDelete.length === 0) return;\r\n        let keyStr = keysToDelete.join(\"\\n\");\r\n        let message = keysToDelete.length === 1 ?\r\n            `1 file will be deleted:\\n ${keyStr}` :\r\n            `${keysToDelete.length} files will be deleted:\\n ${keyStr}`;\r\n        let ok = window.confirm(message);\r\n        if (ok) {\r\n            let deletedKeys = await deleteFilesFromS3(keysToDelete);\r\n            // let firstDeletedInd = logDataArray.findIndex(data => deletedKeys.includes(data.key));\r\n            // let newIndex = Math.max(0, firstDeletedInd - 1);\r\n            let newLogDataArray = logDataArray.filter(data => !deletedKeys.includes(data.key));\r\n            setLogDataArray(newLogDataArray);             // trigger rendering\r\n        }\r\n    }\r\n\r\n    const searchJobNameHandler = (e) => {\r\n        setSearchJobNamePattern(e.target.value);\r\n    }\r\n\r\n    // Effect to load all data from AWS s3 bucket after component mounted\r\n    useEffect( () => {\r\n        fetchMoreData();\r\n    },[]);\r\n\r\n    return (\r\n        <main className={styles.MainComponent}>\r\n            <RunningLogsList\r\n                logDataArray={logDataArray\r\n                    .filter(data => data.jobName.includes(searchJobNamePattern))}\r\n                loading={loading}\r\n                logItemClicked={logItemClicked}\r\n                logItemShiftClicked={logItemShiftClicked}\r\n                checkMarkClicked={checkMarkClicked}\r\n                onUploadSucceed={fetchUploaded}\r\n                onDeleteButtonPressed={deleteFile}\r\n                onRefreshButtonPressed={syncData}\r\n                onSearchJobNameChanged={searchJobNameHandler}\r\n            />\r\n            <ChartAreaComponent\r\n                logDataArray={logDataArray\r\n                    .filter(data => data.jobName.includes(searchJobNamePattern))\r\n                    .filter( data => data.selected )}\r\n            />\r\n        </main>\r\n    );\r\n}\r\n\r\nexport default MainComponent;\r\n","import React from 'react';\r\nimport MainComponent from \"./components/MainComponent/MainComponent\";\r\nimport './App.css';\r\n\r\nfunction App() {\r\n    return (\r\n        <div className=\"App\">\r\n            <div className=\"content\">\r\n                <h2>Cloud Log Viewer</h2>\r\n                <hr />\r\n                <MainComponent />\r\n                <hr />\r\n            </div>\r\n            <footer className=\"footer\">\r\n                <p style={{fontSize:\"12px\"}}>Alex Bol 2020</p>\r\n            </footer>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"RunningLogListItem\":\"RunningLogListItem_RunningLogListItem__c20eg\",\"fadeIn\":\"RunningLogListItem_fadeIn__3Xdsl\",\"RunningLogListItemClicked\":\"RunningLogListItem_RunningLogListItemClicked__F14wM\",\"RunningLogListItemFailed\":\"RunningLogListItem_RunningLogListItemFailed__aPttc\",\"RunningLogListItemNumeric\":\"RunningLogListItem_RunningLogListItemNumeric__d6hF-\",\"RunningLogListItemClickable\":\"RunningLogListItem_RunningLogListItemClickable__eJyzg\",\"RunningLogListItemCheckMarkClicked\":\"RunningLogListItem_RunningLogListItemCheckMarkClicked__35_CH\",\"RunningLogListItemCheckMarkNotClicked\":\"RunningLogListItem_RunningLogListItemCheckMarkNotClicked__3AAMV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"RunningLogsListTable\":\"RunningLogsListTable_RunningLogsListTable__1x-zQ\",\"fadeIn\":\"RunningLogsListTable_fadeIn__1iid4\",\"RunningLogsListTableCheckMark\":\"RunningLogsListTable_RunningLogsListTableCheckMark__39gPe\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"BackDrop\":\"ModalPopup_BackDrop__1ffK_\",\"ModalPopup\":\"ModalPopup_ModalPopup__24S5c\",\"fadeIn\":\"ModalPopup_fadeIn__2pVbP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"MainComponent\":\"MainComponent_MainComponent__2ERcq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Button\":\"Button_Button__25zle\",\"Icon\":\"Button_Icon__1AmkX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"RunningLogsListHeader\":\"RunningLogsListHeader_RunningLogsListHeader__2Htxe\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"FileContentPopup\":\"FileContentPopup_FileContentPopup__1P5PX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"SearchInputComponent\":\"SearchInputComponent_SearchInputComponent__1l3iL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"RunningLogsList\":\"RunningLogsList_RunningLogsList__2gkQ5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ChartAreaComponent\":\"ChartAreaComponent_ChartAreaComponent__3bt9D\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"VegaLiteChart\":\"VegaLiteChart_VegaLiteChart__2F2Yk\"};"],"sourceRoot":""}