{"version":3,"sources":["UI/Button/Button.js","models/aws_api.js","components/FileUploadButton/FileUploadButton.js","components/RunningLogsList/RunningLogsListHeader/RunningLogsListHeader.js","UI/ModalPopup/ModalPopup.js","UI/Modal.js","components/FileContentPopup/FileContentPopup.js","components/RunningLogsList/RunningLogListItem/RunningLogListItem.js","components/RunningLogsList/RunningLogsListTable/RunningLogsListTable.js","models/logData.js","components/RunningLogsList/RunningLogsList.js","components/VegaLiteChart/VegaLiteChart.js","models/logFileParser.js","components/MainComponent/MainComponent.js","App.js","serviceWorker.js","index.js","components/RunningLogsList/RunningLogListItem/RunningLogListItem.module.css","UI/ModalPopup/ModalPopup.module.css","components/MainComponent/MainComponent.module.css","components/RunningLogsList/RunningLogsList.module.css","UI/Button/Button.module.css","components/RunningLogsList/RunningLogsListHeader/RunningLogsListHeader.module.css","components/RunningLogsList/RunningLogsListTable/RunningLogsListTable.module.css","components/FileContentPopup/FileContentPopup.module.css","components/VegaLiteChart/VegaLiteChart.module.css"],"names":["button","props","title","onClick","className","classes","Button","icon","size","spin","text","api_uri","fetchKeysList","a","fetch","response","json","keysList","JSON","parse","body","keys","fetchFileContentByKeysList","promises","map","key","Promise","all","respArray","json_promises","resp","textArray","getPresignedURL","selectedFile","url","name","presignedURL","console","log","message","uploadFileToS3","method","headers","src","file","deleteFilesFromS3","keysToDelete","deletedKeys","stringify","alert","FileUploadButton","uploadFiles","selectedFiles","selectedFileNames","onUploadSucceed","multiple","multipleMaxCount","onSuccess","browseFiles","RunningLogsListHeader","offsetX","offsetY","dragX","dragY","styles","onDeleteButtonPressed","Modal","children","mount","document","getElementById","el","createElement","useEffect","appendChild","removeChild","createPortal","ModalPopup","handleKeyDown","ev","code","closePopup","elementDrag","window","event","clientX","clientY","element","target","style","top","offsetTop","left","offsetLeft","closeDragElement","onmouseup","onmousemove","addEventListener","removeEventListener","showPopup","id","BackDrop","onMouseDown","header","FileContentPopup","row_lines","content","split","showFileContentPopup","closeFileContentPopup","line","RunningLogsListItem","useState","setShowFileContentPopup","refElement","useRef","selected","scrollIntoView","tableClientRect","current","parentElement","getBoundingClientRect","rowClientReact","bottom","RunningLogListItemClicked","RunningLogListItem","batchFailed","RunningLogListItemFailed","checkMarkStyle","marked","RunningLogListItemCheckMarkClicked","RunningLogListItemCheckMarkNotClicked","itemClicked","ref","e","ctrlKey","shiftKey","stopPropagation","preventDefault","checkMarkClicked","data","runningDate","jobName","step","checklist","RunningLogListItemNumeric","actionsNum","layersNum","batchJobsNum","runningTime","index","RunningLogsListTable","selectedIndex","logsListData","length","logItemClicked","dataLength","next","hasMore","width","errorTime","getListData","localData","batch","ActNum","Set","action","LayerName","StepName","ChecklistName","RunningLogsList","logDataArray","loading","onRefreshButtonPressed","fetchMoreData","VegaLiteChart","spec","runData","values","mark","type","tooltip","encoding","x","field","timeUnit","x2","y","sort","color","autosize","VegaLite","arrayOfTimestamps","arrayOfLines","filter","match","tmpArrayOfLines","splice","timeStamp","utcDate","dateStr","i","timeStampToDate","time","toDateString","push","timestamps","errorTimeString","uploadTime","splitterTime","acpTime","mergerTime","downloadTime","toLocaleString","start_time","job_ended_arr","end_time","complete_time","Date","toISOString","substr","time_diff","d","batchObject","slice","join","StartTime","find","object","CompleteTime","splitter","s","merger","mergerStartMessage","mergerCompleteMessage","downloadStartMessage","downloadCompleteMessage","errorTimeStr","acp_transformed","Time","Step","Stage","Index","Number","acp_started","acp_completed","completeTimeMessage","c","Succeed","errorMessage","timeStr","splitArray","month","day","year","hour","min","sec","UTC","MainComponent","setLogDataArray","setIndex","chartData","fetchDataByKeysList","dataArray","forEach","keysListToFetch","filteredKeysList","filterNewKeysList","chunkOfKeysList","newDataArray","localDataArray","concat","b","some","deleteFile","keyStr","confirm","newLogDataArray","includes","mergerObj","downloadObj","stats","timestamp","StageIndex","Object","Name","AnalysisName","Layer","ActParam","BeginNf","EndNf","ContourGroupId","ContourGroupNum","StartDate","EndDate","uploadObj","splitterObj","getChartData","clickedIndex","App","fontSize","Boolean","location","hostname","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","module","exports"],"mappings":"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","file":"static/js/main.37df1b62.chunk.js","sourcesContent":["import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport classes from \"./Button.module.css\";\n\nconst button = (props) => {\n    return (\n        <button title={props.title} onClick={props.onClick} className={classes.Button}>\n            {props.icon ?\n            <FontAwesomeIcon icon={props.icon} size=\"x\" spin={props.spin}  /> :\n                null}\n            {props.text}\n        </button>\n    );\n};\n\nexport default button;","// let awsRegion = \"eu-central-1\";\n// let api_uri = \"https://bah2tkltg6.execute-api.eu-central-1.amazonaws.com/test/list\";\nlet api_uri = \"https://vm7sirnd04.execute-api.us-east-1.amazonaws.com/test\";\n\n// Fetch keys list (filenames) from s3 bucket using given api\nexport const fetchKeysList = async() => {\n    let response = await fetch(`${api_uri}/list`);\n    let json = await response.json();\n    let keysList = JSON.parse(json.body).keys;\n    return keysList;\n}\n\n// Fetch content of files from s3 bucket by given list of keys\nexport const fetchFileContentByKeysList = async (keysList) => {\n    let promises = keysList.map (key => fetch(`${api_uri}/list/${key}`))\n    let respArray = await Promise.all(promises)\n    let json_promises = respArray.map(resp => resp.json())\n    let textArray = await Promise.all(json_promises);\n    return textArray;\n}\n\nexport const getPresignedURL = async (selectedFile) => {\n    const url = `${api_uri}/get-presigned-url/${selectedFile.name}`\n    let presignedURL = null;\n    try {\n        let response = await fetch(url);\n        let json = await response.json();\n        presignedURL = json.url;\n    }\n    catch (err) {\n        console.log(err.message)\n    }\n    return presignedURL;\n};\n\nexport const uploadFileToS3 = async (selectedFile) => {\n    // Step 1 - get pre-signed POST data.\n    const presignedURL = await getPresignedURL(selectedFile);\n    // if (!presignedURL)  failed to get presigned url - return rejected promise ?\n    // Step 2 - upload the file to S3.\n    return fetch(presignedURL, {\n            method: \"PUT\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: selectedFile.src.file\n        })\n};\n\n// export const uploadFileToS3 = async (presignedURL, file) => {\n//     let json = null;\n//     try {\n//         let response = await fetch(presignedURL, {\n//             method: \"PUT\",\n//             headers: {\n//                 \"Content-Type\": \"application/json\"\n//             },\n//             body: file\n//         });\n//         json = await response.json();\n//     }\n//     catch (err) {\n//         console.log(err.message)\n//     }\n//\n//     return json;\n// };\n\nexport const deleteFilesFromS3 = async (keysToDelete) => {\n    const url = `${api_uri}/delete`;\n    let deletedKeys = [];\n    try {\n        let response = await fetch(url,{\n            method:\"DELETE\",\n            headers: {\n                'Content-Type': 'application/json'\n                // 'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            body: JSON.stringify( {keys: keysToDelete})\n        });\n        let json = await response.json();\n        console.log(json.keys);\n        deletedKeys = json.keys;\n    }\n    catch (e) {\n        alert(\"error delete files\")\n    }\n    return deletedKeys;\n}\n","import React from \"react\";\nimport Files from \"react-butterfiles\";\n// import readFiles from \"../../models/readFile\";\n// import styles from \"./FileUploadButton.module.css\";\nimport Button from \"../../UI/Button/Button\"\nimport {uploadFileToS3} from \"../../models/aws_api\";\n\n/**\n * Component renders a simple \"Select file...\" button which opens a file browser.\n * Once a valid file has been selected, the upload process will start.\n * @returns {*}\n * @constructor\n */\nconst FileUploadButton = (props) => {\n    const uploadFiles = async (selectedFiles) => {\n        let promises = selectedFiles.map( selectedFile => uploadFileToS3(selectedFile) );\n        let selectedFileNames = selectedFiles.map( selectedFile => selectedFile.name );\n\n        try {\n            let respArray = await Promise.all(promises);\n            // let json_promises = respArray.map(resp => resp.json())\n            // json = await Promise.all(json_promises);\n            props.onUploadSucceed(selectedFileNames);\n            return respArray;\n        }\n        catch (err) {\n            console.log(err);\n            return err.message;\n        }\n    }\n\n    return  (\n        <Files\n            multiple={true}\n            multipleMaxCount={300}\n            onSuccess={selectedFiles => uploadFiles(selectedFiles)}\n        >\n            {({ browseFiles }) =>\n                <Button\n                    title=\"Upload log files\"\n                    text=\"Upload\"\n                    onClick={browseFiles}>\n                </Button>}\n        </Files>\n    );\n}\n\nexport default FileUploadButton;","import React from 'react';\nimport Button from '../../../UI/Button/Button';\nimport { faSyncAlt } from '@fortawesome/free-solid-svg-icons'\nimport FileUploadButton from \"../../FileUploadButton/FileUploadButton\";\nimport styles from './RunningLogsListHeader.module.css'\n\nfunction RunningLogsListHeader(props) {\n    return (\n        <header className={styles.RunningLogsListHeader}>\n            <FileUploadButton\n                onUploadSucceed={props.onUploadSucceed}\n            />\n            <Button\n                title=\"Delete log files\"\n                text=\"Delete\"\n                // icon={faSyncAlt}\n                // spin={props.loading}\n                onClick={props.onDeleteButtonPressed}\n            />\n            {/*<Button*/}\n            {/*    title=\"Compare two logs\"*/}\n            {/*    text=\"Compare\"*/}\n            {/*    // icon={faSyncAlt}*/}\n            {/*    // spin={props.loading}*/}\n            {/*    // onClick={props.onDeleteButtonPressed}*/}\n            {/*/>*/}\n            {/*<Button*/}\n            {/*    title=\"Reload files\"*/}\n            {/*    icon={faSyncAlt}*/}\n            {/*    spin={props.loading}*/}\n            {/*    onClick={props.onRefreshButtonPressed}*/}\n            {/*/>*/}\n\n            {/*<span>Amazon s3 ({props.awsRegion}) ></span>*/}\n            {/*<span>*/}\n            {/*    <a href=\"https://s3.console.aws.amazon.com/s3/buckets/acp-cloud-logs/?region=eu-central-1&tab=overview#\"*/}\n            {/*       target=\"_blank\" rel=\"noopener noreferrer\">*/}\n            {/*        acp-cloud-logs*/}\n            {/*    </a>*/}\n            {/*</span>*/}\n            {/*<span>*/}\n            {/*</span>*/}\n        </header>\n    );\n}\n\nexport default RunningLogsListHeader;\n","import React, { useEffect } from \"react\";\nimport Modal from \"../Modal\";\nimport classes from \"./ModalPopup.module.css\";\n\nlet offsetX;\nlet offsetY;\nlet dragX;\nlet dragY;\n\nconst ModalPopup = (props) => {\n\n    const onBackDropClicked = (ev) => {\n        if (ev.target.id === \"backDrop\") {\n            props.closePopup();\n        }\n    };\n\n    const handleKeyDown = (ev) => {\n        if (ev.code === \"Escape\") {\n            props.closePopup();\n        }\n    };\n\n    const elementDrag = (ev) => {\n        ev = ev || window.event;\n        // calculate the new cursor position:\n        offsetX = dragX - ev.clientX;\n        offsetY = dragY - ev.clientY;\n        dragX = ev.clientX;\n        dragY = ev.clientY;\n        // set the element's new position:\n        let element = ev.target;\n        element.style.top = (element.offsetTop - offsetY) + \"px\";\n        element.style.left = (element.offsetLeft - offsetX) + \"px\";\n    };\n\n    const closeDragElement = (ev) => {\n        /* stop moving when mouse button is released:*/\n        ev.target.onmouseup = null;\n        ev.target.onmousemove = null;\n    };\n\n    const dragMouseDown = (ev) => {\n        ev = ev || window.event;\n        // get the mouse cursor position at startup:\n        dragX = ev.clientX;\n        dragY = ev.clientY;\n        ev.target.onmouseup = closeDragElement;\n        // call a function whenever the cursor moves:\n        ev.target.onmousemove = elementDrag;\n    };\n\n    useEffect(() => {\n        document.addEventListener('keydown', handleKeyDown);\n        return () => document.removeEventListener('keydown', handleKeyDown);\n    } );\n\n    return props.showPopup ? (\n        <Modal>\n            <div\n                id=\"backDrop\"\n                className={classes.BackDrop}\n                onClick={onBackDropClicked}\n            >\n                <div className={classes.ModalPopup}\n                     onMouseDown={dragMouseDown}\n                >\n                    <header>{props.header}</header>\n                    {props.children}\n                </div>\n            </div>\n        </Modal>\n    ) : null;\n};\n\nexport default ModalPopup;\n","import { useEffect } from \"react\";\nimport { createPortal } from \"react-dom\";\n\nconst Modal = ({children}) => {\n    const mount = document.getElementById(\"modal-root\");\n    const el = document.createElement(\"div\");\n\n    useEffect(() => {\n        mount.appendChild(el);\n        return () => mount.removeChild(el);\n    }, [el, mount]);\n\n    return createPortal(children, el)\n};\n\nexport default Modal;\n","/**\n * Created by alexanderbol on 13/04/2017.\n */\n\nimport React from 'react';\nimport classes from './FileContentPopup.module.css';\nimport ModalPopup from \"../../UI/ModalPopup/ModalPopup\";\n\nconst FileContentPopup = (props) => {\n    const row_lines = props.content.split('\\n');\n    return (\n        <ModalPopup\n            showPopup={props.showFileContentPopup}\n            closePopup={props.closeFileContentPopup}\n            header=\"Log File Content\"\n        >\n            <div className={classes.FileContentPopup}>\n                {\n                    row_lines.map( line =>\n                        <p>{line}</p>\n                    )\n                }\n            </div>\n        </ModalPopup>\n    )\n};\n\nexport default FileContentPopup;\n","import React, {useRef, useEffect, useState} from 'react';\nimport styles from './RunningLogListItem.module.css';\nimport FileContentPopup from \"../../FileContentPopup/FileContentPopup\";\n\nfunction RunningLogsListItem(props) {\n    const [showFileContentPopup, setShowFileContentPopup] = useState(false);\n    const refElement = useRef();\n    useEffect( () => {\n        if (props.selected) {\n            scrollIntoView();\n        }\n    })\n\n    const scrollIntoView = () => {\n        const tableBody = refElement.current.parentElement;\n        const table = tableBody.parentElement;\n        const tableClientRect = table.getBoundingClientRect();\n        const rowClientReact = refElement.current.getBoundingClientRect();\n        if (rowClientReact.bottom > tableClientRect.bottom) {\n            refElement.current.scrollIntoView(false);\n        }\n        if (rowClientReact.top < tableClientRect.top) {\n            refElement.current.scrollIntoView(true);\n        }\n    }\n\n    // Callback to display Log File Content Popup\n    const showLogFileContentPopup = (index) => {\n        setShowFileContentPopup(true)\n    }\n\n    const closeLogFileContentPopup = () => {\n        setShowFileContentPopup(false)\n    }\n\n    const itemClicked = (e) => {\n        if (e.ctrlKey || e.shiftKey) {\n            e.stopPropagation();\n            e.preventDefault();\n            props.itemClicked()\n        }\n    }\n    const checkMarkClicked = (e) => {\n        if (!props.selected) {  // selected will stay marked\n            if (e.ctrlKey || e.shiftKey) {\n                e.stopPropagation();\n                e.preventDefault();\n                props.checkMarkClicked()\n            }\n        }\n    }\n\n    let style = props.selected ? styles.RunningLogListItemClicked : styles.RunningLogListItem;\n    style = props.batchFailed ? `${style} ${styles.RunningLogListItemFailed}` : style;\n    // let object_url = \"https://s3.console.aws.amazon.com/s3/object/acp-cloud-logs/\"+props.data.key;\n\n    let checkMarkStyle = props.marked ?\n        styles.RunningLogListItemCheckMarkClicked : styles.RunningLogListItemCheckMarkNotClicked;\n\n    return (\n        <>\n            <tr className={style} onClick={props.itemClicked} ref={refElement}>\n                    <td onClick={checkMarkClicked}>\n                        <h4 className={checkMarkStyle} >\n                            ✓\n                        </h4>\n                    </td>\n                <td>\n                    {props.data.runningDate}\n                </td>\n                <td>\n                    {props.data.jobName}\n                </td>\n                <td>\n                    {props.data.step}\n                </td>\n                <td>\n                    {props.data.checklist}\n                </td>\n                <td className={styles.RunningLogListItemNumeric}>\n                    {props.data.actionsNum}\n                </td>\n                <td className={styles.RunningLogListItemNumeric}>\n                    {props.data.layersNum}\n                </td>\n                <td className={styles.RunningLogListItemNumeric}>\n                    {props.data.batchJobsNum}\n                </td>\n                <td>\n                    {props.data.runningTime || \"Failed\"}\n                </td>\n                <td>\n                    <div onClick={showLogFileContentPopup} >\n                        {props.data.key}\n                    </div>\n                    {/*<a href={object_url} target=\"_blank\" rel=\"noopener noreferrer\">*/}\n                    {/*    {props.data.key}*/}\n                    {/*</a>*/}\n                </td>\n            </tr>\n\n            {showFileContentPopup ?\n                <FileContentPopup\n                    showFileContentPopup={showFileContentPopup}\n                    closeFileContentPopup={closeLogFileContentPopup}\n                    content={props.data.text}\n                /> : null }\n\n        </>\n    );\n}\n\nexport default RunningLogsListItem;\n","import React, {useEffect} from 'react';\nimport InfiniteScroll from 'react-infinite-scroll-component';\nimport styles from './RunningLogsListTable.module.css';\nimport RunningLogsListItem from \"../RunningLogListItem/RunningLogListItem\";\n\nfunction RunningLogsListTable(props) {\n    useEffect( () => {\n        const handleKeyDown = (e) => {\n            switch (e.code) {\n                case \"ArrowDown\":\n                    e.stopPropagation();\n                    e.preventDefault();\n                    if (props.selectedIndex < props.logsListData.length-1) {\n                        props.logItemClicked(props.selectedIndex+1);\n                    }\n                    break;\n                case \"ArrowUp\":\n                    e.stopPropagation();\n                    e.preventDefault();\n                    if (props.selectedIndex > 0) {\n                        props.logItemClicked(props.selectedIndex-1);\n                    }\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        document.addEventListener('keydown', handleKeyDown);\n\n        return () => {\n            document.removeEventListener('keydown', handleKeyDown);\n        };\n    })\n\n    const fetchMoreData = () => {\n        // alert(\"Fetch more data\")\n        // props.fetchMoreData();\n    }\n\n    return (\n        <div>\n            <InfiniteScroll\n                dataLength={props.logsListData?.length}\n                next={fetchMoreData}\n                hasMore={true}\n            >\n\n                <table className={styles.RunningLogsListTable}>\n                    <thead>\n                    <tr>\n                        <th style={{width: \"3%\"}}>✓</th>\n                        <th style={{width:\"15%\"}}>Running date</th>\n                        <th style={{width:\"22%\"}}>Job Name</th>\n                        <th style={{width:\"3%\"}}>Step</th>\n                        <th style={{width:\"15%\"}}>Checklist</th>\n                        <th style={{width:\"5%\"}}># Actions</th>\n                        <th style={{width:\"5%\"}}># Layers</th>\n                        <th style={{width:\"5%\"}}># ACPs</th>\n                        <th style={{width:\"4%\"}}>Running Time</th>\n                        <th style={{width:\"13%\"}}>Log File Name</th>\n                    </tr>\n                    </thead>\n                    <tbody>\n                        {props.logsListData?.map( (data, index) =>\n                            <RunningLogsListItem key={index}\n                                                 data={data}\n                                                 selected={props.selectedIndex===index}\n                                                 marked={data.marked}\n                                                 batchFailed={!!data.errorTime}\n                                                 itemClicked={() => props.logItemClicked(index)}\n                                                 checkMarkClicked = {() => props.checkMarkClicked(index)}\n                            />\n                        )}\n                    </tbody>\n                </table>\n            </InfiniteScroll>\n\n        </div>\n    );\n}\n\nexport default RunningLogsListTable;\n","export function getChartData(data) {\n    let stats = data.batch.map(action => {\n        let timestamp = data.acpTime.find(\n            a => a.Stage === action.Stage && a.Index === action.StageIndex\n        );\n        return {\n            Object: timestamp.Succeed ? \"Acp\" : \"Acp Failed\",\n            Stage: action.Stage,\n            Index: action.Stage + '_' + action.StageIndex,\n            ActNum: action.ActNum,\n            Name: action.AnalysisName,\n            Layer: action.LayerName,\n            ActParam: action.ActParam,\n            BeginNf: action.BeginNf,\n            EndNf: action.EndNf,\n            ContourGroupId: action.ContourGroupId,\n            ContourGroupNum: action.ContourGroupNum,\n            StartDate: timestamp ? timestamp.StartTime : \"\",\n            EndDate: timestamp ? timestamp.CompleteTime : \"\",\n            Time: time_diff(timestamp.StartTime, timestamp.CompleteTime)\n        };\n    });\n\n    let uploadObj = {\n        Object: \"Upload\",\n        Name: \"Upload\",\n        Index: -1,\n        StartDate: data.uploadTime.StartTime,\n        EndDate: data.uploadTime.CompleteTime\n    };\n\n    let splitterObj = {\n        Object: \"Splitter\",\n        Name: \"Splitter\",\n        Index: 0,\n        StartDate: data.splitterTime.StartTime,\n        EndDate: data.splitterTime.CompleteTime\n    };\n\n    let mergerObj;\n    if (data.mergerTime.StartTime && data.mergerTime.CompleteTime) {\n        mergerObj = {\n            Object: \"Merger\",\n            Name: \"Merger\",\n            Index: stats.length + 1,\n            StartDate: data.mergerTime.StartTime,\n            EndDate: data.mergerTime.CompleteTime\n        };\n    }\n\n    let downloadObj;\n    if (data.downloadTime.StartTime && data.downloadTime.CompleteTime) {\n        downloadObj = {\n            Object: \"Download\",\n            Name: \"Download\",\n            Index: stats.length + 2,\n            StartDate: data.downloadTime.StartTime,\n            EndDate: data.downloadTime.CompleteTime\n        };\n    }\n\n    stats = [uploadObj, splitterObj, ...stats];\n    if (mergerObj) stats = [...stats, mergerObj];\n    if (downloadObj) stats = [...stats, downloadObj];\n\n    return stats;\n}\n\n\nexport function getListData(localData) {\n    const actionsNum = localData?.batch[localData.batch.length - 1].ActNum;\n    const layersNum = new Set(localData?.batch.map(action => action.LayerName)).size;\n    return {\n        runningDate: localData?.runningDate,\n        jobName: localData?.jobName,\n        step: localData?.batch[0].StepName,\n        checklist: localData?.batch[0].ChecklistName,\n        actionsNum: actionsNum,\n        layersNum: layersNum,\n        runningTime: localData?.runningTime,\n        batchJobsNum: localData?.batch.length,\n        key: localData?.key,\n        errorTime: localData?.errorTime,\n        text: localData?.text,\n        marked: localData?.marked\n    }\n}\n\n// function time_diff(start_time, complete_time) {\n//     let start = start_time.split(':').map(t => Number(t));\n//     let start_sec = start[0] * 3600 + start[1] * 60 + start[2];\n//     let complete = complete_time.split(':').map(t => Number(t));\n//     let complete_sec = complete[0] * 3600 + complete[1] * 60 + complete[2];\n//     let diff_sec = complete_sec - start_sec;\n//     return diff_sec;\n// }\n\nfunction time_diff(start_time, complete_time) {\n    return msecToHHMMSS(complete_time - start_time);\n}\n\nfunction msecToHHMMSS(time) {\n    return new Date(time).toISOString().substr(11, 8);\n}\n","import React from 'react';\nimport styles from './RunningLogsList.module.css';\nimport RunningLogsListHeader from \"./RunningLogsListHeader/RunningLogsListHeader\";\nimport RunningLogsListTable from \"./RunningLogsListTable/RunningLogsListTable\";\nimport {getListData} from \"../../models/logData\";\n\nfunction RunningLogsList(props) {\n    // Setup data before rendering\n    let logsListData = [];\n    if (props.logDataArray.length > 0) {\n        logsListData = props.logDataArray.map(data => getListData(data))\n    }\n    return (\n        <div className={styles.RunningLogsList}>\n            <RunningLogsListHeader\n                loading={props.loading}\n                onUploadSucceed={props.onUploadSucceed}\n                onDeleteButtonPressed={props.onDeleteButtonPressed}\n                onRefreshButtonPressed={props.onRefreshButtonPressed}\n            />\n\n            <RunningLogsListTable\n                logsListData={logsListData}\n                selectedIndex={props.selectedIndex}\n                logItemClicked={props.logItemClicked}\n                checkMarkClicked={props.checkMarkClicked}\n                fetchMoreData={props.onRefreshButtonPressed}\n            />\n\n        </div>\n    );\n}\n\nexport default RunningLogsList;\n","import React from 'react';\nimport { VegaLite } from 'react-vega'\nimport styles from './VegaLiteChart.module.css';\n\nfunction VegaLiteChart(props) {\n    const spec = {\n        \"$schema\": \"https://vega.github.io/schema/vega-lite/v4.json\",\n        title: props.runData?.jobName,\n        data: { values: props.data },\n        mark: { type: \"bar\", tooltip: [] },\n        encoding: {\n            x: {\n                type: \"temporal\",\n                field: \"StartDate\",\n                timeUnit: \"hoursminutesseconds\"\n            },\n            x2: {\n                type: \"temporal\",\n                field: \"EndDate\",\n                timeUnit: \"hoursminutesseconds\"\n            },\n            y: {\n                type: \"nominal\",\n                field: \"Index\",\n                sort: null\n            },\n            color: { field: \"Object\" }\n        },\n        width: 800,\n        // height: 800,\n        autosize: \"fit\"\n    }\n\n    return (\n        <div className={styles.VegaLiteChart}>\n            {\n                props.data && props.runData.runningTime ?\n                    <VegaLite spec={spec} data={props.data}/> : null\n            }\n        </div>\n    );\n}\n\nexport default VegaLiteChart;\n","export function parse(text) {\n    const row_lines = text.split('\\n');\n    const arrayOfTimestamps = timestamps(row_lines);\n    const errorTimeString = errorTime(row_lines, arrayOfTimestamps);\n    return {\n        runningDate: runningDate(arrayOfTimestamps),\n        runningTime: runningTime(arrayOfTimestamps, errorTimeString),\n        jobName: jobName(row_lines),\n        batch: batch(arrayOfTimestamps),\n        uploadTime: uploadTime(arrayOfTimestamps),\n        splitterTime: splitterTime(arrayOfTimestamps),\n        acpTime: acpTime(row_lines, arrayOfTimestamps),\n        mergerTime: mergerTime(arrayOfTimestamps),\n        downloadTime: downloadTime(arrayOfTimestamps),\n        errorTime: errorTimeString\n    };\n}\n\nfunction jobName(row_lines) {\n    const job_line = row_lines.filter(line => line.match(\"Job:\"))[0];\n    const job_name = job_line.split(' ')[1];\n    return job_name;\n}\n\nfunction runningDate(arrayOfTimestamps) {\n    let job_started = arrayOfTimestamps.filter(\n        line => line.message === \"Ready for commands\"\n    )[0];\n    return job_started.utcDate.toLocaleString();\n}\n\n// function runningDate(row_lines) {\n//     let arrayOfLines = row_lines.filter(line => line.match(\"time\"));\n//     let splitArray = arrayOfLines[0].split(' ');\n//     let [day, month, year] = splitArray[1].split(':')[1].split('/');\n//     if (day.length > 2) day = day.substr(1);\n//     let [hour, min] = splitArray[2].split(':');\n//     if (hour.trim().length > 2) hour = hour.substr(1);\n//     if (min.trim().length > 2) min = min.substr(1);\n//     return new Date(Date.UTC(year, month - 1, day, hour, min)).toUTCString();\n// }\n\nfunction runningTime(arrayOfTimestamps, errorTime) {\n    let job_started = arrayOfTimestamps.filter(\n        line => line.message === \"Ready for commands\"\n    )[0];\n    let start_time = job_started.utcDate;\n    let job_ended_arr = arrayOfTimestamps.filter(\n        line => line.message === \"Job is ready\"\n    );\n    let end_time = job_ended_arr.length > 0 ? job_ended_arr[0].utcDate : errorTime;\n\n    return end_time ? time_diff(start_time, end_time) : \"\";\n}\n\nfunction batch(arrayOfTimestamps) {\n    let batchObjectList = arrayOfTimestamps.filter(d => d.type === \"Batch\");\n    let messageList = batchObjectList.map(batchObject =>\n        batchObject.message.slice(2)\n    );\n    let message = messageList.join(\"\");\n    return JSON.parse(message);\n}\n\nfunction uploadTime(arrayOfTimestamps) {\n    let uploadTime = {\n        StartTime: arrayOfTimestamps.find(\n            d => d.object === \"WebClient\" && d.message === \"Job was registered\"\n        ).utcDate,\n        CompleteTime: arrayOfTimestamps.find(\n            d => d.object === \"WebClient\" && d.message === \"After send\"\n        ).utcDate\n    };\n    return uploadTime;\n}\n\nfunction splitterTime(arrayOfTimestamps) {\n    let splitter = arrayOfTimestamps.filter(d => d.object === \"Splitter\")\n    let s = {\n        StartTime: splitter.find(s => s.message === \"Splitter started\").utcDate,\n        CompleteTime: splitter.find(s => s.message === \"End of Split\").utcDate\n    };\n    return s;\n}\n\nfunction mergerTime(arrayOfTimestamps) {\n    let merger = arrayOfTimestamps.filter(d => d.object === \"Merger\");\n    let mergerStartMessage = merger.find(s => s.message === \"Preparing job for merge\");\n    let mergerCompleteMessage = merger.find(s => s.message === \"Moving Job to S3\");\n\n    let s = {\n        StartTime: mergerStartMessage ? mergerStartMessage.utcDate : null,\n        CompleteTime: mergerCompleteMessage ? mergerCompleteMessage.utcDate : null\n    };\n    return s;\n}\n\nfunction downloadTime(arrayOfTimestamps) {\n    let downloadStartMessage = arrayOfTimestamps.find(d => d.object === \"WebClient\" && d.message === \"Download Data\");\n    let downloadCompleteMessage = arrayOfTimestamps.find(d => d.object === \"WebClient\" && d.message === \"Job is ready\");\n    let downloadTime = {\n        StartTime: downloadStartMessage ? downloadStartMessage.utcDate : null,\n        CompleteTime: downloadCompleteMessage ? downloadCompleteMessage.utcDate : null\n    };\n    return downloadTime;\n}\n\nfunction acpTime(row_lines, arrayOfTimestamps) {\n    let errorTimeStr = errorTime(row_lines, arrayOfTimestamps);\n    let acp = arrayOfTimestamps.filter(d => (d.type === \"Progress\" || d.type === \"Info\") && d.object === \"ACP\");\n    let acp_transformed = acp.map(action => {\n        let message = action.message.split(' ');\n        return {\n            Time: action.utcDate,\n            Step: message[0],\n            Stage: message[1].split(':')[1],\n            Index: Number(message[2].split(':')[1]) + 1\n        };\n    });\n    let acp_started = acp_transformed\n        .filter(action => action.Step === \"Starting\")\n        .map(action => {\n            return {\n                Stage: action.Stage,\n                Index: action.Index,\n                StartTime: action.Time\n            };\n        });\n    let acp_completed = acp_transformed\n        .filter(action => action.Step === \"Completing\")\n        .map(action => {\n            return {\n                Stage: action.Stage,\n                Index: action.Index,\n                CompleteTime: action.Time\n            };\n        });\n    let acp_timestamp = acp_started.map(action => {\n        let completeTimeMessage = acp_completed.find(\n            c => c.Stage === action.Stage && c.Index === action.Index\n        );\n\n        return {\n            Stage: action.Stage,\n            Index: action.Index,\n            StartTime: action.StartTime,\n            CompleteTime: completeTimeMessage ? completeTimeMessage.CompleteTime : errorTimeStr,\n            Succeed: !!completeTimeMessage\n        };\n    });\n    return acp_timestamp;\n}\n\nfunction errorTime(row_lines, arrayOfTimestamps) {\n    let errorMessage = arrayOfTimestamps.find(\n        d => d.object === \"WebClient\" && d.type === \"ERROR\"\n    );\n\n    let errorTime = null;\n    if (errorMessage) {\n        errorTime = errorMessage.utcDate\n    }\n    // else {\n    //     let ping_lines = row_lines\n    //         .filter(line => line.match(\"I am alive\"));\n    //     errorTime = ping_lines.length > 0 ? JSON.parse(ping_lines[ping_lines.length - 1]).Time : null;\n    // }\n    return errorTime;\n}\n\nfunction timestamps(row_lines) {\n    let arrayOfLines = row_lines.filter(line => line.match(\"time\"));\n    let tmpArrayOfLines = [...arrayOfLines];\n    tmpArrayOfLines.splice(0, 1);\n    let arrayOfTimestamps = [];\n    let timeStamp;\n    let utcDate;\n    let dateStr = \"\";\n    for (let i = 0; i < tmpArrayOfLines.length; i++) {\n        try {\n            timeStamp = JSON.parse(tmpArrayOfLines[i]);\n            if (timeStamp.message === \"Submit Splitter\") continue; // bad format\n            utcDate = timeStampToDate(timeStamp.time, dateStr);\n            dateStr = utcDate.toDateString();\n            arrayOfTimestamps.push({ utcDate, ...timeStamp });\n        } catch (e) {\n            return [i, tmpArrayOfLines[i]];\n        }\n    }\n    return arrayOfTimestamps;\n}\n\nfunction time_diff(start_time, complete_time) {\n    return msecToHHMMSS(complete_time - start_time);\n}\n\nfunction msecToHHMMSS(time) {\n    return new Date(time).toISOString().substr(11, 8);\n}\n\nfunction timeStampToDate(timeStr, dateStr) {\n    let splitArray = timeStr.split(', ');\n    if (splitArray.length === 1) {   // bad format only time no date\n        return new Date(dateStr + ' ' + timeStr)\n    }\n    else {\n        let [month, day, year] = splitArray[0].split('/');\n        let [hour, min, sec] = splitArray[1].split(':');\n        return new Date(Date.UTC(year, month - 1, day, hour, min, sec)); // .toUTCString();\n    }\n}\n","import React, {useEffect, useState} from 'react';\nimport styles from './MainComponent.module.css';\nimport RunningLogsList from \"../RunningLogsList/RunningLogsList\";\nimport VegaLiteChart from \"../VegaLiteChart/VegaLiteChart\";\nimport {getChartData, getListData} from \"../../models/logData\";\nimport {parse} from \"../../models/logFileParser\";\nimport {fetchFileContentByKeysList, fetchKeysList, deleteFilesFromS3} from \"../../models/aws_api\";\n\nfunction MainComponent(props) {\n    const [logDataArray, setLogDataArray] = useState([]);\n    const [index, setIndex] = useState(0);\n    const [loading, setLoading] = useState(false);\n\n    const numInChunk = 8;\n    let chartData = null;\n    let runData = null;\n\n    // Fetch content of files from s3 bucket by given list of keys\n    const fetchDataByKeysList = async (keysList) => {\n        let textArray = await fetchFileContentByKeysList(keysList);\n        let dataArray = textArray.map( e => parse(e.text));\n        dataArray.forEach( (data,i) => data.key = keysList[i] )\n        dataArray.forEach( (data,i) => data.text = textArray[i].text )\n        return dataArray;\n    }\n\n    const fetchMoreData = async (keysListToFetch) => {\n        // setLoading(true);\n\n        let keysList = keysListToFetch || await fetchKeysList();\n        let filteredKeysList = filterNewKeysList(keysList);\n\n        let chunkOfKeysList = filteredKeysList.slice(0,numInChunk);\n        let newDataArray = await fetchDataByKeysList(chunkOfKeysList);\n        let localDataArray = logDataArray.concat(newDataArray);\n\n        localDataArray.sort(function(a,b){\n            return new Date(b.runningDate) - new Date(a.runningDate);\n        });\n\n        // If all data loaded, render list and select first row\n        if (localDataArray.length > 0) {\n            // setLoading(false);\n            localDataArray[0].marked = true;\n            setLogDataArray(localDataArray);             // trigger rendering\n        }\n    }\n\n    // Filter keysList: keep only new keys that do not exist in logDataArray\n    const filterNewKeysList = (keysList) => {\n        let filteredKeyList = keysList\n            .filter( key => !logDataArray.some( data => data.key === key))\n        return filteredKeyList;\n    }\n\n    const syncData = () => {\n        fetchMoreData()\n        // setLoading(true)\n    }\n\n    const fetchUploaded = (keysList) => {\n        fetchMoreData(keysList)\n    }\n\n    // Callback to set new chart data and update selected index\n    const logItemClicked = (clickedIndex) => {\n        let newLogDataArray = logDataArray.slice();\n        newLogDataArray.forEach( (data, i) => data.marked = (i == clickedIndex));\n        setLogDataArray(newLogDataArray);             // trigger rendering\n        setIndex(clickedIndex);                       // trigger rendering\n    }\n\n    const checkMarkClicked = (clickedIndex) => {\n        if (clickedIndex === index) return;\n        let newLogDataArray = logDataArray.slice();\n        newLogDataArray.forEach( (data, i) =>\n            i == clickedIndex ? data.marked = !data.marked : data.marked);\n        setLogDataArray(newLogDataArray);             // trigger rendering\n    }\n\n    const deleteFile = async () => {\n        let keysToDelete = logDataArray\n            .filter( data => data.marked )\n            .map( data => data.key);\n        if (keysToDelete.length === 0) return;\n        let keyStr = keysToDelete.join(\"\\n\");\n        let ok = window.confirm(`File(s) will be deleted:\\n ${keyStr}`)\n        if (ok) {\n            let deletedKeys = await deleteFilesFromS3(keysToDelete);\n            let newLogDataArray = logDataArray.filter(data => !deletedKeys.includes(data.key));\n            // setLoading(true);\n            if (newLogDataArray.length > 0) {\n                setLogDataArray(newLogDataArray);             // trigger rendering\n                setIndex(0);\n            }\n        }\n    }\n\n    // Effect to load all data from AWS s3 bucket after component mounted\n    useEffect( () => {\n        if (logDataArray.length === 0) {\n            fetchMoreData();\n        }\n    });\n\n    // Setup data before rendering\n    if (logDataArray.length > 0) {\n        let localData = logDataArray[index];\n        try {\n            chartData = getChartData(localData);\n        }\n        catch (e) {\n            chartData = null;\n        }\n        runData = getListData(localData);\n    }\n\n    return (\n        <main className={styles.MainComponent}>\n            <RunningLogsList\n                logDataArray={logDataArray}\n                selectedIndex={index}\n                loading={loading}\n                logItemClicked={logItemClicked}\n                checkMarkClicked={checkMarkClicked}\n                onUploadSucceed={fetchUploaded}\n                onDeleteButtonPressed={deleteFile}\n                onRefreshButtonPressed={syncData}\n            />\n            <VegaLiteChart data={chartData} runData={runData} />\n        </main>\n    );\n}\n\nexport default MainComponent;\n","import React from 'react';\nimport MainComponent from \"./components/MainComponent/MainComponent\";\nimport './App.css';\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <div className=\"content\">\n                <h1>Cloud Log Viewer</h1>\n                <hr />\n                <MainComponent />\n                <hr />\n            </div>\n            <footer className=\"footer\">\n                <p style={{fontSize:\"12px\"}}>Alex Bol 2020</p>\n            </footer>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"RunningLogListItem\":\"RunningLogListItem_RunningLogListItem__wcmB-\",\"RunningLogListItemClicked\":\"RunningLogListItem_RunningLogListItemClicked__2euIm\",\"RunningLogListItemFailed\":\"RunningLogListItem_RunningLogListItemFailed__sXOJI\",\"RunningLogListItemNumeric\":\"RunningLogListItem_RunningLogListItemNumeric__28nyp\",\"RunningLogListItemClickable\":\"RunningLogListItem_RunningLogListItemClickable__1XJdG\",\"RunningLogListItemCheckMarkClicked\":\"RunningLogListItem_RunningLogListItemCheckMarkClicked__1BOa9\",\"RunningLogListItemCheckMarkNotClicked\":\"RunningLogListItem_RunningLogListItemCheckMarkNotClicked__2ypBQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"BackDrop\":\"ModalPopup_BackDrop__3oXJD\",\"ModalPopup\":\"ModalPopup_ModalPopup__3TsOV\",\"fadeIn\":\"ModalPopup_fadeIn__1BHZf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"MainComponent\":\"MainComponent_MainComponent__1UCA3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"RunningLogsList\":\"RunningLogsList_RunningLogsList__1jWMA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Button\":\"Button_Button__3h9Fb\",\"Icon\":\"Button_Icon__c_IsA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"RunningLogsListHeader\":\"RunningLogsListHeader_RunningLogsListHeader__2REzz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"RunningLogsListTable\":\"RunningLogsListTable_RunningLogsListTable__3tUhi\",\"fadeIn\":\"RunningLogsListTable_fadeIn__1fouu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"FileContentPopup\":\"FileContentPopup_FileContentPopup__1wTAX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"VegaLiteChart\":\"VegaLiteChart_VegaLiteChart__3452l\"};"],"sourceRoot":""}