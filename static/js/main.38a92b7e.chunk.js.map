{"version":3,"sources":["UI/Button/Button.js","components/RunningLogsList/RunningLogsListHeader/RunningLogsListHeader.js","UI/ModalPopup/ModalPopup.js","UI/Modal.js","components/FileContentPopup/FileContentPopup.js","components/RunningLogsList/RunningLogListItem/RunningLogListItem.js","components/RunningLogsList/RunningLogsListTable/RunningLogsListTable.js","components/RunningLogsList/RunningLogsList.js","components/VegaLiteChart/VegaLiteChart.js","models/logData.js","models/logFileParser.js","components/MainComponent/MainComponent.js","App.js","serviceWorker.js","index.js","components/RunningLogsList/RunningLogListItem/RunningLogListItem.module.css","UI/ModalPopup/ModalPopup.module.css","components/MainComponent/MainComponent.module.css","components/RunningLogsList/RunningLogsList.module.css","UI/Button/Button.module.css","components/RunningLogsList/RunningLogsListHeader/RunningLogsListHeader.module.css","components/RunningLogsList/RunningLogsListTable/RunningLogsListTable.module.css","components/FileContentPopup/FileContentPopup.module.css","components/VegaLiteChart/VegaLiteChart.module.css"],"names":["button","props","title","onClick","className","classes","Button","icon","size","spin","RunningLogsListHeader","offsetX","offsetY","dragX","dragY","styles","awsRegion","href","target","rel","faSyncAlt","loading","onRefreshButtonPressed","Modal","children","mount","document","getElementById","el","createElement","useEffect","appendChild","removeChild","createPortal","ModalPopup","handleKeyDown","ev","code","closePopup","elementDrag","window","event","clientX","clientY","element","style","top","offsetTop","left","offsetLeft","closeDragElement","onmouseup","onmousemove","addEventListener","removeEventListener","showPopup","id","BackDrop","onMouseDown","header","FileContentPopup","row_lines","content","split","showFileContentPopup","closeFileContentPopup","map","line","RunningLogsListItem","useState","setShowFileContentPopup","refElement","useRef","selected","scrollIntoView","RunningLogListItemClicked","RunningLogListItem","batchFailed","RunningLogListItemFailed","tableClientRect","current","parentElement","getBoundingClientRect","rowClientReact","bottom","Fragment","itemClicked","ref","data","runningDate","jobName","step","checklist","RunningLogListItemNumeric","actionsNum","layersNum","batchJobsNum","runningTime","index","key","text","RunningLogsListTable","e","stopPropagation","preventDefault","selectedIndex","logsListData","length","logItemClicked","dataLength","next","hasMore","width","errorTime","RunningLogsList","fetchMoreData","VegaLiteChart","spec","runData","values","mark","type","tooltip","encoding","x","field","timeUnit","x2","y","sort","color","autosize","VegaLite","getListData","localData","batch","ActNum","Set","action","LayerName","StepName","ChecklistName","parse","arrayOfTimestamps","arrayOfLines","filter","match","tmpArrayOfLines","splice","timeStamp","utcDate","i","JSON","message","timeStampToDate","time","push","timestamps","errorTimeString","uploadTime","splitterTime","acpTime","mergerTime","downloadTime","toLocaleString","start_time","job_ended_arr","end_time","complete_time","Date","toISOString","substr","time_diff","d","batchObject","slice","join","StartTime","find","object","CompleteTime","splitter","s","merger","mergerStartMessage","mergerCompleteMessage","downloadStartMessage","downloadCompleteMessage","errorTimeStr","acp_transformed","Time","Step","Stage","Index","Number","acp_started","acp_completed","completeTimeMessage","c","Succeed","errorMessage","timeStr","splitArray","month","day","year","hour","min","sec","UTC","MainComponent","logDataArray","setLogDataArray","setIndex","setLoading","chartData","api_uri","fetchKeysList","a","fetch","response","json","keysList","body","keys","fetchDataByKeysList","promises","Promise","all","respArray","json_promises","resp","textArray","dataArray","forEach","filteredKeysList","filterNewKeysList","chunkOfKeysList","newDataArray","localDataArray","concat","b","some","mergerObj","downloadObj","stats","timestamp","StageIndex","Object","Name","AnalysisName","Layer","ActParam","BeginNf","EndNf","ContourGroupId","ContourGroupNum","StartDate","EndDate","uploadObj","splitterObj","getChartData","App","fontSize","Boolean","location","hostname","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","module","exports"],"mappings":"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","file":"static/js/main.38a92b7e.chunk.js","sourcesContent":["import React from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport classes from \"./Button.module.css\";\r\n\r\nconst button = (props) => {\r\n    return (\r\n        <button title={props.title} onClick={props.onClick} className={classes.Button}>\r\n            <FontAwesomeIcon icon={props.icon} size=\"2x\" spin={props.spin}  />\r\n        </button>\r\n    );\r\n};\r\n\r\nexport default button;","import React from 'react';\r\nimport Button from '../../../UI/Button/Button';\r\nimport { faSyncAlt } from '@fortawesome/free-solid-svg-icons'\r\n\r\nimport styles from './RunningLogsListHeader.module.css'\r\n\r\nfunction RunningLogsListHeader(props) {\r\n    return (\r\n        <header className={styles.RunningLogsListHeader}>\r\n            <span>Amazon s3 ({props.awsRegion}) ></span>\r\n            <span>\r\n                <a href=\"https://s3.console.aws.amazon.com/s3/buckets/acp-cloud-logs/?region=eu-central-1&tab=overview#\"\r\n                   target=\"_blank\" rel=\"noopener noreferrer\">\r\n                    acp-cloud-logs\r\n                </a>\r\n            </span>\r\n            <span>\r\n                <Button\r\n                    title=\"Reload logs from S3 bucket\"\r\n                    icon={faSyncAlt}\r\n                    spin={props.loading}\r\n                    onClick={props.onRefreshButtonPressed}\r\n                />\r\n            </span>\r\n        </header>\r\n    );\r\n}\r\n\r\nexport default RunningLogsListHeader;\r\n","import React, { useEffect } from \"react\";\r\nimport Modal from \"../Modal\";\r\nimport classes from \"./ModalPopup.module.css\";\r\n\r\nlet offsetX;\r\nlet offsetY;\r\nlet dragX;\r\nlet dragY;\r\n\r\nconst ModalPopup = (props) => {\r\n\r\n    const onBackDropClicked = (ev) => {\r\n        if (ev.target.id === \"backDrop\") {\r\n            props.closePopup();\r\n        }\r\n    };\r\n\r\n    const handleKeyDown = (ev) => {\r\n        if (ev.code === \"Escape\") {\r\n            props.closePopup();\r\n        }\r\n    };\r\n\r\n    const elementDrag = (ev) => {\r\n        ev = ev || window.event;\r\n        // calculate the new cursor position:\r\n        offsetX = dragX - ev.clientX;\r\n        offsetY = dragY - ev.clientY;\r\n        dragX = ev.clientX;\r\n        dragY = ev.clientY;\r\n        // set the element's new position:\r\n        let element = ev.target;\r\n        element.style.top = (element.offsetTop - offsetY) + \"px\";\r\n        element.style.left = (element.offsetLeft - offsetX) + \"px\";\r\n    };\r\n\r\n    const closeDragElement = (ev) => {\r\n        /* stop moving when mouse button is released:*/\r\n        ev.target.onmouseup = null;\r\n        ev.target.onmousemove = null;\r\n    };\r\n\r\n    const dragMouseDown = (ev) => {\r\n        ev = ev || window.event;\r\n        // get the mouse cursor position at startup:\r\n        dragX = ev.clientX;\r\n        dragY = ev.clientY;\r\n        ev.target.onmouseup = closeDragElement;\r\n        // call a function whenever the cursor moves:\r\n        ev.target.onmousemove = elementDrag;\r\n    };\r\n\r\n    useEffect(() => {\r\n        document.addEventListener('keydown', handleKeyDown);\r\n        return () => document.removeEventListener('keydown', handleKeyDown);\r\n    } );\r\n\r\n    return props.showPopup ? (\r\n        <Modal>\r\n            <div\r\n                id=\"backDrop\"\r\n                className={classes.BackDrop}\r\n                onClick={onBackDropClicked}\r\n            >\r\n                <div className={classes.ModalPopup}\r\n                     onMouseDown={dragMouseDown}\r\n                >\r\n                    <header>{props.header}</header>\r\n                    {props.children}\r\n                </div>\r\n            </div>\r\n        </Modal>\r\n    ) : null;\r\n};\r\n\r\nexport default ModalPopup;\r\n","import { useEffect } from \"react\";\r\nimport { createPortal } from \"react-dom\";\r\n\r\nconst Modal = ({children}) => {\r\n    const mount = document.getElementById(\"modal-root\");\r\n    const el = document.createElement(\"div\");\r\n\r\n    useEffect(() => {\r\n        mount.appendChild(el);\r\n        return () => mount.removeChild(el);\r\n    }, [el, mount]);\r\n\r\n    return createPortal(children, el)\r\n};\r\n\r\nexport default Modal;\r\n","/**\r\n * Created by alexanderbol on 13/04/2017.\r\n */\r\n\r\nimport React from 'react';\r\nimport classes from './FileContentPopup.module.css';\r\nimport ModalPopup from \"../../UI/ModalPopup/ModalPopup\";\r\n\r\nconst FileContentPopup = (props) => {\r\n    const row_lines = props.content.split('\\n');\r\n    return (\r\n        <ModalPopup\r\n            showPopup={props.showFileContentPopup}\r\n            closePopup={props.closeFileContentPopup}\r\n            header=\"Log File Content\"\r\n        >\r\n            <div className={classes.FileContentPopup}>\r\n                {\r\n                    row_lines.map( line =>\r\n                        <p>{line}</p>\r\n                    )\r\n                }\r\n            </div>\r\n        </ModalPopup>\r\n    )\r\n};\r\n\r\nexport default FileContentPopup;\r\n","import React, {useRef, useEffect, useState} from 'react';\r\nimport styles from './RunningLogListItem.module.css';\r\nimport FileContentPopup from \"../../FileContentPopup/FileContentPopup\";\r\n\r\nfunction RunningLogsListItem(props) {\r\n    const [showFileContentPopup, setShowFileContentPopup] = useState(false);\r\n    const refElement = useRef();\r\n    useEffect( () => {\r\n        if (props.selected) {\r\n            scrollIntoView();\r\n        }\r\n    })\r\n\r\n    let style = props.selected ? styles.RunningLogListItemClicked : styles.RunningLogListItem;\r\n    style = props.batchFailed ? `${style} ${styles.RunningLogListItemFailed}` : style;\r\n    // let object_url = \"https://s3.console.aws.amazon.com/s3/object/acp-cloud-logs/\"+props.data.key;\r\n\r\n    const scrollIntoView = () => {\r\n        const tableBody = refElement.current.parentElement;\r\n        const table = tableBody.parentElement;\r\n        const tableClientRect = table.getBoundingClientRect();\r\n        const rowClientReact = refElement.current.getBoundingClientRect();\r\n        if (rowClientReact.bottom > tableClientRect.bottom) {\r\n            refElement.current.scrollIntoView(false);\r\n        }\r\n        if (rowClientReact.top < tableClientRect.top) {\r\n            refElement.current.scrollIntoView(true);\r\n        }\r\n    }\r\n\r\n    // Callback to display Log File Content Popup\r\n    const showLogFileContentPopup = (index) => {\r\n        setShowFileContentPopup(true)\r\n    }\r\n\r\n    const closeLogFileContentPopup = () => {\r\n        setShowFileContentPopup(false)\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <tr className={style} onClick={props.itemClicked} ref={refElement}>\r\n                <td>\r\n                    {props.data.runningDate}\r\n                </td>\r\n                <td>\r\n                    {props.data.jobName}\r\n                </td>\r\n                <td>\r\n                    {props.data.step}\r\n                </td>\r\n                <td>\r\n                    {props.data.checklist}\r\n                </td>\r\n                <td className={styles.RunningLogListItemNumeric}>\r\n                    {props.data.actionsNum}\r\n                </td>\r\n                <td className={styles.RunningLogListItemNumeric}>\r\n                    {props.data.layersNum}\r\n                </td>\r\n                <td className={styles.RunningLogListItemNumeric}>\r\n                    {props.data.batchJobsNum}\r\n                </td>\r\n                <td>\r\n                    {props.data.runningTime || \"Failed\"}\r\n                </td>\r\n                <td>\r\n                    <div onClick={showLogFileContentPopup} >\r\n                        {props.data.key}\r\n                    </div>\r\n                    {/*<a href={object_url} target=\"_blank\" rel=\"noopener noreferrer\">*/}\r\n                    {/*    {props.data.key}*/}\r\n                    {/*</a>*/}\r\n                </td>\r\n            </tr>\r\n\r\n            {showFileContentPopup ?\r\n                <FileContentPopup\r\n                    showFileContentPopup={showFileContentPopup}\r\n                    closeFileContentPopup={closeLogFileContentPopup}\r\n                    content={props.data.text}\r\n                /> : null }\r\n\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default RunningLogsListItem;\r\n","import React, {useEffect} from 'react';\r\nimport InfiniteScroll from 'react-infinite-scroll-component';\r\nimport styles from './RunningLogsListTable.module.css';\r\nimport RunningLogsListItem from \"../RunningLogListItem/RunningLogListItem\";\r\n\r\nfunction RunningLogsListTable(props) {\r\n    useEffect( () => {\r\n        const handleKeyDown = (e) => {\r\n            switch (e.code) {\r\n                case \"ArrowDown\":\r\n                    e.stopPropagation();\r\n                    e.preventDefault();\r\n                    if (props.selectedIndex < props.logsListData.length-1) {\r\n                        props.logItemClicked(props.selectedIndex+1);\r\n                    }\r\n                    break;\r\n                case \"ArrowUp\":\r\n                    e.stopPropagation();\r\n                    e.preventDefault();\r\n                    if (props.selectedIndex > 0) {\r\n                        props.logItemClicked(props.selectedIndex-1);\r\n                    }\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n        }\r\n\r\n        document.addEventListener('keydown', handleKeyDown);\r\n        return () => {\r\n            document.removeEventListener('keydown', handleKeyDown);\r\n        };\r\n    })\r\n\r\n    const fetchMoreData = () => {\r\n        // alert(\"Fetch more data\")\r\n        // props.fetchMoreData();\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <InfiniteScroll\r\n                dataLength={props.logsListData?.length}\r\n                next={fetchMoreData}\r\n                hasMore={false}\r\n            >\r\n\r\n                <table className={styles.RunningLogsListTable}>\r\n                    <thead>\r\n                    <tr>\r\n                        <th style={{width:\"15%\"}}>Running date</th>\r\n                        <th style={{width:\"25%\"}}>Job Name</th>\r\n                        <th style={{width:\"3%\"}}>Step</th>\r\n                        <th style={{width:\"15%\"}}>Checklist</th>\r\n                        <th style={{width:\"5%\"}}># Actions</th>\r\n                        <th style={{width:\"5%\"}}># Layers</th>\r\n                        <th style={{width:\"5%\"}}># ACPs</th>\r\n                        <th style={{width:\"7%\"}}>Running Time</th>\r\n                        <th style={{width:\"10%\"}}>S3 bucket key (filename)</th>\r\n                    </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {props.logsListData?.map( (data, index) =>\r\n                            <RunningLogsListItem key={index}\r\n                                                 data={data}\r\n                                                 selected={props.selectedIndex===index}\r\n                                                 batchFailed={!!data.errorTime}\r\n                                                 itemClicked={() => props.logItemClicked(index)}\r\n                            />\r\n                        )}\r\n                    </tbody>\r\n                </table>\r\n            </InfiniteScroll>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default RunningLogsListTable;\r\n","import React from 'react';\r\nimport styles from './RunningLogsList.module.css';\r\nimport RunningLogsListHeader from \"./RunningLogsListHeader/RunningLogsListHeader\";\r\nimport RunningLogsListTable from \"./RunningLogsListTable/RunningLogsListTable\";\r\n\r\nfunction RunningLogsList(props) {\r\n    return (\r\n        <div className={styles.RunningLogsList}>\r\n            <RunningLogsListHeader\r\n                awsRegion = {props.awsRegion}\r\n                loading={props.loading}\r\n                onRefreshButtonPressed={props.onRefreshButtonPressed}\r\n            />\r\n\r\n            <RunningLogsListTable\r\n                logsListData={props.logsListData}\r\n                selectedIndex={props.selectedIndex}\r\n                logItemClicked={props.logItemClicked}\r\n                fetchMoreData={props.onRefreshButtonPressed}\r\n            />\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default RunningLogsList;\r\n","import React from 'react';\r\nimport { VegaLite } from 'react-vega'\r\nimport styles from './VegaLiteChart.module.css';\r\n\r\nfunction VegaLiteChart(props) {\r\n    const spec = {\r\n        \"$schema\": \"https://vega.github.io/schema/vega-lite/v4.json\",\r\n        title: props.runData?.jobName,\r\n        data: { values: props.data },\r\n        mark: { type: \"bar\", tooltip: [] },\r\n        encoding: {\r\n            x: {\r\n                type: \"temporal\",\r\n                field: \"StartDate\",\r\n                timeUnit: \"hoursminutesseconds\"\r\n            },\r\n            x2: {\r\n                type: \"temporal\",\r\n                field: \"EndDate\",\r\n                timeUnit: \"hoursminutesseconds\"\r\n            },\r\n            y: {\r\n                type: \"nominal\",\r\n                field: \"Index\",\r\n                sort: null\r\n            },\r\n            color: { field: \"Object\" }\r\n        },\r\n        width: 800,\r\n        // height: 800,\r\n        autosize: \"fit\"\r\n    }\r\n\r\n    return (\r\n        <div className={styles.VegaLiteChart}>\r\n            {\r\n                props.data && props.runData.runningTime ?\r\n                    <VegaLite spec={spec} data={props.data}/> : null\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default VegaLiteChart;\r\n","export function getChartData(data) {\r\n    let stats = data.batch.map(action => {\r\n        let timestamp = data.acpTime.find(\r\n            a => a.Stage === action.Stage && a.Index === action.StageIndex\r\n        );\r\n        return {\r\n            Object: timestamp.Succeed ? \"Acp\" : \"Acp Failed\",\r\n            Stage: action.Stage,\r\n            Index: action.Stage + '_' + action.StageIndex,\r\n            ActNum: action.ActNum,\r\n            Name: action.AnalysisName,\r\n            Layer: action.LayerName,\r\n            ActParam: action.ActParam,\r\n            BeginNf: action.BeginNf,\r\n            EndNf: action.EndNf,\r\n            ContourGroupId: action.ContourGroupId,\r\n            ContourGroupNum: action.ContourGroupNum,\r\n            StartDate: timestamp ? timestamp.StartTime : \"\",\r\n            EndDate: timestamp ? timestamp.CompleteTime : \"\",\r\n            Time: time_diff(timestamp.StartTime, timestamp.CompleteTime)\r\n        };\r\n    });\r\n\r\n    let uploadObj = {\r\n        Object: \"Upload\",\r\n        Name: \"Upload\",\r\n        Index: -1,\r\n        StartDate: data.uploadTime.StartTime,\r\n        EndDate: data.uploadTime.CompleteTime\r\n    };\r\n\r\n    let splitterObj = {\r\n        Object: \"Splitter\",\r\n        Name: \"Splitter\",\r\n        Index: 0,\r\n        StartDate: data.splitterTime.StartTime,\r\n        EndDate: data.splitterTime.CompleteTime\r\n    };\r\n\r\n    let mergerObj;\r\n    if (data.mergerTime.StartTime && data.mergerTime.CompleteTime) {\r\n        mergerObj = {\r\n            Object: \"Merger\",\r\n            Name: \"Merger\",\r\n            Index: stats.length + 1,\r\n            StartDate: data.mergerTime.StartTime,\r\n            EndDate: data.mergerTime.CompleteTime\r\n        };\r\n    }\r\n\r\n    let downloadObj;\r\n    if (data.downloadTime.StartTime && data.downloadTime.CompleteTime) {\r\n        downloadObj = {\r\n            Object: \"Download\",\r\n            Name: \"Download\",\r\n            Index: stats.length + 2,\r\n            StartDate: data.downloadTime.StartTime,\r\n            EndDate: data.downloadTime.CompleteTime\r\n        };\r\n    }\r\n\r\n    stats = [uploadObj, splitterObj, ...stats];\r\n    if (mergerObj) stats = [...stats, mergerObj];\r\n    if (downloadObj) stats = [...stats, downloadObj];\r\n\r\n    return stats;\r\n}\r\n\r\n\r\nexport function getListData(localData) {\r\n    const actionsNum = localData?.batch[localData.batch.length - 1].ActNum;\r\n    const layersNum = new Set(localData?.batch.map(action => action.LayerName)).size;\r\n    return {\r\n        runningDate: localData?.runningDate,\r\n        jobName: localData?.jobName,\r\n        step: localData?.batch[0].StepName,\r\n        checklist: localData?.batch[0].ChecklistName,\r\n        actionsNum: actionsNum,\r\n        layersNum: layersNum,\r\n        runningTime: localData?.runningTime,\r\n        batchJobsNum: localData?.batch.length,\r\n        key: localData?.key,\r\n        errorTime: localData?.errorTime,\r\n        text: localData?.text\r\n    }\r\n}\r\n\r\n// function time_diff(start_time, complete_time) {\r\n//     let start = start_time.split(':').map(t => Number(t));\r\n//     let start_sec = start[0] * 3600 + start[1] * 60 + start[2];\r\n//     let complete = complete_time.split(':').map(t => Number(t));\r\n//     let complete_sec = complete[0] * 3600 + complete[1] * 60 + complete[2];\r\n//     let diff_sec = complete_sec - start_sec;\r\n//     return diff_sec;\r\n// }\r\n\r\nfunction time_diff(start_time, complete_time) {\r\n    return msecToHHMMSS(complete_time - start_time);\r\n}\r\n\r\nfunction msecToHHMMSS(time) {\r\n    return new Date(time).toISOString().substr(11, 8);\r\n}\r\n","export function parse(text) {\r\n    const row_lines = text.split('\\n');\r\n    const arrayOfTimestamps = timestamps(row_lines);\r\n    const errorTimeString = errorTime(row_lines, arrayOfTimestamps);\r\n    return {\r\n        runningDate: runningDate(arrayOfTimestamps),\r\n        runningTime: runningTime(arrayOfTimestamps, errorTimeString),\r\n        jobName: jobName(row_lines),\r\n        batch: batch(arrayOfTimestamps),\r\n        uploadTime: uploadTime(arrayOfTimestamps),\r\n        splitterTime: splitterTime(arrayOfTimestamps),\r\n        acpTime: acpTime(row_lines, arrayOfTimestamps),\r\n        mergerTime: mergerTime(arrayOfTimestamps),\r\n        downloadTime: downloadTime(arrayOfTimestamps),\r\n        errorTime: errorTimeString\r\n    };\r\n}\r\n\r\nfunction jobName(row_lines) {\r\n    const job_line = row_lines.filter(line => line.match(\"Job:\"))[0];\r\n    const job_name = job_line.split(' ')[1];\r\n    return job_name;\r\n}\r\n\r\nfunction runningDate(arrayOfTimestamps) {\r\n    let job_started = arrayOfTimestamps.filter(\r\n        line => line.message === \"Ready for commands\"\r\n    )[0];\r\n    return job_started.utcDate.toLocaleString();\r\n}\r\n\r\n// function runningDate(row_lines) {\r\n//     let arrayOfLines = row_lines.filter(line => line.match(\"time\"));\r\n//     let splitArray = arrayOfLines[0].split(' ');\r\n//     let [day, month, year] = splitArray[1].split(':')[1].split('/');\r\n//     if (day.length > 2) day = day.substr(1);\r\n//     let [hour, min] = splitArray[2].split(':');\r\n//     if (hour.trim().length > 2) hour = hour.substr(1);\r\n//     if (min.trim().length > 2) min = min.substr(1);\r\n//     return new Date(Date.UTC(year, month - 1, day, hour, min)).toUTCString();\r\n// }\r\n\r\nfunction runningTime(arrayOfTimestamps, errorTime) {\r\n    let job_started = arrayOfTimestamps.filter(\r\n        line => line.message === \"Ready for commands\"\r\n    )[0];\r\n    let start_time = job_started.utcDate;\r\n    let job_ended_arr = arrayOfTimestamps.filter(\r\n        line => line.message === \"Job is ready\"\r\n    );\r\n    let end_time = job_ended_arr.length > 0 ? job_ended_arr[0].utcDate : errorTime;\r\n\r\n    return end_time ? time_diff(start_time, end_time) : \"\";\r\n}\r\n\r\nfunction batch(arrayOfTimestamps) {\r\n    let batchObjectList = arrayOfTimestamps.filter(d => d.type === \"Batch\");\r\n    let messageList = batchObjectList.map(batchObject =>\r\n        batchObject.message.slice(2)\r\n    );\r\n    let message = messageList.join(\"\");\r\n    return JSON.parse(message);\r\n}\r\n\r\nfunction uploadTime(arrayOfTimestamps) {\r\n    let uploadTime = {\r\n        StartTime: arrayOfTimestamps.find(\r\n            d => d.object === \"WebClient\" && d.message === \"Job was registered\"\r\n        ).utcDate,\r\n        CompleteTime: arrayOfTimestamps.find(\r\n            d => d.object === \"WebClient\" && d.message === \"After send\"\r\n        ).utcDate\r\n    };\r\n    return uploadTime;\r\n}\r\n\r\nfunction splitterTime(arrayOfTimestamps) {\r\n    let splitter = arrayOfTimestamps.filter(d => d.object === \"Splitter\")\r\n    let s = {\r\n        StartTime: splitter.find(s => s.message === \"Splitter started\").utcDate,\r\n        CompleteTime: splitter.find(s => s.message === \"End of Split\").utcDate\r\n    };\r\n    return s;\r\n}\r\n\r\nfunction mergerTime(arrayOfTimestamps) {\r\n    let merger = arrayOfTimestamps.filter(d => d.object === \"Merger\");\r\n    let mergerStartMessage = merger.find(s => s.message === \"Preparing job for merge\");\r\n    let mergerCompleteMessage = merger.find(s => s.message === \"Moving Job to S3\");\r\n\r\n    let s = {\r\n        StartTime: mergerStartMessage ? mergerStartMessage.utcDate : null,\r\n        CompleteTime: mergerCompleteMessage ? mergerCompleteMessage.utcDate : null\r\n    };\r\n    return s;\r\n}\r\n\r\nfunction downloadTime(arrayOfTimestamps) {\r\n    let downloadStartMessage = arrayOfTimestamps.find(d => d.object === \"WebClient\" && d.message === \"Download Data\");\r\n    let downloadCompleteMessage = arrayOfTimestamps.find(d => d.object === \"WebClient\" && d.message === \"Job is ready\");\r\n    let downloadTime = {\r\n        StartTime: downloadStartMessage ? downloadStartMessage.utcDate : null,\r\n        CompleteTime: downloadCompleteMessage ? downloadCompleteMessage.utcDate : null\r\n    };\r\n    return downloadTime;\r\n}\r\n\r\nfunction acpTime(row_lines, arrayOfTimestamps) {\r\n    let errorTimeStr = errorTime(row_lines, arrayOfTimestamps);\r\n    let acp = arrayOfTimestamps.filter(d => (d.type === \"Progress\" || d.type === \"Info\") && d.object === \"ACP\");\r\n    let acp_transformed = acp.map(action => {\r\n        let message = action.message.split(' ');\r\n        return {\r\n            Time: action.utcDate,\r\n            Step: message[0],\r\n            Stage: message[1].split(':')[1],\r\n            Index: Number(message[2].split(':')[1]) + 1\r\n        };\r\n    });\r\n    let acp_started = acp_transformed\r\n        .filter(action => action.Step === \"Starting\")\r\n        .map(action => {\r\n            return {\r\n                Stage: action.Stage,\r\n                Index: action.Index,\r\n                StartTime: action.Time\r\n            };\r\n        });\r\n    let acp_completed = acp_transformed\r\n        .filter(action => action.Step === \"Completing\")\r\n        .map(action => {\r\n            return {\r\n                Stage: action.Stage,\r\n                Index: action.Index,\r\n                CompleteTime: action.Time\r\n            };\r\n        });\r\n    let acp_timestamp = acp_started.map(action => {\r\n        let completeTimeMessage = acp_completed.find(\r\n            c => c.Stage === action.Stage && c.Index === action.Index\r\n        );\r\n\r\n        return {\r\n            Stage: action.Stage,\r\n            Index: action.Index,\r\n            StartTime: action.StartTime,\r\n            CompleteTime: completeTimeMessage ? completeTimeMessage.CompleteTime : errorTimeStr,\r\n            Succeed: !!completeTimeMessage\r\n        };\r\n    });\r\n    return acp_timestamp;\r\n}\r\n\r\nfunction errorTime(row_lines, arrayOfTimestamps) {\r\n    let errorMessage = arrayOfTimestamps.find(\r\n        d => d.object === \"WebClient\" && d.type === \"ERROR\"\r\n    );\r\n\r\n    let errorTime = null;\r\n    if (errorMessage) {\r\n        errorTime = errorMessage.utcDate\r\n    }\r\n    // else {\r\n    //     let ping_lines = row_lines\r\n    //         .filter(line => line.match(\"I am alive\"));\r\n    //     errorTime = ping_lines.length > 0 ? JSON.parse(ping_lines[ping_lines.length - 1]).Time : null;\r\n    // }\r\n    return errorTime;\r\n}\r\n\r\nfunction timestamps(row_lines) {\r\n    let arrayOfLines = row_lines.filter(line => line.match(\"time\"));\r\n    let tmpArrayOfLines = [...arrayOfLines];\r\n    tmpArrayOfLines.splice(0, 1);\r\n    let arrayOfTimestamps = [];\r\n    let timeStamp;\r\n    let utcDate;\r\n    for (let i = 0; i < tmpArrayOfLines.length; i++) {\r\n        try {\r\n            timeStamp = JSON.parse(tmpArrayOfLines[i]);\r\n            if (timeStamp.message === \"Submit Splitter\") continue; // bad format\r\n            utcDate = timeStampToDate(timeStamp.time);\r\n            arrayOfTimestamps.push({ utcDate, ...timeStamp });\r\n        } catch (e) {\r\n            return [i, tmpArrayOfLines[i]];\r\n        }\r\n    }\r\n    return arrayOfTimestamps;\r\n}\r\n\r\nfunction time_diff(start_time, complete_time) {\r\n    return msecToHHMMSS(complete_time - start_time);\r\n}\r\n\r\nfunction msecToHHMMSS(time) {\r\n    return new Date(time).toISOString().substr(11, 8);\r\n}\r\n\r\nfunction timeStampToDate(timeStr) {\r\n    let splitArray = timeStr.split(', ');\r\n    let [month, day, year] = splitArray[0].split('/');\r\n    let [hour, min, sec] = splitArray[1].split(':');\r\n    return new Date(Date.UTC(year, month - 1, day, hour, min, sec)); // .toUTCString();\r\n}\r\n","import React, {useEffect, useState} from 'react';\r\nimport styles from './MainComponent.module.css';\r\nimport RunningLogsList from \"../RunningLogsList/RunningLogsList\";\r\nimport VegaLiteChart from \"../VegaLiteChart/VegaLiteChart\";\r\nimport {getChartData, getListData} from \"../../models/logData\";\r\nimport {parse} from \"../../models/logFileParser\";\r\n\r\nfunction MainComponent(props) {\r\n    const [logDataArray, setLogDataArray] = useState([]);\r\n    const [index, setIndex] = useState(0);\r\n    const [loading, setLoading] = useState(false);\r\n\r\n    const numInChunk = 1000;\r\n    let logsListData = [];\r\n    let chartData = null;\r\n    let runData = null;\r\n    let awsRegion = \"eu-central-1\";\r\n    let api_uri = \"https://bah2tkltg6.execute-api.eu-central-1.amazonaws.com/test/list\";\r\n\r\n    // Fetch keys list (filenames) from s3 bucket using given api\r\n    const fetchKeysList = async() => {\r\n        let response = await fetch(api_uri);\r\n        let json = await response.json();\r\n        let keysList = JSON.parse(json.body).keys;\r\n        return keysList;\r\n    }\r\n\r\n    // Fetch content of files from s3 bucket by given list of keys\r\n    const fetchDataByKeysList = async (keysList) => {\r\n        let promises = keysList.map (key => fetch(`${api_uri}/${key}`))\r\n        let respArray = await Promise.all(promises)\r\n        let json_promises = respArray.map(resp => resp.json())\r\n        let textArray = await Promise.all(json_promises);\r\n        let dataArray = textArray.map( e => parse(e.text));\r\n        dataArray.forEach( (data,i) => data.key = keysList[i] )\r\n        dataArray.forEach( (data,i) => data.text = textArray[i].text )\r\n        return dataArray;\r\n    }\r\n\r\n    // const fetchAllData = async () => {\r\n    //     setLoading(true);\r\n    //\r\n    //     let keysList = await fetchKeysList(api_uri);\r\n    //     let localDataArray = await fetchDataByKeysList(keysList);\r\n    //\r\n    //     localDataArray.sort(function(a,b){\r\n    //         return new Date(b.runningDate) - new Date(a.runningDate);\r\n    //     });\r\n    //\r\n    //     // If all data loaded, render list and select first row\r\n    //     if (localDataArray.length > 0) {\r\n    //         setLoading(false);\r\n    //         setLogDataArray(localDataArray);             // trigger rendering\r\n    //     }\r\n    // };\r\n\r\n    // const fetchNewData = async () => {\r\n    //     setLoading(true);\r\n    //\r\n    //     let keysList = await fetchKeysList(api_uri);\r\n    //     let filteredKeysList = filterNewKeysList(keysList);\r\n    //\r\n    //     let newDataArray = await fetchDataByKeysList(filteredKeysList);\r\n    //\r\n    //     let localDataArray = logDataArray.concat(newDataArray);\r\n    //\r\n    //     localDataArray.sort(function(a,b){\r\n    //         return new Date(b.runningDate) - new Date(a.runningDate);\r\n    //     });\r\n    //\r\n    //     // If all data loaded, render list and select first row\r\n    //     if (localDataArray.length > 0) {\r\n    //         setLoading(false);\r\n    //         setLogDataArray(localDataArray);             // trigger rendering\r\n    //     }\r\n    // }\r\n\r\n    const fetchMoreData = async () => {\r\n        setLoading(true);\r\n\r\n        let keysList = await fetchKeysList(api_uri);\r\n        let filteredKeysList = filterNewKeysList(keysList);\r\n        let chunkOfKeysList = filteredKeysList.slice(0,numInChunk);\r\n        let newDataArray = await fetchDataByKeysList(chunkOfKeysList);\r\n\r\n        let localDataArray = logDataArray.concat(newDataArray);\r\n\r\n        localDataArray.sort(function(a,b){\r\n            return new Date(b.runningDate) - new Date(a.runningDate);\r\n        });\r\n\r\n        // If all data loaded, render list and select first row\r\n        if (localDataArray.length > 0) {\r\n            setLoading(false);\r\n            setLogDataArray(localDataArray);             // trigger rendering\r\n        }\r\n    }\r\n\r\n    // Filter keysList: keep only new keys that do not exist in logDataArray\r\n    const filterNewKeysList = (keysList) => {\r\n        let filteredKeyList = keysList\r\n            .filter( key => !logDataArray.some( data => data.key === key))\r\n        return filteredKeyList;\r\n    }\r\n\r\n    const syncData = () => {\r\n        fetchMoreData()\r\n        // setLoading(true)\r\n    }\r\n\r\n    // Effect to load all data from AWS s3 bucket after component mounted\r\n    useEffect( () => {\r\n        if (logDataArray.length === 0) {\r\n            fetchMoreData();\r\n        }\r\n    });\r\n\r\n    // Callback to set new chart data and update selected index\r\n    const logItemClicked = (index) => {\r\n        setIndex(index);                                     // trigger rendering\r\n    }\r\n\r\n    // Setup data before rendering\r\n    if (logDataArray.length > 0) {\r\n        logsListData = logDataArray.map(data => getListData(data))\r\n\r\n        let localData = logDataArray[index];\r\n        try {\r\n            chartData = getChartData(localData);\r\n        }\r\n        catch (e) {\r\n            chartData = null;\r\n        }\r\n\r\n        runData = getListData(localData);\r\n    }\r\n\r\n    return (\r\n        <main className={styles.MainComponent}>\r\n            <RunningLogsList\r\n                awsRegion = {awsRegion}\r\n                logsListData={logsListData}\r\n                selectedIndex={index}\r\n                loading={loading}\r\n                logItemClicked={logItemClicked}\r\n                onRefreshButtonPressed={syncData}\r\n            />\r\n            <VegaLiteChart data={chartData} runData={runData} />\r\n        </main>\r\n    );\r\n}\r\n\r\nexport default MainComponent;\r\n","import React from 'react';\r\nimport MainComponent from \"./components/MainComponent/MainComponent\";\r\nimport './App.css';\r\n\r\nfunction App() {\r\n    return (\r\n        <div className=\"App\">\r\n            <div className=\"content\">\r\n                <h1>DFM Cloud Monitor</h1>\r\n                <hr />\r\n                <MainComponent />\r\n                <hr />\r\n            </div>\r\n            <footer className=\"footer\">\r\n                <p style={{fontSize:\"12px\"}}>Alex Bol 2020</p>\r\n            </footer>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"RunningLogListItem\":\"RunningLogListItem_RunningLogListItem__1S2n8\",\"RunningLogListItemClicked\":\"RunningLogListItem_RunningLogListItemClicked__14z5x\",\"RunningLogListItemFailed\":\"RunningLogListItem_RunningLogListItemFailed__3XS1X\",\"RunningLogListItemNumeric\":\"RunningLogListItem_RunningLogListItemNumeric__24czR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"BackDrop\":\"ModalPopup_BackDrop__7hFGQ\",\"ModalPopup\":\"ModalPopup_ModalPopup__23EZs\",\"fadeIn\":\"ModalPopup_fadeIn__3Cpaz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"MainComponent\":\"MainComponent_MainComponent__v6Cpx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"RunningLogsList\":\"RunningLogsList_RunningLogsList__3FvQO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Button\":\"Button_Button__3OWJQ\",\"Icon\":\"Button_Icon__2HL0R\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"RunningLogsListHeader\":\"RunningLogsListHeader_RunningLogsListHeader__wNA9D\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"RunningLogsListTable\":\"RunningLogsListTable_RunningLogsListTable__3oTDV\",\"fadeIn\":\"RunningLogsListTable_fadeIn__3pIZA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"FileContentPopup\":\"FileContentPopup_FileContentPopup__3gizv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"VegaLiteChart\":\"VegaLiteChart_VegaLiteChart__2LGfz\"};"],"sourceRoot":""}