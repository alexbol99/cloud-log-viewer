{"version":3,"sources":["UI/Button/Button.js","components/RunningLogsList/RunningLogsListHeader/RunningLogsListHeader.js","UI/ModalPopup/ModalPopup.js","UI/Modal.js","components/FileContentPopup/FileContentPopup.js","components/RunningLogsList/RunningLogListItem/RunningLogListItem.js","components/RunningLogsList/RunningLogsListTable/RunningLogsListTable.js","components/RunningLogsList/RunningLogsList.js","components/VegaLiteChart/VegaLiteChart.js","models/logData.js","models/logParser.js","components/MainComponent/MainComponent.js","App.js","serviceWorker.js","index.js","components/RunningLogsList/RunningLogListItem/RunningLogListItem.module.css","components/RunningLogsList/RunningLogsListTable/RunningLogsListTable.module.css","UI/ModalPopup/ModalPopup.module.css","components/MainComponent/MainComponent.module.css","components/RunningLogsList/RunningLogsList.module.css","UI/Button/Button.module.css","components/RunningLogsList/RunningLogsListHeader/RunningLogsListHeader.module.css","components/FileContentPopup/FileContentPopup.module.css","components/VegaLiteChart/VegaLiteChart.module.css"],"names":["button","props","title","onClick","className","classes","Button","icon","size","spin","RunningLogsListHeader","offsetX","offsetY","dragX","dragY","styles","href","target","rel","faSyncAlt","loading","onRefreshButtonPressed","Modal","children","mount","document","getElementById","el","createElement","useEffect","appendChild","removeChild","createPortal","ModalPopup","handleKeyDown","ev","code","closePopup","elementDrag","window","event","clientX","clientY","element","style","top","offsetTop","left","offsetLeft","closeDragElement","onmouseup","onmousemove","addEventListener","removeEventListener","showPopup","id","BackDrop","onMouseDown","header","FileContentPopup","row_lines","content","split","showFileContentPopup","closeFileContentPopup","map","line","RunningLogsListItem","useState","setShowFileContentPopup","refElement","useRef","selected","scrollIntoView","RunningLogListItemClicked","RunningLogListItem","batchFailed","RunningLogListItemFailed","tableClientRect","current","parentElement","getBoundingClientRect","rowClientReact","bottom","Fragment","itemClicked","ref","data","runningDate","jobName","step","checklist","RunningLogListItemNumeric","actionsNum","layersNum","batchJobsNum","runningTime","index","key","text","RunningLogsListTable","e","stopPropagation","preventDefault","selectedIndex","logsListData","length","logItemClicked","RunningLogsList","dataLength","next","hasMore","errorTime","VegaLiteChart","spec","runData","values","mark","type","tooltip","encoding","x","field","timeUnit","x2","y","sort","color","width","autosize","VegaLite","getListData","localData","batch","ActNum","Set","action","LayerName","StepName","ChecklistName","time_diff","start_time","complete_time","start","t","Number","start_sec","complete","parse","arrayOfTimestamps","arrayOfLines","filter","match","tmpArrayOfLines","splice","JSON","timestamps","errorTimeString","uploadTime","splitterTime","acpTime","mergerTime","downloadTime","splitArray","day","month","year","substr","hour","min","Date","UTC","toUTCString","time","job_started_line","job_ended_line","end_time","toISOString","batchObject","d","message","StartTime","find","object","CompleteTime","splitter","toLocal","s","merger","mergerStartMessage","mergerCompleteMessage","downloadStartMessage","downloadCompleteMessage","errorTimeStr","acp_transformed","Time","Step","Stage","Index","acp_started","acp_completed","completeTimeMessage","c","Succeed","errorMessage","hhmmss","HH","MM","SS","join","MainComponent","logDataArray","setLogDataArray","setIndex","setLoading","chartData","loadFiles","a","logs_api_uri","fetch","response","json","resp_json_str","keys_list","body","keys","promises","Promise","all","respArray","json_promises","resp","textArray","dataArray","forEach","i","b","fetchData","localDataArray","mergerObj","downloadObj","stats","timestamp","StageIndex","Object","Name","AnalysisName","Layer","ActParam","BeginNf","EndNf","StartDate","EndDate","uploadObj","splitterObj","getChartData","App","fontSize","Boolean","location","hostname","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","module","exports"],"mappings":"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","file":"static/js/main.24066de6.chunk.js","sourcesContent":["import React from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport classes from \"./Button.module.css\";\r\n\r\nconst button = (props) => {\r\n    return (\r\n        <button title={props.title} onClick={props.onClick} className={classes.Button}>\r\n            <FontAwesomeIcon icon={props.icon} size=\"2x\" spin={props.spin}  />\r\n        </button>\r\n    );\r\n};\r\n\r\nexport default button;","import React from 'react';\r\nimport Button from '../../../UI/Button/Button';\r\nimport { faSyncAlt } from '@fortawesome/free-solid-svg-icons'\r\n\r\nimport styles from './RunningLogsListHeader.module.css'\r\n\r\nfunction RunningLogsListHeader(props) {\r\n    return (\r\n        <header className={styles.RunningLogsListHeader}>\r\n            <span>Amazon s3 ></span>\r\n            <span>\r\n                <a href=\"https://s3.console.aws.amazon.com/s3/buckets/acp-cloud-logs/?region=eu-central-1&tab=overview#\"\r\n                   target=\"_blank\" rel=\"noopener noreferrer\">\r\n                    acp-cloud-logs\r\n                </a>\r\n            </span>\r\n            <span>\r\n                <Button\r\n                    title=\"Reload logs from S3 bucket\"\r\n                    icon={faSyncAlt}\r\n                    spin={props.loading}\r\n                    onClick={props.onRefreshButtonPressed}\r\n                />\r\n            </span>\r\n        </header>\r\n    );\r\n}\r\n\r\nexport default RunningLogsListHeader;\r\n","import React, { useEffect } from \"react\";\r\nimport Modal from \"../Modal\";\r\nimport classes from \"./ModalPopup.module.css\";\r\n\r\nlet offsetX;\r\nlet offsetY;\r\nlet dragX;\r\nlet dragY;\r\n\r\nconst ModalPopup = (props) => {\r\n\r\n    const onBackDropClicked = (ev) => {\r\n        if (ev.target.id === \"backDrop\") {\r\n            props.closePopup();\r\n        }\r\n    };\r\n\r\n    const handleKeyDown = (ev) => {\r\n        if (ev.code === \"Escape\") {\r\n            props.closePopup();\r\n        }\r\n    };\r\n\r\n    const elementDrag = (ev) => {\r\n        ev = ev || window.event;\r\n        // calculate the new cursor position:\r\n        offsetX = dragX - ev.clientX;\r\n        offsetY = dragY - ev.clientY;\r\n        dragX = ev.clientX;\r\n        dragY = ev.clientY;\r\n        // set the element's new position:\r\n        let element = ev.target;\r\n        element.style.top = (element.offsetTop - offsetY) + \"px\";\r\n        element.style.left = (element.offsetLeft - offsetX) + \"px\";\r\n    };\r\n\r\n    const closeDragElement = (ev) => {\r\n        /* stop moving when mouse button is released:*/\r\n        ev.target.onmouseup = null;\r\n        ev.target.onmousemove = null;\r\n    };\r\n\r\n    const dragMouseDown = (ev) => {\r\n        ev = ev || window.event;\r\n        // get the mouse cursor position at startup:\r\n        dragX = ev.clientX;\r\n        dragY = ev.clientY;\r\n        ev.target.onmouseup = closeDragElement;\r\n        // call a function whenever the cursor moves:\r\n        ev.target.onmousemove = elementDrag;\r\n    };\r\n\r\n    useEffect(() => {\r\n        document.addEventListener('keydown', handleKeyDown);\r\n        return () => document.removeEventListener('keydown', handleKeyDown);\r\n    } );\r\n\r\n    return props.showPopup ? (\r\n        <Modal>\r\n            <div\r\n                id=\"backDrop\"\r\n                className={classes.BackDrop}\r\n                onClick={onBackDropClicked}\r\n            >\r\n                <div className={classes.ModalPopup}\r\n                     onMouseDown={dragMouseDown}\r\n                >\r\n                    <header>{props.header}</header>\r\n                    {props.children}\r\n                </div>\r\n            </div>\r\n        </Modal>\r\n    ) : null;\r\n};\r\n\r\nexport default ModalPopup;\r\n","import { useEffect } from \"react\";\r\nimport { createPortal } from \"react-dom\";\r\n\r\nconst Modal = ({children}) => {\r\n    const mount = document.getElementById(\"modal-root\");\r\n    const el = document.createElement(\"div\");\r\n\r\n    useEffect(() => {\r\n        mount.appendChild(el);\r\n        return () => mount.removeChild(el);\r\n    }, [el, mount]);\r\n\r\n    return createPortal(children, el)\r\n};\r\n\r\nexport default Modal;\r\n","/**\r\n * Created by alexanderbol on 13/04/2017.\r\n */\r\n\r\nimport React from 'react';\r\nimport classes from './FileContentPopup.module.css';\r\nimport ModalPopup from \"../../UI/ModalPopup/ModalPopup\";\r\n\r\nconst FileContentPopup = (props) => {\r\n    const row_lines = props.content.split('\\n');\r\n    return (\r\n        <ModalPopup\r\n            showPopup={props.showFileContentPopup}\r\n            closePopup={props.closeFileContentPopup}\r\n            header=\"Log File Content\"\r\n        >\r\n            <div className={classes.FileContentPopup}>\r\n                {\r\n                    row_lines.map( line =>\r\n                        <p>{line}</p>\r\n                    )\r\n                }\r\n            </div>\r\n        </ModalPopup>\r\n    )\r\n};\r\n\r\nexport default FileContentPopup;\r\n","import React, {useRef, useEffect, useState} from 'react';\r\nimport styles from './RunningLogListItem.module.css';\r\nimport FileContentPopup from \"../../FileContentPopup/FileContentPopup\";\r\n\r\nfunction RunningLogsListItem(props) {\r\n    const [showFileContentPopup, setShowFileContentPopup] = useState(false);\r\n    const refElement = useRef();\r\n    useEffect( () => {\r\n        if (props.selected) {\r\n            scrollIntoView();\r\n        }\r\n    })\r\n\r\n    let style = props.selected ? styles.RunningLogListItemClicked : styles.RunningLogListItem;\r\n    style = props.batchFailed ? `${style} ${styles.RunningLogListItemFailed}` : style;\r\n    // let object_url = \"https://s3.console.aws.amazon.com/s3/object/acp-cloud-logs/\"+props.data.key;\r\n\r\n    const scrollIntoView = () => {\r\n        const tableBody = refElement.current.parentElement;\r\n        const table = tableBody.parentElement;\r\n        const tableClientRect = table.getBoundingClientRect();\r\n        const rowClientReact = refElement.current.getBoundingClientRect();\r\n        if (rowClientReact.bottom > tableClientRect.bottom) {\r\n            refElement.current.scrollIntoView(false);\r\n        }\r\n        if (rowClientReact.top < tableClientRect.top) {\r\n            refElement.current.scrollIntoView(true);\r\n        }\r\n    }\r\n\r\n    // Callback to display Log File Content Popup\r\n    const showLogFileContentPopup = (index) => {\r\n        setShowFileContentPopup(true)\r\n    }\r\n\r\n    const closeLogFileContentPopup = () => {\r\n        setShowFileContentPopup(false)\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <tr className={style} onClick={props.itemClicked} ref={refElement}>\r\n                <td>\r\n                    {props.data.runningDate}\r\n                </td>\r\n                <td>\r\n                    {props.data.jobName}\r\n                </td>\r\n                <td>\r\n                    {props.data.step}\r\n                </td>\r\n                <td>\r\n                    {props.data.checklist}\r\n                </td>\r\n                <td className={styles.RunningLogListItemNumeric}>\r\n                    {props.data.actionsNum}\r\n                </td>\r\n                <td className={styles.RunningLogListItemNumeric}>\r\n                    {props.data.layersNum}\r\n                </td>\r\n                <td className={styles.RunningLogListItemNumeric}>\r\n                    {props.data.batchJobsNum}\r\n                </td>\r\n                <td>\r\n                    {props.data.runningTime || \"Failed\"}\r\n                </td>\r\n                <td>\r\n                    <div onClick={showLogFileContentPopup} >\r\n                        {props.data.key}\r\n                    </div>\r\n                    {/*<a href={object_url} target=\"_blank\" rel=\"noopener noreferrer\">*/}\r\n                    {/*    {props.data.key}*/}\r\n                    {/*</a>*/}\r\n                </td>\r\n            </tr>\r\n\r\n            {showFileContentPopup ?\r\n                <FileContentPopup\r\n                    showFileContentPopup={showFileContentPopup}\r\n                    closeFileContentPopup={closeLogFileContentPopup}\r\n                    content={props.data.text}\r\n                /> : null }\r\n\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default RunningLogsListItem;\r\n","import React, {useEffect} from 'react';\r\nimport InfiniteScroll from 'react-infinite-scroll-component';\r\nimport styles from './RunningLogsListTable.module.css';\r\nimport RunningLogsListItem from \"../RunningLogListItem/RunningLogListItem\";\r\n\r\nfunction RunningLogsListTable(props) {\r\n    useEffect( () => {\r\n        const handleKeyDown = (e) => {\r\n            switch (e.code) {\r\n                case \"ArrowDown\":\r\n                    e.stopPropagation();\r\n                    e.preventDefault();\r\n                    if (props.selectedIndex < props.logsListData.length-1) {\r\n                        props.logItemClicked(props.selectedIndex+1);\r\n                    }\r\n                    break;\r\n                case \"ArrowUp\":\r\n                    e.stopPropagation();\r\n                    e.preventDefault();\r\n                    if (props.selectedIndex > 0) {\r\n                        props.logItemClicked(props.selectedIndex-1);\r\n                    }\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n        }\r\n\r\n        document.addEventListener('keydown', handleKeyDown);\r\n        return () => {\r\n            document.removeEventListener('keydown', handleKeyDown);\r\n        };\r\n    })\r\n\r\n    const fetchMoreData = () => {\r\n        // alert(\"Fetch more data\")\r\n    }\r\n\r\n    return (\r\n        <div className={styles.RunningLogsList}>\r\n            <InfiniteScroll\r\n                dataLength={props.logsListData?.length}\r\n                next={fetchMoreData}\r\n                hasMore={false}\r\n            >\r\n\r\n                <table className={styles.RunningLogsListTable}>\r\n                    <thead>\r\n                    <tr>\r\n                        <th>Running date</th>\r\n                        <th>Job Name</th>\r\n                        <th>Step</th>\r\n                        <th>Checklist</th>\r\n                        <th># Actions</th>\r\n                        <th># Layers</th>\r\n                        <th># ACPs</th>\r\n                        <th>Running Time</th>\r\n                        <th>S3 bucket key (filename)</th>\r\n                    </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {props.logsListData?.map( (data, index) =>\r\n                            <RunningLogsListItem key={index}\r\n                                                 data={data}\r\n                                                 selected={props.selectedIndex===index}\r\n                                                 batchFailed={!!data.errorTime}\r\n                                                 itemClicked={() => props.logItemClicked(index)}\r\n                            />\r\n                        )}\r\n                    </tbody>\r\n                </table>\r\n            </InfiniteScroll>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default RunningLogsListTable;\r\n","import React from 'react';\r\nimport styles from './RunningLogsList.module.css';\r\nimport RunningLogsListHeader from \"./RunningLogsListHeader/RunningLogsListHeader\";\r\nimport RunningLogsListTable from \"./RunningLogsListTable/RunningLogsListTable\";\r\n\r\nfunction RunningLogsList(props) {\r\n    return (\r\n        <div className={styles.RunningLogsList}>\r\n            <RunningLogsListHeader\r\n                loading={props.loading}\r\n                onRefreshButtonPressed={props.onRefreshButtonPressed}\r\n            />\r\n\r\n            <RunningLogsListTable\r\n                logsListData={props.logsListData}\r\n                selectedIndex={props.selectedIndex}\r\n                logItemClicked={props.logItemClicked}\r\n            />\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default RunningLogsList;\r\n","import React from 'react';\r\nimport { VegaLite } from 'react-vega'\r\nimport styles from './VegaLiteChart.module.css';\r\n\r\nfunction VegaLiteChart(props) {\r\n    const spec = {\r\n        \"$schema\": \"https://vega.github.io/schema/vega-lite/v4.json\",\r\n        title: props.runData?.jobName,\r\n        data: { values: props.data },\r\n        mark: { type: \"bar\", tooltip: [] },\r\n        encoding: {\r\n            x: {\r\n                type: \"temporal\",\r\n                field: \"StartDate\",\r\n                timeUnit: \"hoursminutesseconds\"\r\n            },\r\n            x2: {\r\n                type: \"temporal\",\r\n                field: \"EndDate\",\r\n                timeUnit: \"hoursminutesseconds\"\r\n            },\r\n            y: {\r\n                type: \"nominal\",\r\n                field: \"Index\",\r\n                sort: null\r\n            },\r\n            color: { field: \"Object\" }\r\n        },\r\n        width: 800,\r\n        // height: 800,\r\n        autosize: \"fit\"\r\n    }\r\n\r\n    return (\r\n        <div className={styles.VegaLiteChart}>\r\n            {\r\n                props.data && props.runData.runningTime ?\r\n                    <VegaLite spec={spec} data={props.data}/> : null\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default VegaLiteChart;\r\n","export function getChartData(data) {\r\n    let stats = data.batch.map(action => {\r\n        let timestamp = data.acpTime.find(\r\n            a => a.Stage === action.Stage && a.Index === action.StageIndex\r\n        );\r\n        return {\r\n            Object: timestamp.Succeed ? \"Acp\" : \"Acp Failed\",\r\n            Stage: action.Stage,\r\n            Index: action.Stage + '_' + action.StageIndex,\r\n            ActNum: action.ActNum,\r\n            Name: action.AnalysisName,\r\n            Layer: action.LayerName,\r\n            ActParam: action.ActParam,\r\n            BeginNf: action.BeginNf,\r\n            EndNf: action.EndNf,\r\n            StartTime: timestamp ? timestamp.StartTime : \"\",\r\n            CompleteTime: timestamp ? timestamp.CompleteTime : \"\",\r\n            Time: time_diff(timestamp.StartTime, timestamp.CompleteTime),\r\n            StartDate: new Date(`01/01/1970 ${timestamp.StartTime}`),\r\n            EndDate: new Date(`01/01/1970 ${timestamp.CompleteTime}`)\r\n        };\r\n    });\r\n\r\n    let uploadObj = {\r\n        Object: \"Upload\",\r\n        Name: \"Upload\",\r\n        Index: -1,\r\n        StartDate: new Date(`01/01/1970 ${data.uploadTime.StartTime}`),\r\n        EndDate: new Date(`01/01/1970 ${data.uploadTime.CompleteTime}`)\r\n    };\r\n\r\n    let splitterObj = {\r\n        Object: \"Splitter\",\r\n        Name: \"Splitter\",\r\n        Index: 0,\r\n        StartDate: new Date(`01/01/1970 ${data.splitterTime.StartTime}`),\r\n        EndDate: new Date(`01/01/1970 ${data.splitterTime.CompleteTime}`)\r\n    };\r\n\r\n    let mergerObj;\r\n    if (data.mergerTime.StartTime && data.mergerTime.CompleteTime) {\r\n        mergerObj = {\r\n            Object: \"Merger\",\r\n            Name: \"Merger\",\r\n            Index: stats.length + 1,\r\n            StartDate: new Date(`01/01/1970 ${data.mergerTime.StartTime}`),\r\n            EndDate: new Date(`01/01/1970 ${data.mergerTime.CompleteTime}`)\r\n        };\r\n    }\r\n\r\n    let downloadObj;\r\n    if (data.downloadTime.StartTime && data.downloadTime.CompleteTime) {\r\n        downloadObj = {\r\n            Object: \"Download\",\r\n            Name: \"Download\",\r\n            Index: stats.length + 2,\r\n            StartDate: new Date(`01/01/1970 ${data.downloadTime.StartTime}`),\r\n            EndDate: new Date(`01/01/1970 ${data.downloadTime.CompleteTime}`)\r\n        };\r\n    }\r\n\r\n    stats = [uploadObj, splitterObj, ...stats];\r\n    if (mergerObj) stats = [...stats, mergerObj];\r\n    if (downloadObj) stats = [...stats, downloadObj];\r\n\r\n    return stats;\r\n}\r\n\r\n\r\nexport function getListData(localData) {\r\n    const actionsNum = localData?.batch[localData.batch.length - 1].ActNum;\r\n    const layersNum = new Set(localData?.batch.map(action => action.LayerName)).size;\r\n    return {\r\n        runningDate: localData?.runningDate,\r\n        jobName: localData?.jobName,\r\n        step: localData?.batch[0].StepName,\r\n        checklist: localData?.batch[0].ChecklistName,\r\n        actionsNum: actionsNum,\r\n        layersNum: layersNum,\r\n        runningTime: localData?.runningTime,\r\n        batchJobsNum: localData?.batch.length,\r\n        key: localData?.key,\r\n        errorTime: localData?.errorTime,\r\n        text: localData?.text\r\n    }\r\n}\r\n\r\nfunction time_diff(start_time, complete_time) {\r\n    let start = start_time.split(':').map(t => Number(t));\r\n    let start_sec = start[0] * 3600 + start[1] * 60 + start[2];\r\n    let complete = complete_time.split(':').map(t => Number(t));\r\n    let complete_sec = complete[0] * 3600 + complete[1] * 60 + complete[2];\r\n    let diff_sec = complete_sec - start_sec;\r\n    return diff_sec;\r\n}\r\n","export function parse(text) {\r\n    const row_lines = text.split('\\n');\r\n    const arrayOfTimestamps = timestamps(row_lines);\r\n    const errorTimeString = errorTime(row_lines, arrayOfTimestamps);\r\n    return {\r\n        runningDate: runningDate(row_lines),\r\n        runningTime: runningTime(row_lines, errorTimeString),\r\n        jobName: jobName(row_lines),\r\n        batch: batch(arrayOfTimestamps),\r\n        uploadTime: uploadTime(arrayOfTimestamps),\r\n        splitterTime: splitterTime(arrayOfTimestamps),\r\n        acpTime: acpTime(row_lines, arrayOfTimestamps),\r\n        mergerTime: mergerTime(arrayOfTimestamps),\r\n        downloadTime: downloadTime(arrayOfTimestamps),\r\n        errorTime: errorTimeString\r\n    };\r\n}\r\n\r\nfunction jobName(row_lines) {\r\n    const job_line = row_lines.filter(line => line.match(\"Job:\"))[0];\r\n    const job_name = job_line.split(' ')[1];\r\n    return job_name;\r\n}\r\n\r\nfunction runningDate(row_lines) {\r\n    let arrayOfLines = row_lines.filter(line => line.match(\"time\"));\r\n    let splitArray = arrayOfLines[0].split(' ');\r\n    let [day, month, year] = splitArray[1].split(':')[1].split('/');\r\n    if (day.length > 2) day = day.substr(1);\r\n    let [hour, min] = splitArray[2].split(':');\r\n    if (hour.length > 2) hour = hour.substr(1);\r\n    if (min.length > 2) min = min.substr(1);\r\n    return new Date(Date.UTC(year, month - 1, day, hour, min)).toUTCString();\r\n}\r\n\r\nfunction runningTime(row_lines, errorTime) {\r\n    let job_started_line = row_lines\r\n        .filter(line => line.match(\"Ready for commands\"))[0];\r\n    let start_time = JSON.parse(job_started_line).time;\r\n    let job_ended_line = row_lines\r\n        .filter(line => line.match(\"Job is ready\"));\r\n    let end_time = job_ended_line.length > 0 ? JSON.parse(job_ended_line).time : errorTime;\r\n\r\n    return end_time ? secToHHMMSS(\r\n        time_diff(start_time, end_time)) : \"\";\r\n}\r\n\r\n// export function getChartData(data) {\r\n//     let stats = data.batch.map(action => {\r\n//         let timestamp = data.acpTime.find(\r\n//             a => a.Stage === action.Stage && a.Index === action.StageIndex\r\n//         );\r\n//         return {\r\n//             Object: \"Acp\",\r\n//             ActNum: action.ActNum,\r\n//             Name: action.AnalysisName,\r\n//             Layer: action.LayerName,\r\n//             Stage: action.Stage,\r\n//             Index: action.StageIndex,\r\n//             StartTime: timestamp ? timestamp.StartTime : \"\",\r\n//             CompleteTime: timestamp ? timestamp.CompleteTime : \"\",\r\n//             Time: time_diff(timestamp.StartTime, timestamp.CompleteTime),\r\n//             StartDate: new Date(`01/01/1970 ${timestamp.StartTime}`),\r\n//             EndDate: new Date(`01/01/1970 ${timestamp.CompleteTime}`)\r\n//         };\r\n//     });\r\n\r\n//     let splitterObj = {\r\n//         Object: \"Splitter\",\r\n//         Name: \"Splitter\",\r\n//         Index: 0,\r\n//         StartDate: new Date(`01/01/1970 ${data.splitterTime.StartTime}`),\r\n//         EndDate: new Date(`01/01/1970 ${data.splitterTime.CompleteTime}`)\r\n//     };\r\n\r\n//     let mergerObj = {\r\n//         Object: \"Merger\",\r\n//         Name: \"Merger\",\r\n//         Index: stats.length + 1,\r\n//         StartDate: new Date(`01/01/1970 ${data.mergerTime.StartTime}`),\r\n//         EndDate: new Date(`01/01/1970 ${data.mergerTime.CompleteTime}`)\r\n//     };\r\n\r\n//     let uploadObj = {\r\n//         Object: \"Upload\",\r\n//         Name: \"Upload\",\r\n//         Index: -1,\r\n//         StartDate: new Date(`01/01/1970 ${data.uploadTime.StartTime}`),\r\n//         EndDate: new Date(`01/01/1970 ${data.uploadTime.CompleteTime}`)\r\n//     };\r\n\r\n//     let downloadObj = {\r\n//         Object: \"Download\",\r\n//         Name: \"Download\",\r\n//         Index: stats.length + 2,\r\n//         StartDate: new Date(`01/01/1970 ${data.downloadTime.StartTime}`),\r\n//         EndDate: new Date(`01/01/1970 ${data.downloadTime.CompleteTime}`)\r\n//     };\r\n\r\n//     // stats = [uploadObj, splitterObj, ...stats, mergerObj, downloadTime];\r\n//     stats = [uploadObj, splitterObj, ...stats, mergerObj, downloadObj];\r\n//     return stats;\r\n// }\r\n\r\nfunction batch(arrayOfTimestamps) {\r\n    let batchObject = arrayOfTimestamps.filter(d => d.type === \"Batch\")[0];\r\n    return JSON.parse(batchObject.message);\r\n}\r\n\r\nfunction uploadTime(arrayOfTimestamps) {\r\n    let uploadTime = {\r\n        StartTime: arrayOfTimestamps.find(\r\n            d => d.object === \"WebClient\" && d.message === \"Job was registered\"\r\n        ).time,\r\n        CompleteTime: arrayOfTimestamps.find(\r\n            d => d.object === \"WebClient\" && d.message === \"After send\"\r\n        ).time\r\n    };\r\n    return uploadTime;\r\n}\r\n\r\nfunction splitterTime(arrayOfTimestamps) {\r\n    let splitter = arrayOfTimestamps.filter(d => d.object === \"Splitter\")\r\n    let s = {\r\n        StartTime: toLocal(\r\n            splitter.find(s => s.message === \"Splitter started\").time\r\n        ),\r\n        CompleteTime: toLocal(splitter.find(s => s.message === \"End of Split\").time)\r\n    };\r\n    return s;\r\n}\r\n\r\nfunction mergerTime(arrayOfTimestamps) {\r\n    let merger = arrayOfTimestamps.filter(d => d.object === \"Merger\");\r\n    // if (!merger) return null\r\n\r\n    let mergerStartMessage = merger.find(s => s.message === \"Preparing job for merge\");\r\n    let mergerCompleteMessage = merger.find(s => s.message === \"Moving Job to S3\");\r\n\r\n    let s = {\r\n        StartTime: mergerStartMessage ? toLocal(mergerStartMessage.time) : null,\r\n        CompleteTime: mergerCompleteMessage ? toLocal(mergerCompleteMessage.time) : null\r\n    };\r\n    return s;\r\n}\r\n\r\nfunction downloadTime(arrayOfTimestamps) {\r\n    let downloadStartMessage = arrayOfTimestamps.find(d => d.object === \"WebClient\" && d.message === \"Download Data\");\r\n    let downloadCompleteMessage = arrayOfTimestamps.find(d => d.object === \"WebClient\" && d.message === \"Job is ready\");\r\n    let downloadTime = {\r\n        StartTime: downloadStartMessage ? downloadStartMessage.time : null,\r\n        CompleteTime: downloadCompleteMessage ? downloadCompleteMessage.time : null\r\n    };\r\n    return downloadTime;\r\n}\r\n\r\nfunction acpTime(row_lines, arrayOfTimestamps) {\r\n    let errorTimeStr = errorTime(row_lines, arrayOfTimestamps);\r\n    let acp = arrayOfTimestamps.filter(d => (d.type === \"Progress\" || d.type === \"Info\") && d.object === \"ACP\");\r\n    let acp_transformed = acp.map(action => {\r\n        let message = action.message.split(' ');\r\n        let localTime = toLocal(action.time);\r\n        return {\r\n            Time: localTime,\r\n            Step: message[0],\r\n            Stage: message[1].split(':')[1],\r\n            Index: Number(message[2].split(':')[1]) + 1\r\n        };\r\n    });\r\n    let acp_started = acp_transformed\r\n        .filter(action => action.Step === \"Starting\")\r\n        .map(action => {\r\n            return {\r\n                Stage: action.Stage,\r\n                Index: action.Index,\r\n                StartTime: action.Time\r\n            };\r\n        });\r\n    let acp_completed = acp_transformed\r\n        .filter(action => action.Step === \"Completing\")\r\n        .map(action => {\r\n            return {\r\n                Stage: action.Stage,\r\n                Index: action.Index,\r\n                CompleteTime: action.Time\r\n            };\r\n        });\r\n    let acp_timestamp = acp_started.map(action => {\r\n        let completeTimeMessage = acp_completed.find(\r\n            c => c.Stage === action.Stage && c.Index === action.Index\r\n        );\r\n\r\n        return {\r\n            Stage: action.Stage,\r\n            Index: action.Index,\r\n            StartTime: action.StartTime,\r\n            CompleteTime: completeTimeMessage ? completeTimeMessage.CompleteTime : errorTimeStr,\r\n            Succeed: !!completeTimeMessage\r\n        };\r\n    });\r\n    return acp_timestamp;\r\n}\r\n\r\nfunction errorTime(row_lines, arrayOfTimestamps) {\r\n    let errorMessage = arrayOfTimestamps.find(\r\n        d => d.object === \"WebClient\" && d.type === \"ERROR\"\r\n    );\r\n\r\n    let errorTime = null;\r\n    if (errorMessage) {\r\n        errorTime = errorMessage.time\r\n    }\r\n    // else {\r\n    //     let ping_lines = row_lines\r\n    //         .filter(line => line.match(\"I am alive\"));\r\n    //     errorTime = ping_lines.length > 0 ? JSON.parse(ping_lines[ping_lines.length - 1]).Time : null;\r\n    // }\r\n    return errorTime;\r\n}\r\n\r\nfunction timestamps(row_lines) {\r\n    let arrayOfLines = row_lines.filter(line => line.match(\"time\"));\r\n    let tmpArrayOfLines = [...arrayOfLines];\r\n    tmpArrayOfLines.splice(0, 1);\r\n    return tmpArrayOfLines.map(line => JSON.parse(line));\r\n}\r\n\r\nfunction time_diff(start_time, complete_time) {\r\n    let start = start_time.split(':').map(t => Number(t));\r\n    let start_sec = start[0] * 3600 + start[1] * 60 + start[2];\r\n    let complete = complete_time.split(':').map(t => Number(t));\r\n    let complete_sec = complete[0] * 3600 + complete[1] * 60 + complete[2];\r\n    let diff_sec = complete_sec - start_sec;\r\n    return diff_sec;\r\n}\r\n\r\nfunction secToHHMMSS(time) {\r\n    return new Date(time * 1000).toISOString().substr(11, 8);\r\n}\r\n\r\nfunction toLocal(hhmmss) {\r\n    if (!hhmmss) return null;\r\n    let [HH, MM, SS] = hhmmss.split(':');\r\n    let local = [Number(HH) + 3, MM, SS].join(':');\r\n    return local;\r\n}\r\n","import React, {useEffect, useState} from 'react';\r\nimport styles from './MainComponent.module.css';\r\nimport RunningLogsList from \"../RunningLogsList/RunningLogsList\";\r\nimport VegaLiteChart from \"../VegaLiteChart/VegaLiteChart\";\r\nimport {getChartData, getListData} from \"../../models/logData\";\r\nimport {parse} from \"../../models/logParser\";\r\n\r\nfunction MainComponent(props) {\r\n    const [logDataArray, setLogDataArray] = useState([]);\r\n    const [index, setIndex] = useState(0);\r\n    const [loading, setLoading] = useState(false);\r\n\r\n    let logsListData = [];\r\n    let chartData = null;\r\n    let runData = null;\r\n\r\n    const loadFiles = async() => {\r\n        let logs_api_uri = \"https://bah2tkltg6.execute-api.eu-central-1.amazonaws.com/test/list\";\r\n\r\n        let response = await fetch(logs_api_uri);\r\n        let resp_json_str = await response.json()\r\n        let keys_list = JSON.parse(resp_json_str.body).keys;\r\n\r\n        let promises = keys_list.map (key => fetch(`${logs_api_uri}/${key}`))\r\n        let respArray = await Promise.all(promises)\r\n        let json_promises = respArray.map(resp => resp.json())\r\n        let textArray = await Promise.all(json_promises);\r\n        let dataArray = textArray.map( e => parse(e.text));\r\n        dataArray.forEach( (data,i) => data.key = keys_list[i] )\r\n        dataArray.forEach( (data,i) => data.text = textArray[i].text )\r\n        dataArray.sort(function(a,b){\r\n            return new Date(b.runningDate) - new Date(a.runningDate);\r\n        });\r\n        return dataArray;\r\n    }\r\n\r\n    const fetchData = async () => {\r\n        setLoading(true);\r\n        const localDataArray = await loadFiles();\r\n        // If all data loaded, render list and select first row\r\n        if (localDataArray.length > 0) {\r\n            setLoading(false);\r\n            setLogDataArray(localDataArray);             // trigger rendering\r\n        }\r\n    };\r\n\r\n    // Effect to load all data from AWS s3\r\n    useEffect( () => {\r\n        if (logDataArray.length === 0) {\r\n            fetchData();\r\n        }\r\n    });\r\n\r\n    const reload = () => {\r\n        fetchData()\r\n        // setLoading(true)\r\n    }\r\n\r\n\r\n    // Callback to set new chart data and update selected index\r\n    const logItemClicked = (index) => {\r\n        setIndex(index);                                     // trigger rendering\r\n    }\r\n\r\n    // Setup data before rendering\r\n    if (logDataArray.length > 0) {\r\n        logsListData = logDataArray.map(data => getListData(data))\r\n\r\n        let localData = logDataArray[index];\r\n        try {\r\n            chartData = getChartData(localData);\r\n        }\r\n        catch (e) {\r\n            chartData = null;\r\n        }\r\n\r\n        runData = getListData(localData);\r\n    }\r\n\r\n    return (\r\n        <main className={styles.MainComponent}>\r\n            <RunningLogsList\r\n                logsListData={logsListData}\r\n                selectedIndex={index}\r\n                loading={loading}\r\n                logItemClicked={logItemClicked}\r\n                onRefreshButtonPressed={reload}\r\n            />\r\n            <VegaLiteChart data={chartData} runData={runData} />\r\n        </main>\r\n    );\r\n}\r\n\r\nexport default MainComponent;\r\n","import React from 'react';\r\nimport MainComponent from \"./components/MainComponent/MainComponent\";\r\nimport './App.css';\r\n\r\nfunction App() {\r\n    return (\r\n        <div className=\"App\">\r\n            <div className=\"content\">\r\n                <h1>DFM Cloud Monitor</h1>\r\n                <hr />\r\n                <MainComponent />\r\n                <hr />\r\n            </div>\r\n            <footer className=\"footer\">\r\n                <p style={{fontSize:\"12px\"}}>Alex Bol 2020</p>\r\n            </footer>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"RunningLogListItem\":\"RunningLogListItem_RunningLogListItem__3ikvQ\",\"RunningLogListItemClicked\":\"RunningLogListItem_RunningLogListItemClicked__2_f2Z\",\"RunningLogListItemFailed\":\"RunningLogListItem_RunningLogListItemFailed__2UuwH\",\"RunningLogListItemNumeric\":\"RunningLogListItem_RunningLogListItemNumeric__1cPYu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"RunningLogsListTable\":\"RunningLogsListTable_RunningLogsListTable__2Burd\",\"fadeIn\":\"RunningLogsListTable_fadeIn__3o70U\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"BackDrop\":\"ModalPopup_BackDrop__1S7cD\",\"ModalPopup\":\"ModalPopup_ModalPopup__2z3u1\",\"fadeIn\":\"ModalPopup_fadeIn__wiwPv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"MainComponent\":\"MainComponent_MainComponent___86ZC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"RunningLogsList\":\"RunningLogsList_RunningLogsList__2_vp0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Button\":\"Button_Button__1u8dQ\",\"Icon\":\"Button_Icon__1mPII\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"RunningLogsListHeader\":\"RunningLogsListHeader_RunningLogsListHeader__319DL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"FileContentPopup\":\"FileContentPopup_FileContentPopup__-6CgH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"VegaLiteChart\":\"VegaLiteChart_VegaLiteChart__3wHRE\"};"],"sourceRoot":""}