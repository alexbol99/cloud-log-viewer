{"version":3,"sources":["UI/Button/Button.js","models/aws_api.js","components/FileUploadButton/FileUploadButton.js","components/MainComponent/RunningLogsList/RunningLogsListHeader/RunningLogsListHeader.js","UI/ModalPopup/ModalPopup.js","UI/Modal.js","components/FileContentPopup/FileContentPopup.js","components/MainComponent/RunningLogsList/RunningLogListItem/RunningLogListItem.js","components/MainComponent/RunningLogsList/RunningLogsListTable/RunningLogsListTable.js","models/logData.js","components/MainComponent/RunningLogsList/SearchInputComponent/SearchInputComponent.js","components/MainComponent/RunningLogsList/RunningLogsList.js","components/MainComponent/ChartAreaComponent/VegaLiteChart/VegaLiteChart.js","components/MainComponent/ChartAreaComponent/ChartAreaComponent.js","models/logFileParser.js","components/MainComponent/MainComponent.js","App.js","serviceWorker.js","index.js","components/MainComponent/RunningLogsList/RunningLogListItem/RunningLogListItem.module.css","components/MainComponent/RunningLogsList/RunningLogsListTable/RunningLogsListTable.module.css","UI/ModalPopup/ModalPopup.module.css","components/MainComponent/MainComponent.module.css","UI/Button/Button.module.css","components/MainComponent/RunningLogsList/RunningLogsListHeader/RunningLogsListHeader.module.css","components/FileContentPopup/FileContentPopup.module.css","components/MainComponent/RunningLogsList/SearchInputComponent/SearchInputComponent.module.css","components/MainComponent/RunningLogsList/RunningLogsList.module.css","components/MainComponent/ChartAreaComponent/ChartAreaComponent.module.css","components/MainComponent/ChartAreaComponent/VegaLiteChart/VegaLiteChart.module.css"],"names":["button","props","title","onClick","className","classes","Button","icon","size","spin","text","api_uri","fetchKeysList","a","fetch","response","json","keysList","JSON","parse","body","keys","fetchFileContent","key","resp","getPresignedURL","selectedFile","url","name","presignedURL","console","log","message","uploadFileToS3","method","headers","src","file","deleteFilesFromS3","keysToDelete","deletedKeys","stringify","alert","FileUploadButton","uploadFiles","selectedFiles","promises","map","selectedFileNames","Promise","all","respArray","onUploadSucceed","multiple","multipleMaxCount","onSuccess","browseFiles","RunningLogsListHeader","offsetX","offsetY","dragX","dragY","styles","onDeleteButtonPressed","faSyncAlt","loading","onRefreshButtonPressed","Modal","children","mount","document","getElementById","el","createElement","useEffect","appendChild","removeChild","createPortal","ModalPopup","handleKeyDown","ev","code","closePopup","elementDrag","window","event","clientX","clientY","element","target","style","top","offsetTop","left","offsetLeft","closeDragElement","onmouseup","onmousemove","addEventListener","removeEventListener","showPopup","id","BackDrop","onMouseDown","header","FileContentPopup","row_lines","content","split","showFileContentPopup","closeFileContentPopup","line","RunningLogsListItem","useState","setShowFileContentPopup","refElement","useRef","data","selected","scrollIntoView","tableClientRect","current","parentElement","getBoundingClientRect","rowClientReact","bottom","RunningLogListItemClicked","RunningLogListItem","errorTime","RunningLogListItemFailed","checkMarkStyle","marked","RunningLogListItemCheckMarkClicked","RunningLogListItemCheckMarkNotClicked","actionsNum","batch","length","ActNum","layersNum","Set","action","LayerName","stepName","StepName","checklistName","ChecklistName","batchJobsNum","e","preventDefault","stopPropagation","ctrlKey","checkMarkClicked","shiftKey","getSelection","empty","itemShiftClicked","itemClicked","ref","faTrashAlt","runningDate","jobName","RunningLogListItemNumeric","runningTime","RunningLogsListTable","dataLength","logDataArray","next","hasMore","RunningLogsListTableCheckMark","width","index","logItemClicked","logItemShiftClicked","time_diff","start_time","complete_time","Date","isNaN","toISOString","substr","SearchInputComponent","faSearch","type","placeholder","onChange","RunningLogsList","onSearchJobNameChanged","selectedIndex","fetchMoreData","VegaLiteChart","chartData","localData","logData","mergerObj","downloadObj","stats","timestamp","acpTime","find","Stage","Index","StageIndex","Object","Succeed","Name","AnalysisName","Layer","ActParam","BeginNf","EndNf","ContourGroupId","ContourGroupNum","StartDate","StartTime","EndDate","CompleteTime","Time","uploadObj","uploadTime","splitterObj","splitterTime","mergerTime","downloadTime","getChartData","client","spec","subtitle","values","mark","tooltip","encoding","x","field","timeUnit","x2","y","sort","color","autosize","VegaLite","actions","export","source","compiled","editor","downloadFileName","theme","ChartAreaComponent","refContainer","chartWidth","setChartWidth","currentContainerWidth","clientWidth","numCharts","arrayOfTimestamps","arrayOfLines","filter","match","tmpArrayOfLines","splice","timeStamp","utcDate","dateStr","i","timeStampToDate","time","toDateString","push","timestamps","errorTimeString","toLocaleString","job_ended_arr","end_time","d","batchObject","slice","join","object","splitter","s","merger","mergerStartMessage","mergerCompleteMessage","downloadStartMessage","downloadCompleteMessage","errorTimeStr","acp_transformed","Step","Number","acp_started","acp_completed","completeTimeMessage","c","errorMessage","timeStr","splitArray","month","day","year","hour","min","sec","UTC","MainComponent","setLogDataArray","setLoading","searchJobNamePattern","setSearchJobNamePattern","fetchData","localDataArray","resolve","reject","newDataArray","concat","undefined","keysListToFetch","filteredKeysList","filterNewKeysList","Array","allSettled","res","fetchedDataArray","p","status","value","b","some","deleteFile","keyStr","confirm","newLogDataArray","includes","clickedData","clickedIndex","findIndex","forEach","App","fontSize","Boolean","location","hostname","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","module","exports"],"mappings":"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","file":"static/js/main.9115b3c8.chunk.js","sourcesContent":["import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport classes from \"./Button.module.css\";\n\nconst button = (props) => {\n    return (\n        <button title={props.title} onClick={props.onClick} className={classes.Button}>\n            {props.icon ?\n            <FontAwesomeIcon icon={props.icon} size=\"x\" spin={props.spin}  /> :\n                null}\n            {props.text}\n        </button>\n    );\n};\n\nexport default button;","// let awsRegion = \"eu-central-1\";\n// let api_uri = \"https://bah2tkltg6.execute-api.eu-central-1.amazonaws.com/test/list\";\nlet api_uri = \"https://vm7sirnd04.execute-api.us-east-1.amazonaws.com/test\";\n\n// Fetch keys list (filenames) from s3 bucket using given api\nexport const fetchKeysList = async() => {\n    let response = await fetch(`${api_uri}/list`);\n    let json = await response.json();\n    let keysList = JSON.parse(json.body).keys;\n    return keysList;\n}\n\n// Fetch content of single file from s3 bucket key\nexport const fetchFileContent = async (key) => {\n    let resp = await fetch(`${api_uri}/list/${key}`);\n    let text = await resp.json();\n    return text;\n}\n// Fetch content of files from s3 bucket by given list of keys\n// export const fetchFileContentByKeysList = async (keysList) => {\n//     let promises = keysList.map (key => fetch(`${api_uri}/list/${key}`))\n//     let respArray = await Promise.all(promises)\n//     let json_promises = respArray.map(resp => resp.json())\n//     let textArray = await Promise.all(json_promises);\n//     return textArray;\n// }\n\nexport const getPresignedURL = async (selectedFile) => {\n    const url = `${api_uri}/get-presigned-url/${selectedFile.name}`\n    let presignedURL = null;\n    try {\n        let response = await fetch(url);\n        let json = await response.json();\n        presignedURL = json.url;\n    }\n    catch (err) {\n        console.log(err.message)\n    }\n    return presignedURL;\n};\n\nexport const uploadFileToS3 = async (selectedFile) => {\n    // Step 1 - get pre-signed POST data.\n    const presignedURL = await getPresignedURL(selectedFile);\n    // if (!presignedURL)  failed to get presigned url - return rejected promise ?\n    // Step 2 - upload the file to S3.\n    return fetch(presignedURL, {\n            method: \"PUT\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: selectedFile.src.file\n        })\n};\n\n// export const uploadFileToS3 = async (presignedURL, file) => {\n//     let json = null;\n//     try {\n//         let response = await fetch(presignedURL, {\n//             method: \"PUT\",\n//             headers: {\n//                 \"Content-Type\": \"application/json\"\n//             },\n//             body: file\n//         });\n//         json = await response.json();\n//     }\n//     catch (err) {\n//         console.log(err.message)\n//     }\n//\n//     return json;\n// };\n\nexport const deleteFilesFromS3 = async (keysToDelete) => {\n    const url = `${api_uri}/delete`;\n    let deletedKeys = [];\n    try {\n        let response = await fetch(url,{\n            method:\"DELETE\",\n            headers: {\n                'Content-Type': 'application/json'\n                // 'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            body: JSON.stringify( {keys: keysToDelete})\n        });\n        let json = await response.json();\n        console.log(json.keys);\n        deletedKeys = json.keys;\n    }\n    catch (e) {\n        alert(\"error delete files\")\n    }\n    return deletedKeys;\n}\n","import React from \"react\";\nimport Files from \"react-butterfiles\";\n// import readFiles from \"../../models/readFile\";\n// import styles from \"./FileUploadButton.module.css\";\nimport Button from \"../../UI/Button/Button\"\nimport {uploadFileToS3} from \"../../models/aws_api\";\n\n/**\n * Component renders a simple \"Select file...\" button which opens a file browser.\n * Once a valid file has been selected, the upload process will start.\n * @returns {*}\n * @constructor\n */\nconst FileUploadButton = (props) => {\n    const uploadFiles = async (selectedFiles) => {\n        let promises = selectedFiles.map( selectedFile => uploadFileToS3(selectedFile) );\n        let selectedFileNames = selectedFiles.map( selectedFile => selectedFile.name );\n\n        try {\n            let respArray = await Promise.all(promises);\n            // let json_promises = respArray.map(resp => resp.json())\n            // json = await Promise.all(json_promises);\n            props.onUploadSucceed(selectedFileNames);\n            return respArray;\n        }\n        catch (err) {\n            console.log(err);\n            return err.message;\n        }\n    }\n\n    return  (\n        <Files\n            multiple={true}\n            multipleMaxCount={300}\n            onSuccess={selectedFiles => uploadFiles(selectedFiles)}\n        >\n            {({ browseFiles }) =>\n                <Button\n                    title=\"Upload log files\"\n                    text=\"Upload\"\n                    onClick={browseFiles}>\n                </Button>}\n        </Files>\n    );\n}\n\nexport default FileUploadButton;","import React from 'react';\nimport Button from '../../../../UI/Button/Button';\nimport { faSyncAlt } from '@fortawesome/free-solid-svg-icons'\nimport FileUploadButton from \"../../../FileUploadButton/FileUploadButton\";\nimport styles from './RunningLogsListHeader.module.css'\n\nfunction RunningLogsListHeader(props) {\n    return (\n        <header className={styles.RunningLogsListHeader}>\n            <FileUploadButton\n                onUploadSucceed={props.onUploadSucceed}\n            />\n            <Button\n                title=\"Delete log files\"\n                text=\"Delete\"\n                // icon={faSyncAlt}\n                // spin={props.loading}\n                onClick={props.onDeleteButtonPressed}\n            />\n            {/*<Button*/}\n            {/*    title=\"Compare two logs\"*/}\n            {/*    text=\"Compare\"*/}\n            {/*    // icon={faSyncAlt}*/}\n            {/*    // spin={props.loading}*/}\n            {/*    // onClick={props.onDeleteButtonPressed}*/}\n            {/*/>*/}\n            <Button\n                title=\"Reload files\"\n                icon={faSyncAlt}\n                spin={props.loading}\n                onClick={props.onRefreshButtonPressed}\n            />\n\n        </header>\n    );\n}\n\nexport default RunningLogsListHeader;\n","import React, { useEffect } from \"react\";\nimport Modal from \"../Modal\";\nimport classes from \"./ModalPopup.module.css\";\n\nlet offsetX;\nlet offsetY;\nlet dragX;\nlet dragY;\n\nconst ModalPopup = (props) => {\n\n    const onBackDropClicked = (ev) => {\n        if (ev.target.id === \"backDrop\") {\n            props.closePopup();\n        }\n    };\n\n    const handleKeyDown = (ev) => {\n        if (ev.code === \"Escape\") {\n            props.closePopup();\n        }\n    };\n\n    const elementDrag = (ev) => {\n        ev = ev || window.event;\n        // calculate the new cursor position:\n        offsetX = dragX - ev.clientX;\n        offsetY = dragY - ev.clientY;\n        dragX = ev.clientX;\n        dragY = ev.clientY;\n        // set the element's new position:\n        let element = ev.target;\n        element.style.top = (element.offsetTop - offsetY) + \"px\";\n        element.style.left = (element.offsetLeft - offsetX) + \"px\";\n    };\n\n    const closeDragElement = (ev) => {\n        /* stop moving when mouse button is released:*/\n        ev.target.onmouseup = null;\n        ev.target.onmousemove = null;\n    };\n\n    const dragMouseDown = (ev) => {\n        ev = ev || window.event;\n        // get the mouse cursor position at startup:\n        dragX = ev.clientX;\n        dragY = ev.clientY;\n        ev.target.onmouseup = closeDragElement;\n        // call a function whenever the cursor moves:\n        ev.target.onmousemove = elementDrag;\n    };\n\n    useEffect(() => {\n        document.addEventListener('keydown', handleKeyDown);\n        return () => document.removeEventListener('keydown', handleKeyDown);\n    } );\n\n    return props.showPopup ? (\n        <Modal>\n            <div\n                id=\"backDrop\"\n                className={classes.BackDrop}\n                onClick={onBackDropClicked}\n            >\n                <div className={classes.ModalPopup}\n                     onMouseDown={dragMouseDown}\n                >\n                    <header>{props.header}</header>\n                    {props.children}\n                </div>\n            </div>\n        </Modal>\n    ) : null;\n};\n\nexport default ModalPopup;\n","import { useEffect } from \"react\";\nimport { createPortal } from \"react-dom\";\n\nconst Modal = ({children}) => {\n    const mount = document.getElementById(\"modal-root\");\n    const el = document.createElement(\"div\");\n\n    useEffect(() => {\n        mount.appendChild(el);\n        return () => mount.removeChild(el);\n    }, [el, mount]);\n\n    return createPortal(children, el)\n};\n\nexport default Modal;\n","/**\n * Created by alexanderbol on 13/04/2017.\n */\n\nimport React from 'react';\nimport classes from './FileContentPopup.module.css';\nimport ModalPopup from \"../../UI/ModalPopup/ModalPopup\";\n\nconst FileContentPopup = (props) => {\n    const row_lines = props.content.split('\\n');\n    return (\n        <ModalPopup\n            showPopup={props.showFileContentPopup}\n            closePopup={props.closeFileContentPopup}\n            header=\"Log File Content\"\n        >\n            <div className={classes.FileContentPopup}>\n                {\n                    row_lines.map( line =>\n                        <p>{line}</p>\n                    )\n                }\n            </div>\n        </ModalPopup>\n    )\n};\n\nexport default FileContentPopup;\n","import React, {useRef, useEffect, useState} from 'react';\nimport styles from './RunningLogListItem.module.css';\nimport FileContentPopup from \"../../../FileContentPopup/FileContentPopup\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {faTrashAlt} from '@fortawesome/free-solid-svg-icons'\n\nfunction RunningLogsListItem(props) {\n    const [showFileContentPopup, setShowFileContentPopup] = useState(false);\n    const refElement = useRef();\n\n    useEffect( () => {\n        if (props.data.selected) {\n            scrollIntoView();\n        }\n    })\n\n    const scrollIntoView = () => {\n        const tableBody = refElement.current.parentElement;\n        const table = tableBody.parentElement;\n        const tableClientRect = table.getBoundingClientRect();\n        const rowClientReact = refElement.current.getBoundingClientRect();\n        if (rowClientReact.bottom > tableClientRect.bottom) {\n            refElement.current.scrollIntoView(false);\n        }\n        if (rowClientReact.top < tableClientRect.top) {\n            refElement.current.scrollIntoView(true);\n        }\n    }\n\n    // Callback to display Log File Content Popup\n    const showLogFileContentPopup = () => {\n        setShowFileContentPopup(true)\n    }\n\n    const closeLogFileContentPopup = () => {\n        setShowFileContentPopup(false)\n    }\n\n    const itemClicked = (e) => {\n        e.preventDefault();\n        e.stopPropagation();\n\n        if (e.ctrlKey) {\n            props.checkMarkClicked();\n        }\n        else if (e.shiftKey) {\n            document.getSelection().empty();\n            props.itemShiftClicked();\n        }\n        else {\n            props.itemClicked();\n        }\n    }\n\n    let style = props.data.selected ? styles.RunningLogListItemClicked : styles.RunningLogListItem;\n\n    const batchFailed= !!props.data.errorTime;\n    style = batchFailed ? `${style} ${styles.RunningLogListItemFailed}` : style;\n\n    let checkMarkStyle = props.marked ?\n        styles.RunningLogListItemCheckMarkClicked : styles.RunningLogListItemCheckMarkNotClicked;\n\n    const actionsNum = props.data?.batch[props.data.batch.length - 1].ActNum;\n    const layersNum = new Set(props.data?.batch.map(action => action.LayerName)).size;\n    const stepName = props.data?.batch[0].StepName;\n    const checklistName = props.data?.batch[0].ChecklistName;\n    const batchJobsNum = props.data?.batch.length;\n\n    return (\n        <>\n            <tr className={style} onClick={itemClicked} ref={refElement}>\n                <td className={checkMarkStyle}>\n                    <FontAwesomeIcon icon={faTrashAlt} />\n                </td>\n                <td>\n                    {props.data.runningDate}\n                </td>\n                <td>\n                    {props.data.jobName}\n                </td>\n                <td>\n                    {stepName}\n                </td>\n                <td>\n                    {checklistName}\n                </td>\n                <td className={styles.RunningLogListItemNumeric}>\n                    {actionsNum}\n                </td>\n                <td className={styles.RunningLogListItemNumeric}>\n                    {layersNum}\n                </td>\n                <td className={styles.RunningLogListItemNumeric}>\n                    {batchJobsNum}\n                </td>\n                <td>\n                    {props.data.runningTime || \"Failed\"}\n                </td>\n                <td>\n                    <div onClick={showLogFileContentPopup} >\n                        {props.data.key}\n                    </div>\n                </td>\n            </tr>\n\n            {showFileContentPopup ?\n                <FileContentPopup\n                    showFileContentPopup={showFileContentPopup}\n                    closeFileContentPopup={closeLogFileContentPopup}\n                    content={props.data.text}\n                /> : null }\n\n        </>\n    );\n}\n\nexport default RunningLogsListItem;\n","import React, {useEffect} from 'react';\nimport InfiniteScroll from 'react-infinite-scroll-component';\nimport styles from './RunningLogsListTable.module.css';\nimport RunningLogsListItem from \"../RunningLogListItem/RunningLogListItem\";\nimport {faTrashAlt} from '@fortawesome/free-solid-svg-icons'\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\n\nfunction RunningLogsListTable(props) {\n\n    // useEffect( () => {\n    //     const handleKeyDown = (e) => {\n    //         switch (e.code) {\n    //             case \"ArrowDown\":\n    //                 e.stopPropagation();\n    //                 e.preventDefault();\n    //                 if (props.selectedIndex < props.logDataArray.length-1) {\n    //                     props.logItemClicked(props.selectedIndex+1);\n    //                 }\n    //                 break;\n    //             case \"ArrowUp\":\n    //                 e.stopPropagation();\n    //                 e.preventDefault();\n    //                 if (props.selectedIndex > 0) {\n    //                     props.logItemClicked(props.selectedIndex-1);\n    //                 }\n    //                 break;\n    //             default:\n    //                 break;\n    //         }\n    //     }\n    //\n    //     document.addEventListener('keydown', handleKeyDown);\n    //\n    //     return () => {\n    //         document.removeEventListener('keydown', handleKeyDown);\n    //     };\n    // })\n\n    const fetchMoreData = () => {\n        // alert(\"Fetch more data\")\n        // props.fetchMoreData();\n    }\n\n    return (\n        <div>\n            <InfiniteScroll\n                dataLength={props.logDataArray?.length}\n                next={fetchMoreData}\n                hasMore={true}\n            >\n\n                <table className={styles.RunningLogsListTable}>\n                    <thead>\n                    <tr>\n                        <th className={styles.RunningLogsListTableCheckMark} style={{width: \"3%\"}}>\n                            <FontAwesomeIcon icon={faTrashAlt} />\n                        </th>\n                        <th style={{width:\"12%\"}}>Running date</th>\n                        <th style={{width:\"25%\"}}>Job Name</th>\n                        <th style={{width:\"3%\"}}>Step</th>\n                        <th style={{width:\"15%\"}}>Checklist</th>\n                        <th style={{width:\"5%\"}}># Actions</th>\n                        <th style={{width:\"5%\"}}># Layers</th>\n                        <th style={{width:\"5%\"}}># ACPs</th>\n                        <th style={{width:\"4%\"}}>Running Time</th>\n                        <th style={{width:\"13%\"}}>Log File Name</th>\n                    </tr>\n                    </thead>\n                    <tbody>\n                        {props.logDataArray?.map( (data, index) =>\n                            <RunningLogsListItem key={index}\n                                                 data={data}\n                                                 // selected={props.selectedIndex===index}\n                                                 marked={data.marked}\n                                                 itemClicked={() => props.logItemClicked(data)}\n                                                 itemShiftClicked = {() => props.logItemShiftClicked(data)}\n                                                 checkMarkClicked = {() => props.checkMarkClicked(data)}\n                            />\n                        )}\n                    </tbody>\n                </table>\n            </InfiniteScroll>\n\n        </div>\n    );\n}\n\nexport default RunningLogsListTable;\n","export function getChartData(data) {\n    let stats = data.batch.map(action => {\n        let timestamp = data.acpTime.find(\n            a => a.Stage === action.Stage && a.Index === action.StageIndex\n        );\n        return {\n            Object: timestamp.Succeed ? \"Acp\" : \"Acp Failed\",\n            Stage: action.Stage,\n            Index: action.Stage + '_' + action.StageIndex,\n            ActNum: action.ActNum,\n            Name: action.AnalysisName,\n            Layer: action.LayerName,\n            ActParam: action.ActParam,\n            BeginNf: action.BeginNf,\n            EndNf: action.EndNf,\n            ContourGroupId: action.ContourGroupId,\n            ContourGroupNum: action.ContourGroupNum,\n            StartDate: timestamp ? timestamp.StartTime : \"\",\n            EndDate: timestamp ? timestamp.CompleteTime : \"\",\n            Time: time_diff(timestamp.StartTime, timestamp.CompleteTime)\n        };\n    });\n\n    let uploadObj = {\n        Object: \"Upload\",\n        Name: \"Upload\",\n        Index: -1,\n        StartDate: data.uploadTime.StartTime,\n        EndDate: data.uploadTime.CompleteTime,\n        Time: time_diff(data.uploadTime.StartTime, data.uploadTime.CompleteTime)\n    };\n\n    let splitterObj = {\n        Object: \"Splitter\",\n        Name: \"Splitter\",\n        Index: 0,\n        StartDate: data.splitterTime.StartTime,\n        EndDate: data.splitterTime.CompleteTime,\n        Time: time_diff(data.splitterTime.StartTime, data.splitterTime.CompleteTime)\n    };\n\n    let mergerObj;\n    if (data.mergerTime.StartTime && data.mergerTime.CompleteTime) {\n        mergerObj = {\n            Object: \"Merger\",\n            Name: \"Merger\",\n            Index: stats.length + 1,\n            StartDate: data.mergerTime.StartTime,\n            EndDate: data.mergerTime.CompleteTime,\n            Time: time_diff(data.mergerTime.StartTime, data.mergerTime.CompleteTime)\n        };\n    }\n\n    let downloadObj;\n    if (data.downloadTime.StartTime && data.downloadTime.CompleteTime) {\n        downloadObj = {\n            Object: \"Download\",\n            Name: \"Download\",\n            Index: stats.length + 2,\n            StartDate: data.downloadTime.StartTime,\n            EndDate: data.downloadTime.CompleteTime,\n            Time: time_diff(data.downloadTime.StartTime, data.downloadTime.CompleteTime)\n        };\n    }\n\n    stats = [uploadObj, splitterObj, ...stats];\n    if (mergerObj) stats = [...stats, mergerObj];\n    if (downloadObj) stats = [...stats, downloadObj];\n\n    return stats;\n}\n\n// export function getListData(localData) {\n//     const actionsNum = localData?.batch[localData.batch.length - 1].ActNum;\n//     const layersNum = new Set(localData?.batch.map(action => action.LayerName)).size;\n//     return {\n//         runningDate: localData?.runningDate,\n//         jobName: localData?.jobName,\n//         step: localData?.batch[0].StepName,\n//         checklist: localData?.batch[0].ChecklistName,\n//         actionsNum: actionsNum,\n//         layersNum: layersNum,\n//         runningTime: localData?.runningTime,\n//         batchJobsNum: localData?.batch.length,\n//         key: localData?.key,\n//         errorTime: localData?.errorTime,\n//         text: localData?.text,\n//         marked: localData?.marked,\n//         selected: localData?.selected\n//     }\n// }\n\n// function time_diff(start_time, complete_time) {\n//     let start = start_time.split(':').map(t => Number(t));\n//     let start_sec = start[0] * 3600 + start[1] * 60 + start[2];\n//     let complete = complete_time.split(':').map(t => Number(t));\n//     let complete_sec = complete[0] * 3600 + complete[1] * 60 + complete[2];\n//     let diff_sec = complete_sec - start_sec;\n//     return diff_sec;\n// }\n\nfunction time_diff(start_time, complete_time) {\n    if (start_time instanceof Date && !isNaN(start_time) &&\n    complete_time instanceof Date && !isNaN(complete_time)) {\n     return msecToHHMMSS(complete_time - start_time);\n    }\n    else {\n        return 0;\n    }\n}\n\nfunction msecToHHMMSS(time) {\n    return new Date(time).toISOString().substr(11, 8);\n}\n","import React from \"react\";\nimport { faSearch } from '@fortawesome/free-solid-svg-icons'\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport styles from \"./SearchInputComponent.module.css\";\n\nconst SearchInputComponent = (props) => {\n    return (\n        <div className={styles.SearchInputComponent}>\n            <FontAwesomeIcon icon={faSearch} />\n            <input type=\"text\" name=\"searchJobName\" placeholder=\"job name\" onChange={props.onChange} />\n        </div>\n    )\n}\n\nexport default SearchInputComponent;","import React from 'react';\nimport RunningLogsListHeader from \"./RunningLogsListHeader/RunningLogsListHeader\";\nimport RunningLogsListTable from \"./RunningLogsListTable/RunningLogsListTable\";\nimport {getListData} from \"../../../models/logData\";\nimport SearchInputComponent from \"./SearchInputComponent/SearchInputComponent\";\nimport styles from './RunningLogsList.module.css';\n\nfunction RunningLogsList(props) {\n    return (\n        <div className={styles.RunningLogsList}>\n            <RunningLogsListHeader\n                loading={props.loading}\n                onUploadSucceed={props.onUploadSucceed}\n                onDeleteButtonPressed={props.onDeleteButtonPressed}\n                onRefreshButtonPressed={props.onRefreshButtonPressed}\n            />\n\n            <SearchInputComponent\n                onChange={props.onSearchJobNameChanged}\n            />\n\n            <RunningLogsListTable\n                logDataArray={props.logDataArray}\n                selectedIndex={props.selectedIndex}\n                logItemClicked={props.logItemClicked}\n                logItemShiftClicked={props.logItemShiftClicked}\n                checkMarkClicked={props.checkMarkClicked}\n                fetchMoreData={props.onRefreshButtonPressed}\n            />\n\n        </div>\n    );\n}\n\nexport default RunningLogsList;\n","import React from 'react';\nimport { VegaLite } from 'react-vega'\nimport styles from './VegaLiteChart.module.css';\nimport {getChartData, getListData} from \"../../../../models/logData\";\n\nfunction VegaLiteChart(props) {\n    // Setup data before rendering\n    let chartData = null;\n    let runData = null;\n\n    let localData = props.logData;\n    try {\n        chartData = getChartData(localData);\n    } catch (e) {\n        chartData = null;\n    }\n    // runData = getListData(localData);\n\n    const client = localData.key.split('-')[0] || \"unknown\";\n    const spec = {\n        \"$schema\": \"https://vega.github.io/schema/vega-lite/v4.json\",\n        title: {\n            text: localData?.jobName,\n            subtitle: `Client: ${client} Running time: ${localData?.runningTime}`\n        },\n        data: { values: chartData },\n        mark: { type: \"bar\", tooltip: [] },\n        encoding: {\n            x: {\n                type: \"temporal\",\n                field: \"StartDate\",\n                timeUnit: \"hoursminutesseconds\"\n            },\n            x2: {\n                type: \"temporal\",\n                field: \"EndDate\",\n                timeUnit: \"hoursminutesseconds\"\n            },\n            y: {\n                type: \"nominal\",\n                field: \"Index\",\n                sort: null\n            },\n            color: { field: \"Object\" }\n        },\n        // resize: true,\n        width: props.width,\n        // height: 800,\n        autosize: \"fit\",\n    }\n\n    return (\n        <div className={styles.VegaLiteChart}>\n            {\n                chartData && localData.runningTime ?\n                    <VegaLite\n                        spec={spec}\n                        data={chartData}\n                        actions={{\n                            export: true,\n                            source: false,\n                            compiled: false,\n                            editor: false\n                        }}\n                        downloadFileName={localData?.jobName}\n                        theme=\"urbaninstitute\"\n                    /> : null\n            }\n        </div>\n    );\n}\n\nexport default VegaLiteChart;\n","import React, {useEffect, useRef, useState} from \"react\";\nimport styles from \"./ChartAreaComponent.module.css\";\nimport VegaLiteChart from \"./VegaLiteChart/VegaLiteChart\";\n\nconst ChartAreaComponent = (props) => {\n    const refContainer = useRef(null);\n    const [chartWidth, setChartWidth] = useState(800);\n\n    useEffect( () => {\n        if (refContainer.current) {\n            const currentContainerWidth = refContainer.current.clientWidth;\n            const numCharts = props.logDataArray.length;\n            const currentChartWidth = numCharts === 1 ? 800 : 0.8 * currentContainerWidth / 2;\n            setChartWidth(currentChartWidth);\n        }\n    },[props.logDataArray.length])\n\n    return props.logDataArray.length > 0 ? (\n        <div className={styles.ChartAreaComponent}  ref={refContainer}>\n            {\n                props.logDataArray.map( (data, index) => (\n                    <VegaLiteChart\n                        key={index}\n                        logData={data}\n                        width={chartWidth}\n                    />\n                ))\n            }\n        </div>\n    ) : null;\n}\n\nexport default ChartAreaComponent","export function parse(text) {\n    const row_lines = text.split('\\n');\n    const arrayOfTimestamps = timestamps(row_lines);\n    const errorTimeString = errorTime(row_lines, arrayOfTimestamps);\n    return {\n        runningDate: runningDate(arrayOfTimestamps),\n        runningTime: runningTime(arrayOfTimestamps, errorTimeString),\n        jobName: jobName(row_lines),\n        batch: batch(arrayOfTimestamps),\n        uploadTime: uploadTime(arrayOfTimestamps),\n        splitterTime: splitterTime(arrayOfTimestamps),\n        acpTime: acpTime(row_lines, arrayOfTimestamps),\n        mergerTime: mergerTime(arrayOfTimestamps),\n        downloadTime: downloadTime(arrayOfTimestamps),\n        errorTime: errorTimeString\n    };\n}\n\nfunction jobName(row_lines) {\n    const job_line = row_lines.filter(line => line.match(\"Job:\"))[0];\n    const job_name = job_line.split(' ')[1];\n    return job_name;\n}\n\nfunction runningDate(arrayOfTimestamps) {\n    let job_started = arrayOfTimestamps.filter(\n        line => line.message === \"Ready for commands\"\n    )[0];\n    return job_started.utcDate.toLocaleString();\n}\n\n// function runningDate(row_lines) {\n//     let arrayOfLines = row_lines.filter(line => line.match(\"time\"));\n//     let splitArray = arrayOfLines[0].split(' ');\n//     let [day, month, year] = splitArray[1].split(':')[1].split('/');\n//     if (day.length > 2) day = day.substr(1);\n//     let [hour, min] = splitArray[2].split(':');\n//     if (hour.trim().length > 2) hour = hour.substr(1);\n//     if (min.trim().length > 2) min = min.substr(1);\n//     return new Date(Date.UTC(year, month - 1, day, hour, min)).toUTCString();\n// }\n\nfunction runningTime(arrayOfTimestamps, errorTime) {\n    let job_started = arrayOfTimestamps.filter(\n        line => line.message === \"Ready for commands\"\n    )[0];\n    let start_time = job_started.utcDate;\n    let job_ended_arr = arrayOfTimestamps.filter(\n        line => line.message === \"Job is ready\"\n    );\n    let end_time = job_ended_arr.length > 0 ? job_ended_arr[0].utcDate : errorTime;\n\n    return end_time ? time_diff(start_time, end_time) : \"\";\n}\n\nfunction batch(arrayOfTimestamps) {\n    let batchObjectList = arrayOfTimestamps.filter(d => d.type === \"Batch\");\n    let messageList = batchObjectList.map(batchObject =>\n        batchObject.message.slice(2)\n    );\n    let message = messageList.join(\"\");\n    return JSON.parse(message);\n}\n\nfunction uploadTime(arrayOfTimestamps) {\n    let uploadTime = {\n        StartTime: arrayOfTimestamps.find(\n            d => d.object === \"WebClient\" && d.message === \"Job was registered\"\n        ).utcDate,\n        CompleteTime: arrayOfTimestamps.find(\n            d => d.object === \"WebClient\" && d.message === \"After send\"\n        ).utcDate\n    };\n    return uploadTime;\n}\n\nfunction splitterTime(arrayOfTimestamps) {\n    let splitter = arrayOfTimestamps.filter(d => d.object === \"Splitter\")\n    let s = {\n        StartTime: splitter.find(s => s.message === \"Splitter started\").utcDate,\n        CompleteTime: splitter.find(s => s.message === \"End of Split\").utcDate\n    };\n    return s;\n}\n\nfunction mergerTime(arrayOfTimestamps) {\n    let merger = arrayOfTimestamps.filter(d => d.object === \"Merger\");\n    let mergerStartMessage = merger.find(s => s.message === \"Preparing job for merge\");\n    let mergerCompleteMessage = merger.find(s => s.message === \"Moving Job to S3\");\n\n    let s = {\n        StartTime: mergerStartMessage ? mergerStartMessage.utcDate : null,\n        CompleteTime: mergerCompleteMessage ? mergerCompleteMessage.utcDate : null\n    };\n    return s;\n}\n\nfunction downloadTime(arrayOfTimestamps) {\n    let downloadStartMessage = arrayOfTimestamps.find(d => d.object === \"WebClient\" && d.message === \"Download Data\");\n    let downloadCompleteMessage = arrayOfTimestamps.find(d => d.object === \"WebClient\" && d.message === \"Job is ready\");\n    let downloadTime = {\n        StartTime: downloadStartMessage ? downloadStartMessage.utcDate : null,\n        CompleteTime: downloadCompleteMessage ? downloadCompleteMessage.utcDate : null\n    };\n    return downloadTime;\n}\n\nfunction acpTime(row_lines, arrayOfTimestamps) {\n    let errorTimeStr = errorTime(row_lines, arrayOfTimestamps);\n    let acp = arrayOfTimestamps.filter(d => (d.type === \"Progress\" || d.type === \"Info\") && d.object === \"ACP\");\n    let acp_transformed = acp.map(action => {\n        let message = action.message.split(' ');\n        return {\n            Time: action.utcDate,\n            Step: message[0],\n            Stage: message[1].split(':')[1],\n            Index: Number(message[2].split(':')[1]) + 1\n        };\n    });\n    let acp_started = acp_transformed\n        .filter(action => action.Step === \"Starting\")\n        .map(action => {\n            return {\n                Stage: action.Stage,\n                Index: action.Index,\n                StartTime: action.Time\n            };\n        });\n    let acp_completed = acp_transformed\n        .filter(action => action.Step === \"Completing\")\n        .map(action => {\n            return {\n                Stage: action.Stage,\n                Index: action.Index,\n                CompleteTime: action.Time\n            };\n        });\n    let acp_timestamp = acp_started.map(action => {\n        let completeTimeMessage = acp_completed.find(\n            c => c.Stage === action.Stage && c.Index === action.Index\n        );\n\n        return {\n            Stage: action.Stage,\n            Index: action.Index,\n            StartTime: action.StartTime,\n            CompleteTime: completeTimeMessage ? completeTimeMessage.CompleteTime : errorTimeStr,\n            Succeed: !!completeTimeMessage\n        };\n    });\n    return acp_timestamp;\n}\n\nfunction errorTime(row_lines, arrayOfTimestamps) {\n    let errorMessage = arrayOfTimestamps.find(\n        d => d.object === \"WebClient\" && d.type === \"ERROR\"\n    );\n\n    let errorTime = null;\n    if (errorMessage) {\n        errorTime = errorMessage.utcDate\n    }\n    // else {\n    //     let ping_lines = row_lines\n    //         .filter(line => line.match(\"I am alive\"));\n    //     errorTime = ping_lines.length > 0 ? JSON.parse(ping_lines[ping_lines.length - 1]).Time : null;\n    // }\n    return errorTime;\n}\n\nfunction timestamps(row_lines) {\n    let arrayOfLines = row_lines.filter(line => line.match(\"time\"));\n    let tmpArrayOfLines = [...arrayOfLines];\n    tmpArrayOfLines.splice(0, 1);\n    let arrayOfTimestamps = [];\n    let timeStamp;\n    let utcDate;\n    let dateStr = \"\";\n    for (let i = 0; i < tmpArrayOfLines.length; i++) {\n        try {\n            timeStamp = JSON.parse(tmpArrayOfLines[i]);\n            if (timeStamp.message === \"Submit Splitter\") continue; // bad format\n            utcDate = timeStampToDate(timeStamp.time, dateStr);\n            dateStr = utcDate.toDateString();\n            arrayOfTimestamps.push({ utcDate, ...timeStamp });\n        } catch (e) {\n            return [i, tmpArrayOfLines[i]];\n        }\n    }\n    return arrayOfTimestamps;\n}\n\nfunction time_diff(start_time, complete_time) {\n    if (start_time instanceof Date && !isNaN(start_time) &&\n        complete_time instanceof Date && !isNaN(complete_time)) {\n        return msecToHHMMSS(complete_time - start_time);\n    }\n    else {\n        return 0;\n    }\n}\n\nfunction msecToHHMMSS(time) {\n    return new Date(time).toISOString().substr(11, 8);\n}\n\nfunction timeStampToDate(timeStr, dateStr) {\n    let splitArray = timeStr.split(', ');\n    if (splitArray.length === 1) {   // bad format only time no date\n        return new Date(dateStr + ' ' + timeStr)\n    }\n    else {\n        let [month, day, year] = splitArray[0].split('/');\n        let [hour, min, sec] = splitArray[1].split(':');\n        return new Date(Date.UTC(year, month - 1, day, hour, min, sec)); // .toUTCString();\n    }\n}\n","import React, {useEffect, useState} from 'react';\nimport styles from './MainComponent.module.css';\nimport RunningLogsList from \"./RunningLogsList/RunningLogsList\";\nimport ChartAreaComponent from \"./ChartAreaComponent/ChartAreaComponent\";\nimport {parse} from \"../../models/logFileParser\";\nimport {/*fetchFileContentByKeysList,*/ fetchFileContent, fetchKeysList, deleteFilesFromS3} from \"../../models/aws_api\";\n\nfunction MainComponent(props) {\n    const [logDataArray, setLogDataArray] = useState([]);\n    const [loading, setLoading] = useState(false);\n    const [searchJobNamePattern, setSearchJobNamePattern] = useState(\"\");\n\n    // const numInChunk = 8;\n\n    // Fetch content of files from s3 bucket by given list of keys\n    // const fetchDataByKeysList = async (keysList) => {\n    //     let textArray = await fetchFileContentByKeysList(keysList);\n    //     let dataArray = textArray.map( e => parse(e.text));\n    //     dataArray.forEach( (data,i) => data.key = keysList[i] )\n    //     dataArray.forEach( (data,i) => data.text = textArray[i].text )\n    //     return dataArray;\n    // }\n\n    // Fetch content of one file from s3 bucket by given key\n    const fetchData = async (localDataArray, key, index) => {\n        return new Promise( async (resolve, reject) => {\n            try {\n                let text = await fetchFileContent(key);\n                let data = parse(text.text);\n                data.key = key;\n                data.text = text.text;\n                data.marked = false;\n                data.selected = false;\n\n                localDataArray[index] = data;\n                let newDataArray = logDataArray.concat(localDataArray);\n                newDataArray.filter (data => data !== undefined)\n                setLogDataArray(newDataArray);             // trigger rendering\n                resolve(data);\n            }\n            catch (err) {\n                reject(err.message)\n            }\n        })\n    }\n\n    const fetchMoreData = async (keysListToFetch) => {\n        setLoading(true);\n\n        let keysList = keysListToFetch || await fetchKeysList();\n        let filteredKeysList = filterNewKeysList(keysList);\n        // let chunkOfKeysList = filteredKeysList.slice(0,numInChunk);\n        if (filteredKeysList.length > 0) {\n            let localDataArray = new Array(filteredKeysList.length);\n            let promises = filteredKeysList.map( (key, index) => fetchData(localDataArray, key, index));\n            try {\n                let res = await Promise.allSettled(promises);\n                let fetchedDataArray = res.filter(p => p.status === \"fulfilled\").map(p => p.value);\n                let newDataArray = logDataArray.concat(fetchedDataArray);\n                newDataArray.sort(function(a,b){\n                    return new Date(b.runningDate) - new Date(a.runningDate);\n                });\n                if (!newDataArray.some(data => data.marked)) {\n                    newDataArray[0].marked = true;\n                }\n                if (!newDataArray.some(data => data.selected)) {\n                    newDataArray[0].selected = true;\n                }\n                setLogDataArray(newDataArray);             // trigger rendering\n            } catch (err) {\n                console.log(err.message)\n            }\n        }\n\n        setLoading(false);\n    }\n\n    // Filter keysList: keep only new keys that do not exist in logDataArray\n    const filterNewKeysList = (keysList) => {\n        let filteredKeyList = keysList\n            .filter( key => !logDataArray.some( data => data.key === key))\n        return filteredKeyList;\n    }\n\n    const syncData = () => {\n        fetchMoreData()\n    }\n\n    const fetchUploaded = (keysList) => {\n        fetchMoreData(keysList)\n    }\n\n    // Callback to set new chart data and update selected index\n    const logItemClicked = (clickedData) => {\n        if (!clickedData) return;\n        let newLogDataArray = logDataArray.slice();\n        let clickedIndex = newLogDataArray.findIndex( data => data.key === clickedData.key);\n        newLogDataArray.forEach( (data, i) => {\n            data.marked = (i === clickedIndex);\n            data.selected = (i === clickedIndex);\n        });\n        setLogDataArray(newLogDataArray);             // trigger rendering\n    }\n\n    const logItemShiftClicked = (clickedData) => {\n        if (!clickedData) return;\n        let newLogDataArray = logDataArray.slice();\n        let clickedIndex = newLogDataArray.findIndex( data => data.key === clickedData.key);\n        newLogDataArray.forEach( (data, i) =>\n            i === clickedIndex ? data.selected = !data.selected : data.selected);\n        setLogDataArray(newLogDataArray);             // trigger rendering\n    }\n\n    const checkMarkClicked = (clickedData) => {\n        if (!clickedData) return;\n        let newLogDataArray = logDataArray.slice();\n        let clickedIndex = newLogDataArray.findIndex( data => data.key === clickedData.key);\n        newLogDataArray.forEach( (data, i) =>\n            i === clickedIndex ? data.marked = !data.marked : data.marked);\n        setLogDataArray(newLogDataArray);             // trigger rendering\n    }\n\n    const deleteFile = async () => {\n        let keysToDelete = logDataArray\n            .filter( data => data.marked )\n            .map( data => data.key);\n        if (keysToDelete.length === 0) return;\n        let keyStr = keysToDelete.join(\"\\n\");\n        let message = keysToDelete.length === 1 ?\n            `1 file will be deleted:\\n ${keyStr}` :\n            `${keysToDelete.length} files will be deleted:\\n ${keyStr}`;\n        let ok = window.confirm(message);\n        if (ok) {\n            let deletedKeys = await deleteFilesFromS3(keysToDelete);\n            // let firstDeletedInd = logDataArray.findIndex(data => deletedKeys.includes(data.key));\n            // let newIndex = Math.max(0, firstDeletedInd - 1);\n            let newLogDataArray = logDataArray.filter(data => !deletedKeys.includes(data.key));\n            setLogDataArray(newLogDataArray);             // trigger rendering\n        }\n    }\n\n    const searchJobNameHandler = (e) => {\n        setSearchJobNamePattern(e.target.value);\n    }\n\n    // Effect to load all data from AWS s3 bucket after component mounted\n    useEffect( () => {\n        fetchMoreData();\n    },[]);\n\n    return (\n        <main className={styles.MainComponent}>\n            <RunningLogsList\n                logDataArray={logDataArray\n                    .filter(data => data.jobName.includes(searchJobNamePattern))}\n                loading={loading}\n                logItemClicked={logItemClicked}\n                logItemShiftClicked={logItemShiftClicked}\n                checkMarkClicked={checkMarkClicked}\n                onUploadSucceed={fetchUploaded}\n                onDeleteButtonPressed={deleteFile}\n                onRefreshButtonPressed={syncData}\n                onSearchJobNameChanged={searchJobNameHandler}\n            />\n            <ChartAreaComponent\n                logDataArray={logDataArray\n                    .filter(data => data.jobName.includes(searchJobNamePattern))\n                    .filter( data => data.selected )}\n            />\n        </main>\n    );\n}\n\nexport default MainComponent;\n","import React from 'react';\nimport MainComponent from \"./components/MainComponent/MainComponent\";\nimport './App.css';\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <div className=\"content\">\n                <h2>Cloud Log Viewer</h2>\n                <hr />\n                <MainComponent />\n                <hr />\n            </div>\n            <footer className=\"footer\">\n                <p style={{fontSize:\"12px\"}}>Alex Bol 2020</p>\n            </footer>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"RunningLogListItem\":\"RunningLogListItem_RunningLogListItem__uRuSE\",\"fadeIn\":\"RunningLogListItem_fadeIn__3YiuN\",\"RunningLogListItemClicked\":\"RunningLogListItem_RunningLogListItemClicked__3gbv5\",\"RunningLogListItemFailed\":\"RunningLogListItem_RunningLogListItemFailed__1tJDs\",\"RunningLogListItemNumeric\":\"RunningLogListItem_RunningLogListItemNumeric__2_88a\",\"RunningLogListItemClickable\":\"RunningLogListItem_RunningLogListItemClickable__2oyp2\",\"RunningLogListItemCheckMarkClicked\":\"RunningLogListItem_RunningLogListItemCheckMarkClicked__3CzaZ\",\"RunningLogListItemCheckMarkNotClicked\":\"RunningLogListItem_RunningLogListItemCheckMarkNotClicked__1ReUo\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"RunningLogsListTable\":\"RunningLogsListTable_RunningLogsListTable__1fKEB\",\"fadeIn\":\"RunningLogsListTable_fadeIn__3m5B_\",\"RunningLogsListTableCheckMark\":\"RunningLogsListTable_RunningLogsListTableCheckMark__1rEXN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"BackDrop\":\"ModalPopup_BackDrop__3oXJD\",\"ModalPopup\":\"ModalPopup_ModalPopup__3TsOV\",\"fadeIn\":\"ModalPopup_fadeIn__1BHZf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"MainComponent\":\"MainComponent_MainComponent__1UCA3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Button\":\"Button_Button__3h9Fb\",\"Icon\":\"Button_Icon__c_IsA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"RunningLogsListHeader\":\"RunningLogsListHeader_RunningLogsListHeader__1MFQ4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"FileContentPopup\":\"FileContentPopup_FileContentPopup__1wTAX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"SearchInputComponent\":\"SearchInputComponent_SearchInputComponent__23TaM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"RunningLogsList\":\"RunningLogsList_RunningLogsList__36uf4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ChartAreaComponent\":\"ChartAreaComponent_ChartAreaComponent__3aRur\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"VegaLiteChart\":\"VegaLiteChart_VegaLiteChart__tmxD2\"};"],"sourceRoot":""}