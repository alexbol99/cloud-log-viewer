{"version":3,"sources":["UI/Button/Button.js","models/aws_api.js","components/FileUploadButton/FileUploadButton.js","components/RunningLogsList/RunningLogsListHeader/RunningLogsListHeader.js","UI/ModalPopup/ModalPopup.js","UI/Modal.js","components/FileContentPopup/FileContentPopup.js","components/RunningLogsList/RunningLogListItem/RunningLogListItem.js","components/RunningLogsList/RunningLogsListTable/RunningLogsListTable.js","models/logData.js","components/RunningLogsList/RunningLogsList.js","components/ChartAreaComponent/VegaLiteChart/VegaLiteChart.js","components/ChartAreaComponent/ChartAreaComponent.js","models/logFileParser.js","components/MainComponent/MainComponent.js","App.js","serviceWorker.js","index.js","components/RunningLogsList/RunningLogListItem/RunningLogListItem.module.css","components/RunningLogsList/RunningLogsListTable/RunningLogsListTable.module.css","UI/ModalPopup/ModalPopup.module.css","components/MainComponent/MainComponent.module.css","components/RunningLogsList/RunningLogsList.module.css","UI/Button/Button.module.css","components/RunningLogsList/RunningLogsListHeader/RunningLogsListHeader.module.css","components/FileContentPopup/FileContentPopup.module.css","components/ChartAreaComponent/ChartAreaComponent.module.css","components/ChartAreaComponent/VegaLiteChart/VegaLiteChart.module.css"],"names":["button","props","title","onClick","className","classes","Button","icon","size","spin","text","api_uri","fetchKeysList","a","fetch","response","json","keysList","JSON","parse","body","keys","fetchFileContent","key","resp","getPresignedURL","selectedFile","url","name","presignedURL","console","log","message","uploadFileToS3","method","headers","src","file","deleteFilesFromS3","keysToDelete","deletedKeys","stringify","alert","FileUploadButton","uploadFiles","selectedFiles","promises","map","selectedFileNames","Promise","all","respArray","onUploadSucceed","multiple","multipleMaxCount","onSuccess","browseFiles","RunningLogsListHeader","offsetX","offsetY","dragX","dragY","styles","onDeleteButtonPressed","faSyncAlt","loading","onRefreshButtonPressed","Modal","children","mount","document","getElementById","el","createElement","useEffect","appendChild","removeChild","createPortal","ModalPopup","handleKeyDown","ev","code","closePopup","elementDrag","window","event","clientX","clientY","element","target","style","top","offsetTop","left","offsetLeft","closeDragElement","onmouseup","onmousemove","addEventListener","removeEventListener","showPopup","id","BackDrop","onMouseDown","header","FileContentPopup","row_lines","content","split","showFileContentPopup","closeFileContentPopup","line","RunningLogsListItem","useState","setShowFileContentPopup","refElement","useRef","data","selected","scrollIntoView","tableClientRect","current","parentElement","getBoundingClientRect","rowClientReact","bottom","RunningLogListItemClicked","RunningLogListItem","batchFailed","RunningLogListItemFailed","checkMarkStyle","marked","RunningLogListItemCheckMarkClicked","RunningLogListItemCheckMarkNotClicked","e","preventDefault","stopPropagation","ctrlKey","checkMarkClicked","shiftKey","getSelection","empty","itemShiftClicked","itemClicked","ref","runningDate","jobName","step","checklist","RunningLogListItemNumeric","actionsNum","layersNum","batchJobsNum","runningTime","RunningLogsListTable","selectedIndex","logsListData","length","logItemClicked","dataLength","next","hasMore","RunningLogsListTableCheckMark","width","index","errorTime","logItemShiftClicked","getListData","localData","batch","ActNum","Set","action","LayerName","StepName","ChecklistName","time_diff","start_time","complete_time","Date","isNaN","toISOString","substr","RunningLogsList","logDataArray","fetchMoreData","VegaLiteChart","chartData","runData","logData","mergerObj","downloadObj","stats","timestamp","acpTime","find","Stage","Index","StageIndex","Object","Succeed","Name","AnalysisName","Layer","ActParam","BeginNf","EndNf","ContourGroupId","ContourGroupNum","StartDate","StartTime","EndDate","CompleteTime","Time","uploadObj","uploadTime","splitterObj","splitterTime","mergerTime","downloadTime","getChartData","client","spec","subtitle","values","mark","type","tooltip","encoding","x","field","timeUnit","x2","y","sort","color","autosize","VegaLite","actions","export","source","compiled","editor","downloadFileName","theme","ChartAreaComponent","refContainer","chartWidth","setChartWidth","currentContainerWidth","clientWidth","numCharts","arrayOfTimestamps","arrayOfLines","filter","match","tmpArrayOfLines","splice","timeStamp","utcDate","dateStr","i","timeStampToDate","time","toDateString","push","timestamps","errorTimeString","toLocaleString","job_ended_arr","end_time","d","batchObject","slice","join","object","splitter","s","merger","mergerStartMessage","mergerCompleteMessage","downloadStartMessage","downloadCompleteMessage","errorTimeStr","acp_transformed","Step","Number","acp_started","acp_completed","completeTimeMessage","c","errorMessage","timeStr","splitArray","month","day","year","hour","min","sec","UTC","MainComponent","setLogDataArray","setLoading","fetchData","localDataArray","resolve","reject","newDataArray","concat","undefined","keysListToFetch","filteredKeysList","filterNewKeysList","Array","fetchedDataArray","b","some","deleteFile","keyStr","confirm","newLogDataArray","includes","clickedIndex","forEach","App","fontSize","Boolean","location","hostname","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","module","exports"],"mappings":"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","file":"static/js/main.17f003f7.chunk.js","sourcesContent":["import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport classes from \"./Button.module.css\";\n\nconst button = (props) => {\n    return (\n        <button title={props.title} onClick={props.onClick} className={classes.Button}>\n            {props.icon ?\n            <FontAwesomeIcon icon={props.icon} size=\"x\" spin={props.spin}  /> :\n                null}\n            {props.text}\n        </button>\n    );\n};\n\nexport default button;","// let awsRegion = \"eu-central-1\";\n// let api_uri = \"https://bah2tkltg6.execute-api.eu-central-1.amazonaws.com/test/list\";\nlet api_uri = \"https://vm7sirnd04.execute-api.us-east-1.amazonaws.com/test\";\n\n// Fetch keys list (filenames) from s3 bucket using given api\nexport const fetchKeysList = async() => {\n    let response = await fetch(`${api_uri}/list`);\n    let json = await response.json();\n    let keysList = JSON.parse(json.body).keys;\n    return keysList;\n}\n\n// Fetch content of single file from s3 bucket key\nexport const fetchFileContent = async (key) => {\n    let resp = await fetch(`${api_uri}/list/${key}`);\n    let text = await resp.json();\n    return text;\n}\n// Fetch content of files from s3 bucket by given list of keys\n// export const fetchFileContentByKeysList = async (keysList) => {\n//     let promises = keysList.map (key => fetch(`${api_uri}/list/${key}`))\n//     let respArray = await Promise.all(promises)\n//     let json_promises = respArray.map(resp => resp.json())\n//     let textArray = await Promise.all(json_promises);\n//     return textArray;\n// }\n\nexport const getPresignedURL = async (selectedFile) => {\n    const url = `${api_uri}/get-presigned-url/${selectedFile.name}`\n    let presignedURL = null;\n    try {\n        let response = await fetch(url);\n        let json = await response.json();\n        presignedURL = json.url;\n    }\n    catch (err) {\n        console.log(err.message)\n    }\n    return presignedURL;\n};\n\nexport const uploadFileToS3 = async (selectedFile) => {\n    // Step 1 - get pre-signed POST data.\n    const presignedURL = await getPresignedURL(selectedFile);\n    // if (!presignedURL)  failed to get presigned url - return rejected promise ?\n    // Step 2 - upload the file to S3.\n    return fetch(presignedURL, {\n            method: \"PUT\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: selectedFile.src.file\n        })\n};\n\n// export const uploadFileToS3 = async (presignedURL, file) => {\n//     let json = null;\n//     try {\n//         let response = await fetch(presignedURL, {\n//             method: \"PUT\",\n//             headers: {\n//                 \"Content-Type\": \"application/json\"\n//             },\n//             body: file\n//         });\n//         json = await response.json();\n//     }\n//     catch (err) {\n//         console.log(err.message)\n//     }\n//\n//     return json;\n// };\n\nexport const deleteFilesFromS3 = async (keysToDelete) => {\n    const url = `${api_uri}/delete`;\n    let deletedKeys = [];\n    try {\n        let response = await fetch(url,{\n            method:\"DELETE\",\n            headers: {\n                'Content-Type': 'application/json'\n                // 'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            body: JSON.stringify( {keys: keysToDelete})\n        });\n        let json = await response.json();\n        console.log(json.keys);\n        deletedKeys = json.keys;\n    }\n    catch (e) {\n        alert(\"error delete files\")\n    }\n    return deletedKeys;\n}\n","import React from \"react\";\nimport Files from \"react-butterfiles\";\n// import readFiles from \"../../models/readFile\";\n// import styles from \"./FileUploadButton.module.css\";\nimport Button from \"../../UI/Button/Button\"\nimport {uploadFileToS3} from \"../../models/aws_api\";\n\n/**\n * Component renders a simple \"Select file...\" button which opens a file browser.\n * Once a valid file has been selected, the upload process will start.\n * @returns {*}\n * @constructor\n */\nconst FileUploadButton = (props) => {\n    const uploadFiles = async (selectedFiles) => {\n        let promises = selectedFiles.map( selectedFile => uploadFileToS3(selectedFile) );\n        let selectedFileNames = selectedFiles.map( selectedFile => selectedFile.name );\n\n        try {\n            let respArray = await Promise.all(promises);\n            // let json_promises = respArray.map(resp => resp.json())\n            // json = await Promise.all(json_promises);\n            props.onUploadSucceed(selectedFileNames);\n            return respArray;\n        }\n        catch (err) {\n            console.log(err);\n            return err.message;\n        }\n    }\n\n    return  (\n        <Files\n            multiple={true}\n            multipleMaxCount={300}\n            onSuccess={selectedFiles => uploadFiles(selectedFiles)}\n        >\n            {({ browseFiles }) =>\n                <Button\n                    title=\"Upload log files\"\n                    text=\"Upload\"\n                    onClick={browseFiles}>\n                </Button>}\n        </Files>\n    );\n}\n\nexport default FileUploadButton;","import React from 'react';\nimport Button from '../../../UI/Button/Button';\nimport { faSyncAlt } from '@fortawesome/free-solid-svg-icons'\nimport FileUploadButton from \"../../FileUploadButton/FileUploadButton\";\nimport styles from './RunningLogsListHeader.module.css'\n\nfunction RunningLogsListHeader(props) {\n    return (\n        <header className={styles.RunningLogsListHeader}>\n            <FileUploadButton\n                onUploadSucceed={props.onUploadSucceed}\n            />\n            <Button\n                title=\"Delete log files\"\n                text=\"Delete\"\n                // icon={faSyncAlt}\n                // spin={props.loading}\n                onClick={props.onDeleteButtonPressed}\n            />\n            {/*<Button*/}\n            {/*    title=\"Compare two logs\"*/}\n            {/*    text=\"Compare\"*/}\n            {/*    // icon={faSyncAlt}*/}\n            {/*    // spin={props.loading}*/}\n            {/*    // onClick={props.onDeleteButtonPressed}*/}\n            {/*/>*/}\n            <Button\n                title=\"Reload files\"\n                icon={faSyncAlt}\n                spin={props.loading}\n                onClick={props.onRefreshButtonPressed}\n            />\n\n            {/*<span>Amazon s3 ({props.awsRegion}) ></span>*/}\n            {/*<span>*/}\n            {/*    <a href=\"https://s3.console.aws.amazon.com/s3/buckets/acp-cloud-logs/?region=eu-central-1&tab=overview#\"*/}\n            {/*       target=\"_blank\" rel=\"noopener noreferrer\">*/}\n            {/*        acp-cloud-logs*/}\n            {/*    </a>*/}\n            {/*</span>*/}\n            {/*<span>*/}\n            {/*</span>*/}\n        </header>\n    );\n}\n\nexport default RunningLogsListHeader;\n","import React, { useEffect } from \"react\";\nimport Modal from \"../Modal\";\nimport classes from \"./ModalPopup.module.css\";\n\nlet offsetX;\nlet offsetY;\nlet dragX;\nlet dragY;\n\nconst ModalPopup = (props) => {\n\n    const onBackDropClicked = (ev) => {\n        if (ev.target.id === \"backDrop\") {\n            props.closePopup();\n        }\n    };\n\n    const handleKeyDown = (ev) => {\n        if (ev.code === \"Escape\") {\n            props.closePopup();\n        }\n    };\n\n    const elementDrag = (ev) => {\n        ev = ev || window.event;\n        // calculate the new cursor position:\n        offsetX = dragX - ev.clientX;\n        offsetY = dragY - ev.clientY;\n        dragX = ev.clientX;\n        dragY = ev.clientY;\n        // set the element's new position:\n        let element = ev.target;\n        element.style.top = (element.offsetTop - offsetY) + \"px\";\n        element.style.left = (element.offsetLeft - offsetX) + \"px\";\n    };\n\n    const closeDragElement = (ev) => {\n        /* stop moving when mouse button is released:*/\n        ev.target.onmouseup = null;\n        ev.target.onmousemove = null;\n    };\n\n    const dragMouseDown = (ev) => {\n        ev = ev || window.event;\n        // get the mouse cursor position at startup:\n        dragX = ev.clientX;\n        dragY = ev.clientY;\n        ev.target.onmouseup = closeDragElement;\n        // call a function whenever the cursor moves:\n        ev.target.onmousemove = elementDrag;\n    };\n\n    useEffect(() => {\n        document.addEventListener('keydown', handleKeyDown);\n        return () => document.removeEventListener('keydown', handleKeyDown);\n    } );\n\n    return props.showPopup ? (\n        <Modal>\n            <div\n                id=\"backDrop\"\n                className={classes.BackDrop}\n                onClick={onBackDropClicked}\n            >\n                <div className={classes.ModalPopup}\n                     onMouseDown={dragMouseDown}\n                >\n                    <header>{props.header}</header>\n                    {props.children}\n                </div>\n            </div>\n        </Modal>\n    ) : null;\n};\n\nexport default ModalPopup;\n","import { useEffect } from \"react\";\nimport { createPortal } from \"react-dom\";\n\nconst Modal = ({children}) => {\n    const mount = document.getElementById(\"modal-root\");\n    const el = document.createElement(\"div\");\n\n    useEffect(() => {\n        mount.appendChild(el);\n        return () => mount.removeChild(el);\n    }, [el, mount]);\n\n    return createPortal(children, el)\n};\n\nexport default Modal;\n","/**\n * Created by alexanderbol on 13/04/2017.\n */\n\nimport React from 'react';\nimport classes from './FileContentPopup.module.css';\nimport ModalPopup from \"../../UI/ModalPopup/ModalPopup\";\n\nconst FileContentPopup = (props) => {\n    const row_lines = props.content.split('\\n');\n    return (\n        <ModalPopup\n            showPopup={props.showFileContentPopup}\n            closePopup={props.closeFileContentPopup}\n            header=\"Log File Content\"\n        >\n            <div className={classes.FileContentPopup}>\n                {\n                    row_lines.map( line =>\n                        <p>{line}</p>\n                    )\n                }\n            </div>\n        </ModalPopup>\n    )\n};\n\nexport default FileContentPopup;\n","import React, {useRef, useEffect, useState} from 'react';\nimport styles from './RunningLogListItem.module.css';\nimport FileContentPopup from \"../../FileContentPopup/FileContentPopup\";\n// import {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\n\nfunction RunningLogsListItem(props) {\n    const [showFileContentPopup, setShowFileContentPopup] = useState(false);\n    const refElement = useRef();\n\n    useEffect( () => {\n        if (props.data.selected) {\n            scrollIntoView();\n        }\n    })\n\n    const scrollIntoView = () => {\n        const tableBody = refElement.current.parentElement;\n        const table = tableBody.parentElement;\n        const tableClientRect = table.getBoundingClientRect();\n        const rowClientReact = refElement.current.getBoundingClientRect();\n        if (rowClientReact.bottom > tableClientRect.bottom) {\n            refElement.current.scrollIntoView(false);\n        }\n        if (rowClientReact.top < tableClientRect.top) {\n            refElement.current.scrollIntoView(true);\n        }\n    }\n\n    // Callback to display Log File Content Popup\n    const showLogFileContentPopup = () => {\n        setShowFileContentPopup(true)\n    }\n\n    const closeLogFileContentPopup = () => {\n        setShowFileContentPopup(false)\n    }\n\n    const itemClicked = (e) => {\n        e.preventDefault();\n        e.stopPropagation();\n\n        if (e.ctrlKey) {\n            props.checkMarkClicked();\n        }\n        else if (e.shiftKey) {\n            document.getSelection().empty();\n            props.itemShiftClicked();\n        }\n        else {\n            props.itemClicked();\n        }\n    }\n\n    let style = props.data.selected ? styles.RunningLogListItemClicked : styles.RunningLogListItem;\n    style = props.batchFailed ? `${style} ${styles.RunningLogListItemFailed}` : style;\n    // let object_url = \"https://s3.console.aws.amazon.com/s3/object/acp-cloud-logs/\"+props.data.key;\n\n    let checkMarkStyle = props.marked ?\n        styles.RunningLogListItemCheckMarkClicked : styles.RunningLogListItemCheckMarkNotClicked;\n\n    return (\n        <>\n            <tr className={style} onClick={itemClicked} ref={refElement}>\n                    <td>\n                        <h4 className={checkMarkStyle}>\n                            {/*✓*/}\n                            {/*<FontAwesomeIcon icon=\"trash\" />*/}\n                            X\n                        </h4>\n                    </td>\n                <td>\n                    {props.data.runningDate}\n                </td>\n                <td>\n                    {props.data.jobName}\n                </td>\n                <td>\n                    {props.data.step}\n                </td>\n                <td>\n                    {props.data.checklist}\n                </td>\n                <td className={styles.RunningLogListItemNumeric}>\n                    {props.data.actionsNum}\n                </td>\n                <td className={styles.RunningLogListItemNumeric}>\n                    {props.data.layersNum}\n                </td>\n                <td className={styles.RunningLogListItemNumeric}>\n                    {props.data.batchJobsNum}\n                </td>\n                <td>\n                    {props.data.runningTime || \"Failed\"}\n                </td>\n                <td>\n                    <div onClick={showLogFileContentPopup} >\n                        {props.data.key}\n                    </div>\n                    {/*<a href={object_url} target=\"_blank\" rel=\"noopener noreferrer\">*/}\n                    {/*    {props.data.key}*/}\n                    {/*</a>*/}\n                </td>\n            </tr>\n\n            {showFileContentPopup ?\n                <FileContentPopup\n                    showFileContentPopup={showFileContentPopup}\n                    closeFileContentPopup={closeLogFileContentPopup}\n                    content={props.data.text}\n                /> : null }\n\n        </>\n    );\n}\n\nexport default RunningLogsListItem;\n","import React, {useEffect} from 'react';\nimport InfiniteScroll from 'react-infinite-scroll-component';\nimport styles from './RunningLogsListTable.module.css';\nimport RunningLogsListItem from \"../RunningLogListItem/RunningLogListItem\";\n\nfunction RunningLogsListTable(props) {\n    useEffect( () => {\n        const handleKeyDown = (e) => {\n            switch (e.code) {\n                case \"ArrowDown\":\n                    e.stopPropagation();\n                    e.preventDefault();\n                    if (props.selectedIndex < props.logsListData.length-1) {\n                        props.logItemClicked(props.selectedIndex+1);\n                    }\n                    break;\n                case \"ArrowUp\":\n                    e.stopPropagation();\n                    e.preventDefault();\n                    if (props.selectedIndex > 0) {\n                        props.logItemClicked(props.selectedIndex-1);\n                    }\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        document.addEventListener('keydown', handleKeyDown);\n\n        return () => {\n            document.removeEventListener('keydown', handleKeyDown);\n        };\n    })\n\n    const fetchMoreData = () => {\n        // alert(\"Fetch more data\")\n        // props.fetchMoreData();\n    }\n\n    return (\n        <div>\n            <InfiniteScroll\n                dataLength={props.logsListData?.length}\n                next={fetchMoreData}\n                hasMore={true}\n            >\n\n                <table className={styles.RunningLogsListTable}>\n                    <thead>\n                    <tr>\n                        <th className={styles.RunningLogsListTableCheckMark} style={{width: \"3%\"}}>X</th>\n                        <th style={{width:\"15%\"}}>Running date</th>\n                        <th style={{width:\"22%\"}}>Job Name</th>\n                        <th style={{width:\"3%\"}}>Step</th>\n                        <th style={{width:\"15%\"}}>Checklist</th>\n                        <th style={{width:\"5%\"}}># Actions</th>\n                        <th style={{width:\"5%\"}}># Layers</th>\n                        <th style={{width:\"5%\"}}># ACPs</th>\n                        <th style={{width:\"4%\"}}>Running Time</th>\n                        <th style={{width:\"13%\"}}>Log File Name</th>\n                    </tr>\n                    </thead>\n                    <tbody>\n                        {props.logsListData?.map( (data, index) =>\n                            <RunningLogsListItem key={index}\n                                                 data={data}\n                                                 // selected={props.selectedIndex===index}\n                                                 marked={data.marked}\n                                                 batchFailed={!!data.errorTime}\n                                                 itemClicked={() => props.logItemClicked(index)}\n                                                 itemShiftClicked = {() => props.logItemShiftClicked(index)}\n                                                 checkMarkClicked = {() => props.checkMarkClicked(index)}\n                            />\n                        )}\n                    </tbody>\n                </table>\n            </InfiniteScroll>\n\n        </div>\n    );\n}\n\nexport default RunningLogsListTable;\n","export function getChartData(data) {\n    let stats = data.batch.map(action => {\n        let timestamp = data.acpTime.find(\n            a => a.Stage === action.Stage && a.Index === action.StageIndex\n        );\n        return {\n            Object: timestamp.Succeed ? \"Acp\" : \"Acp Failed\",\n            Stage: action.Stage,\n            Index: action.Stage + '_' + action.StageIndex,\n            ActNum: action.ActNum,\n            Name: action.AnalysisName,\n            Layer: action.LayerName,\n            ActParam: action.ActParam,\n            BeginNf: action.BeginNf,\n            EndNf: action.EndNf,\n            ContourGroupId: action.ContourGroupId,\n            ContourGroupNum: action.ContourGroupNum,\n            StartDate: timestamp ? timestamp.StartTime : \"\",\n            EndDate: timestamp ? timestamp.CompleteTime : \"\",\n            Time: time_diff(timestamp.StartTime, timestamp.CompleteTime)\n        };\n    });\n\n    let uploadObj = {\n        Object: \"Upload\",\n        Name: \"Upload\",\n        Index: -1,\n        StartDate: data.uploadTime.StartTime,\n        EndDate: data.uploadTime.CompleteTime\n    };\n\n    let splitterObj = {\n        Object: \"Splitter\",\n        Name: \"Splitter\",\n        Index: 0,\n        StartDate: data.splitterTime.StartTime,\n        EndDate: data.splitterTime.CompleteTime\n    };\n\n    let mergerObj;\n    if (data.mergerTime.StartTime && data.mergerTime.CompleteTime) {\n        mergerObj = {\n            Object: \"Merger\",\n            Name: \"Merger\",\n            Index: stats.length + 1,\n            StartDate: data.mergerTime.StartTime,\n            EndDate: data.mergerTime.CompleteTime\n        };\n    }\n\n    let downloadObj;\n    if (data.downloadTime.StartTime && data.downloadTime.CompleteTime) {\n        downloadObj = {\n            Object: \"Download\",\n            Name: \"Download\",\n            Index: stats.length + 2,\n            StartDate: data.downloadTime.StartTime,\n            EndDate: data.downloadTime.CompleteTime\n        };\n    }\n\n    stats = [uploadObj, splitterObj, ...stats];\n    if (mergerObj) stats = [...stats, mergerObj];\n    if (downloadObj) stats = [...stats, downloadObj];\n\n    return stats;\n}\n\n\nexport function getListData(localData) {\n    const actionsNum = localData?.batch[localData.batch.length - 1].ActNum;\n    const layersNum = new Set(localData?.batch.map(action => action.LayerName)).size;\n    return {\n        runningDate: localData?.runningDate,\n        jobName: localData?.jobName,\n        step: localData?.batch[0].StepName,\n        checklist: localData?.batch[0].ChecklistName,\n        actionsNum: actionsNum,\n        layersNum: layersNum,\n        runningTime: localData?.runningTime,\n        batchJobsNum: localData?.batch.length,\n        key: localData?.key,\n        errorTime: localData?.errorTime,\n        text: localData?.text,\n        marked: localData?.marked,\n        selected: localData?.selected\n    }\n}\n\n// function time_diff(start_time, complete_time) {\n//     let start = start_time.split(':').map(t => Number(t));\n//     let start_sec = start[0] * 3600 + start[1] * 60 + start[2];\n//     let complete = complete_time.split(':').map(t => Number(t));\n//     let complete_sec = complete[0] * 3600 + complete[1] * 60 + complete[2];\n//     let diff_sec = complete_sec - start_sec;\n//     return diff_sec;\n// }\n\nfunction time_diff(start_time, complete_time) {\n    if (start_time instanceof Date && !isNaN(start_time) &&\n    complete_time instanceof Date && !isNaN(complete_time)) {\n     return msecToHHMMSS(complete_time - start_time);\n    }\n    else {\n        return 0;\n    }\n}\n\nfunction msecToHHMMSS(time) {\n    return new Date(time).toISOString().substr(11, 8);\n}\n","import React from 'react';\nimport styles from './RunningLogsList.module.css';\nimport RunningLogsListHeader from \"./RunningLogsListHeader/RunningLogsListHeader\";\nimport RunningLogsListTable from \"./RunningLogsListTable/RunningLogsListTable\";\nimport {getListData} from \"../../models/logData\";\n\nfunction RunningLogsList(props) {\n    // Setup data before rendering\n    let logsListData = [];\n    if (props.logDataArray.length > 0) {\n        logsListData = props.logDataArray.map(data => getListData(data))\n    }\n    return (\n        <div className={styles.RunningLogsList}>\n            <RunningLogsListHeader\n                loading={props.loading}\n                onUploadSucceed={props.onUploadSucceed}\n                onDeleteButtonPressed={props.onDeleteButtonPressed}\n                onRefreshButtonPressed={props.onRefreshButtonPressed}\n            />\n\n            <RunningLogsListTable\n                logsListData={logsListData}\n                selectedIndex={props.selectedIndex}\n                logItemClicked={props.logItemClicked}\n                logItemShiftClicked={props.logItemShiftClicked}\n                checkMarkClicked={props.checkMarkClicked}\n                fetchMoreData={props.onRefreshButtonPressed}\n            />\n\n        </div>\n    );\n}\n\nexport default RunningLogsList;\n","import React from 'react';\nimport { VegaLite } from 'react-vega'\nimport styles from './VegaLiteChart.module.css';\nimport {getChartData, getListData} from \"../../../models/logData\";\n\nfunction VegaLiteChart(props) {\n    // Setup data before rendering\n    let chartData = null;\n    let runData = null;\n\n    let localData = props.logData;\n    try {\n        chartData = getChartData(localData);\n    } catch (e) {\n        chartData = null;\n    }\n    runData = getListData(localData);\n\n    const client = runData.key.split('-')[0] || \"unknown\";\n    const spec = {\n        \"$schema\": \"https://vega.github.io/schema/vega-lite/v4.json\",\n        title: {\n            text: runData?.jobName,\n            subtitle: `Client: ${client} Running time: ${runData?.runningTime}`\n        },\n        data: { values: chartData },\n        mark: { type: \"bar\", tooltip: [] },\n        encoding: {\n            x: {\n                type: \"temporal\",\n                field: \"StartDate\",\n                timeUnit: \"hoursminutesseconds\"\n            },\n            x2: {\n                type: \"temporal\",\n                field: \"EndDate\",\n                timeUnit: \"hoursminutesseconds\"\n            },\n            y: {\n                type: \"nominal\",\n                field: \"Index\",\n                sort: null\n            },\n            color: { field: \"Object\" }\n        },\n        // resize: true,\n        width: props.width,\n        // height: 800,\n        autosize: \"fit\",\n    }\n\n    return (\n        <div className={styles.VegaLiteChart}>\n            {\n                chartData && runData.runningTime ?\n                    <VegaLite\n                        spec={spec}\n                        data={chartData}\n                        actions={{\n                            export: true,\n                            source: false,\n                            compiled: false,\n                            editor: false\n                        }}\n                        downloadFileName={runData?.jobName}\n                        theme=\"urbaninstitute\"\n                    /> : null\n            }\n        </div>\n    );\n}\n\nexport default VegaLiteChart;\n","import React, {useEffect, useRef, useState} from \"react\";\nimport styles from \"./ChartAreaComponent.module.css\";\nimport VegaLiteChart from \"./VegaLiteChart/VegaLiteChart\";\n\nconst ChartAreaComponent = (props) => {\n    const refContainer = useRef(null);\n    const [chartWidth, setChartWidth] = useState(800);\n\n    useEffect( () => {\n        if (refContainer.current) {\n            const currentContainerWidth = refContainer.current.clientWidth;\n            const numCharts = props.logDataArray.length;\n            const currentChartWidth = numCharts === 1 ? 800 : 0.8 * currentContainerWidth / 2;\n            setChartWidth(currentChartWidth);\n        }\n    },[props.logDataArray.length])\n\n    return props.logDataArray.length > 0 ? (\n        <div className={styles.ChartAreaComponent}  ref={refContainer}>\n            {\n                props.logDataArray.map( (data, index) => (\n                    <VegaLiteChart\n                        key={index}\n                        logData={data}\n                        width={chartWidth}\n                    />\n                ))\n            }\n        </div>\n    ) : null;\n}\n\nexport default ChartAreaComponent","export function parse(text) {\n    const row_lines = text.split('\\n');\n    const arrayOfTimestamps = timestamps(row_lines);\n    const errorTimeString = errorTime(row_lines, arrayOfTimestamps);\n    return {\n        runningDate: runningDate(arrayOfTimestamps),\n        runningTime: runningTime(arrayOfTimestamps, errorTimeString),\n        jobName: jobName(row_lines),\n        batch: batch(arrayOfTimestamps),\n        uploadTime: uploadTime(arrayOfTimestamps),\n        splitterTime: splitterTime(arrayOfTimestamps),\n        acpTime: acpTime(row_lines, arrayOfTimestamps),\n        mergerTime: mergerTime(arrayOfTimestamps),\n        downloadTime: downloadTime(arrayOfTimestamps),\n        errorTime: errorTimeString\n    };\n}\n\nfunction jobName(row_lines) {\n    const job_line = row_lines.filter(line => line.match(\"Job:\"))[0];\n    const job_name = job_line.split(' ')[1];\n    return job_name;\n}\n\nfunction runningDate(arrayOfTimestamps) {\n    let job_started = arrayOfTimestamps.filter(\n        line => line.message === \"Ready for commands\"\n    )[0];\n    return job_started.utcDate.toLocaleString();\n}\n\n// function runningDate(row_lines) {\n//     let arrayOfLines = row_lines.filter(line => line.match(\"time\"));\n//     let splitArray = arrayOfLines[0].split(' ');\n//     let [day, month, year] = splitArray[1].split(':')[1].split('/');\n//     if (day.length > 2) day = day.substr(1);\n//     let [hour, min] = splitArray[2].split(':');\n//     if (hour.trim().length > 2) hour = hour.substr(1);\n//     if (min.trim().length > 2) min = min.substr(1);\n//     return new Date(Date.UTC(year, month - 1, day, hour, min)).toUTCString();\n// }\n\nfunction runningTime(arrayOfTimestamps, errorTime) {\n    let job_started = arrayOfTimestamps.filter(\n        line => line.message === \"Ready for commands\"\n    )[0];\n    let start_time = job_started.utcDate;\n    let job_ended_arr = arrayOfTimestamps.filter(\n        line => line.message === \"Job is ready\"\n    );\n    let end_time = job_ended_arr.length > 0 ? job_ended_arr[0].utcDate : errorTime;\n\n    return end_time ? time_diff(start_time, end_time) : \"\";\n}\n\nfunction batch(arrayOfTimestamps) {\n    let batchObjectList = arrayOfTimestamps.filter(d => d.type === \"Batch\");\n    let messageList = batchObjectList.map(batchObject =>\n        batchObject.message.slice(2)\n    );\n    let message = messageList.join(\"\");\n    return JSON.parse(message);\n}\n\nfunction uploadTime(arrayOfTimestamps) {\n    let uploadTime = {\n        StartTime: arrayOfTimestamps.find(\n            d => d.object === \"WebClient\" && d.message === \"Job was registered\"\n        ).utcDate,\n        CompleteTime: arrayOfTimestamps.find(\n            d => d.object === \"WebClient\" && d.message === \"After send\"\n        ).utcDate\n    };\n    return uploadTime;\n}\n\nfunction splitterTime(arrayOfTimestamps) {\n    let splitter = arrayOfTimestamps.filter(d => d.object === \"Splitter\")\n    let s = {\n        StartTime: splitter.find(s => s.message === \"Splitter started\").utcDate,\n        CompleteTime: splitter.find(s => s.message === \"End of Split\").utcDate\n    };\n    return s;\n}\n\nfunction mergerTime(arrayOfTimestamps) {\n    let merger = arrayOfTimestamps.filter(d => d.object === \"Merger\");\n    let mergerStartMessage = merger.find(s => s.message === \"Preparing job for merge\");\n    let mergerCompleteMessage = merger.find(s => s.message === \"Moving Job to S3\");\n\n    let s = {\n        StartTime: mergerStartMessage ? mergerStartMessage.utcDate : null,\n        CompleteTime: mergerCompleteMessage ? mergerCompleteMessage.utcDate : null\n    };\n    return s;\n}\n\nfunction downloadTime(arrayOfTimestamps) {\n    let downloadStartMessage = arrayOfTimestamps.find(d => d.object === \"WebClient\" && d.message === \"Download Data\");\n    let downloadCompleteMessage = arrayOfTimestamps.find(d => d.object === \"WebClient\" && d.message === \"Job is ready\");\n    let downloadTime = {\n        StartTime: downloadStartMessage ? downloadStartMessage.utcDate : null,\n        CompleteTime: downloadCompleteMessage ? downloadCompleteMessage.utcDate : null\n    };\n    return downloadTime;\n}\n\nfunction acpTime(row_lines, arrayOfTimestamps) {\n    let errorTimeStr = errorTime(row_lines, arrayOfTimestamps);\n    let acp = arrayOfTimestamps.filter(d => (d.type === \"Progress\" || d.type === \"Info\") && d.object === \"ACP\");\n    let acp_transformed = acp.map(action => {\n        let message = action.message.split(' ');\n        return {\n            Time: action.utcDate,\n            Step: message[0],\n            Stage: message[1].split(':')[1],\n            Index: Number(message[2].split(':')[1]) + 1\n        };\n    });\n    let acp_started = acp_transformed\n        .filter(action => action.Step === \"Starting\")\n        .map(action => {\n            return {\n                Stage: action.Stage,\n                Index: action.Index,\n                StartTime: action.Time\n            };\n        });\n    let acp_completed = acp_transformed\n        .filter(action => action.Step === \"Completing\")\n        .map(action => {\n            return {\n                Stage: action.Stage,\n                Index: action.Index,\n                CompleteTime: action.Time\n            };\n        });\n    let acp_timestamp = acp_started.map(action => {\n        let completeTimeMessage = acp_completed.find(\n            c => c.Stage === action.Stage && c.Index === action.Index\n        );\n\n        return {\n            Stage: action.Stage,\n            Index: action.Index,\n            StartTime: action.StartTime,\n            CompleteTime: completeTimeMessage ? completeTimeMessage.CompleteTime : errorTimeStr,\n            Succeed: !!completeTimeMessage\n        };\n    });\n    return acp_timestamp;\n}\n\nfunction errorTime(row_lines, arrayOfTimestamps) {\n    let errorMessage = arrayOfTimestamps.find(\n        d => d.object === \"WebClient\" && d.type === \"ERROR\"\n    );\n\n    let errorTime = null;\n    if (errorMessage) {\n        errorTime = errorMessage.utcDate\n    }\n    // else {\n    //     let ping_lines = row_lines\n    //         .filter(line => line.match(\"I am alive\"));\n    //     errorTime = ping_lines.length > 0 ? JSON.parse(ping_lines[ping_lines.length - 1]).Time : null;\n    // }\n    return errorTime;\n}\n\nfunction timestamps(row_lines) {\n    let arrayOfLines = row_lines.filter(line => line.match(\"time\"));\n    let tmpArrayOfLines = [...arrayOfLines];\n    tmpArrayOfLines.splice(0, 1);\n    let arrayOfTimestamps = [];\n    let timeStamp;\n    let utcDate;\n    let dateStr = \"\";\n    for (let i = 0; i < tmpArrayOfLines.length; i++) {\n        try {\n            timeStamp = JSON.parse(tmpArrayOfLines[i]);\n            if (timeStamp.message === \"Submit Splitter\") continue; // bad format\n            utcDate = timeStampToDate(timeStamp.time, dateStr);\n            dateStr = utcDate.toDateString();\n            arrayOfTimestamps.push({ utcDate, ...timeStamp });\n        } catch (e) {\n            return [i, tmpArrayOfLines[i]];\n        }\n    }\n    return arrayOfTimestamps;\n}\n\nfunction time_diff(start_time, complete_time) {\n    if (start_time instanceof Date && !isNaN(start_time) &&\n        complete_time instanceof Date && !isNaN(complete_time)) {\n        return msecToHHMMSS(complete_time - start_time);\n    }\n    else {\n        return 0;\n    }\n}\n\nfunction msecToHHMMSS(time) {\n    return new Date(time).toISOString().substr(11, 8);\n}\n\nfunction timeStampToDate(timeStr, dateStr) {\n    let splitArray = timeStr.split(', ');\n    if (splitArray.length === 1) {   // bad format only time no date\n        return new Date(dateStr + ' ' + timeStr)\n    }\n    else {\n        let [month, day, year] = splitArray[0].split('/');\n        let [hour, min, sec] = splitArray[1].split(':');\n        return new Date(Date.UTC(year, month - 1, day, hour, min, sec)); // .toUTCString();\n    }\n}\n","import React, {useEffect, useState} from 'react';\nimport styles from './MainComponent.module.css';\nimport RunningLogsList from \"../RunningLogsList/RunningLogsList\";\nimport ChartAreaComponent from \"../ChartAreaComponent/ChartAreaComponent\";\nimport {parse} from \"../../models/logFileParser\";\nimport {/*fetchFileContentByKeysList,*/ fetchFileContent, fetchKeysList, deleteFilesFromS3} from \"../../models/aws_api\";\n\nfunction MainComponent(props) {\n    const [logDataArray, setLogDataArray] = useState([]);\n    // const [index, setIndex] = useState(0);\n    const [loading, setLoading] = useState(false);\n\n    // const numInChunk = 8;\n\n    // Fetch content of files from s3 bucket by given list of keys\n    // const fetchDataByKeysList = async (keysList) => {\n    //     let textArray = await fetchFileContentByKeysList(keysList);\n    //     let dataArray = textArray.map( e => parse(e.text));\n    //     dataArray.forEach( (data,i) => data.key = keysList[i] )\n    //     dataArray.forEach( (data,i) => data.text = textArray[i].text )\n    //     return dataArray;\n    // }\n\n    // Fetch content of one file from s3 bucket by given key\n    const fetchData = async (localDataArray, key, index) => {\n        return new Promise( async (resolve, reject) => {\n            try {\n                let text = await fetchFileContent(key);\n                let data = parse(text.text);\n                data.key = key;\n                data.text = text.text;\n                data.marked = false;\n                data.selected = false;\n\n                localDataArray[index] = data;\n                let newDataArray = logDataArray.concat(localDataArray);\n                newDataArray.filter (data => data !== undefined)\n                setLogDataArray(newDataArray);             // trigger rendering\n                resolve(data);\n            }\n            catch (err) {\n                reject(err.message)\n            }\n        })\n    }\n\n    const fetchMoreData = async (keysListToFetch) => {\n        setLoading(true);\n\n        let keysList = keysListToFetch || await fetchKeysList();\n        let filteredKeysList = filterNewKeysList(keysList);\n        // let chunkOfKeysList = filteredKeysList.slice(0,numInChunk);\n        if (filteredKeysList.length > 0) {\n            let localDataArray = new Array(filteredKeysList.length);\n            let promises = filteredKeysList.map( (key, index) => fetchData(localDataArray, key, index));\n            try {\n                let fetchedDataArray = await Promise.all(promises);\n                let newDataArray = logDataArray.concat(fetchedDataArray);\n                newDataArray.sort(function(a,b){\n                    return new Date(b.runningDate) - new Date(a.runningDate);\n                });\n                if (!newDataArray.some(data => data.marked)) {\n                    newDataArray[0].marked = true;\n                }\n                if (!newDataArray.some(data => data.selected)) {\n                    newDataArray[0].selected = true;\n                }\n                setLogDataArray(newDataArray);             // trigger rendering\n            } catch (err) {\n                console.log(err.message)\n            }\n        }\n\n        setLoading(false);\n    }\n\n    // Filter keysList: keep only new keys that do not exist in logDataArray\n    const filterNewKeysList = (keysList) => {\n        let filteredKeyList = keysList\n            .filter( key => !logDataArray.some( data => data.key === key))\n        return filteredKeyList;\n    }\n\n    const syncData = () => {\n        fetchMoreData()\n    }\n\n    const fetchUploaded = (keysList) => {\n        fetchMoreData(keysList)\n    }\n\n    // Callback to set new chart data and update selected index\n    const logItemClicked = (clickedIndex) => {\n        let newLogDataArray = logDataArray.slice();\n        newLogDataArray.forEach( (data, i) => {\n            data.marked = (i === clickedIndex);\n            data.selected = (i === clickedIndex);\n        });\n        setLogDataArray(newLogDataArray);             // trigger rendering\n        // setIndex(clickedIndex);                    // trigger rendering\n    }\n\n    const logItemShiftClicked = (clickedIndex) => {\n        let newLogDataArray = logDataArray.slice();\n        newLogDataArray.forEach( (data, i) =>\n            i === clickedIndex ? data.selected = !data.selected : data.selected);\n        setLogDataArray(newLogDataArray);             // trigger rendering\n        // setIndex(clickedIndex);                    // trigger rendering\n    }\n\n    const checkMarkClicked = (clickedIndex) => {\n        // if (clickedIndex === index) return;\n        let newLogDataArray = logDataArray.slice();\n        newLogDataArray.forEach( (data, i) =>\n            i === clickedIndex ? data.marked = !data.marked : data.marked);\n        setLogDataArray(newLogDataArray);             // trigger rendering\n    }\n\n    const deleteFile = async () => {\n        let keysToDelete = logDataArray\n            .filter( data => data.marked )\n            .map( data => data.key);\n        if (keysToDelete.length === 0) return;\n        let keyStr = keysToDelete.join(\"\\n\");\n        let message = keysToDelete.length === 1 ?\n            `1 file will be deleted:\\n ${keyStr}` :\n            `${keysToDelete.length} files will be deleted:\\n ${keyStr}`;\n        let ok = window.confirm(message);\n        if (ok) {\n            let deletedKeys = await deleteFilesFromS3(keysToDelete);\n            // let firstDeletedInd = logDataArray.findIndex(data => deletedKeys.includes(data.key));\n            // let newIndex = Math.max(0, firstDeletedInd - 1);\n            let newLogDataArray = logDataArray.filter(data => !deletedKeys.includes(data.key));\n            setLogDataArray(newLogDataArray);             // trigger rendering\n            // setIndex(newIndex);\n        }\n    }\n\n    // Effect to load all data from AWS s3 bucket after component mounted\n    useEffect( () => {\n        fetchMoreData();\n    },[]);\n\n    return (\n        <main className={styles.MainComponent}>\n            <RunningLogsList\n                logDataArray={logDataArray}\n                // selectedIndex={index}\n                loading={loading}\n                logItemClicked={logItemClicked}\n                logItemShiftClicked={logItemShiftClicked}\n                checkMarkClicked={checkMarkClicked}\n                onUploadSucceed={fetchUploaded}\n                onDeleteButtonPressed={deleteFile}\n                onRefreshButtonPressed={syncData}\n            />\n            <ChartAreaComponent\n                logDataArray={logDataArray.filter( data => data.selected )}\n                // index={index}\n            />\n        </main>\n    );\n}\n\nexport default MainComponent;\n","import React from 'react';\nimport MainComponent from \"./components/MainComponent/MainComponent\";\nimport './App.css';\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <div className=\"content\">\n                <h2>Cloud Log Viewer</h2>\n                <hr />\n                <MainComponent />\n                <hr />\n            </div>\n            <footer className=\"footer\">\n                <p style={{fontSize:\"12px\"}}>Alex Bol 2020</p>\n            </footer>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"RunningLogListItem\":\"RunningLogListItem_RunningLogListItem__wcmB-\",\"fadeIn\":\"RunningLogListItem_fadeIn__1zpoe\",\"RunningLogListItemClicked\":\"RunningLogListItem_RunningLogListItemClicked__2euIm\",\"RunningLogListItemFailed\":\"RunningLogListItem_RunningLogListItemFailed__sXOJI\",\"RunningLogListItemNumeric\":\"RunningLogListItem_RunningLogListItemNumeric__28nyp\",\"RunningLogListItemClickable\":\"RunningLogListItem_RunningLogListItemClickable__1XJdG\",\"RunningLogListItemCheckMarkClicked\":\"RunningLogListItem_RunningLogListItemCheckMarkClicked__1BOa9\",\"RunningLogListItemCheckMarkNotClicked\":\"RunningLogListItem_RunningLogListItemCheckMarkNotClicked__2ypBQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"RunningLogsListTable\":\"RunningLogsListTable_RunningLogsListTable__3tUhi\",\"fadeIn\":\"RunningLogsListTable_fadeIn__1fouu\",\"RunningLogsListTableCheckMark\":\"RunningLogsListTable_RunningLogsListTableCheckMark__32xWg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"BackDrop\":\"ModalPopup_BackDrop__3oXJD\",\"ModalPopup\":\"ModalPopup_ModalPopup__3TsOV\",\"fadeIn\":\"ModalPopup_fadeIn__1BHZf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"MainComponent\":\"MainComponent_MainComponent__1UCA3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"RunningLogsList\":\"RunningLogsList_RunningLogsList__1jWMA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Button\":\"Button_Button__3h9Fb\",\"Icon\":\"Button_Icon__c_IsA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"RunningLogsListHeader\":\"RunningLogsListHeader_RunningLogsListHeader__2REzz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"FileContentPopup\":\"FileContentPopup_FileContentPopup__1wTAX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ChartAreaComponent\":\"ChartAreaComponent_ChartAreaComponent__3DSdR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"VegaLiteChart\":\"VegaLiteChart_VegaLiteChart__3RPYi\"};"],"sourceRoot":""}