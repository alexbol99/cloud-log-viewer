{"version":3,"sources":["UI/ModalPopup/ModalPopup.js","UI/Modal.js","components/FileContentPopup/FileContentPopup.js","components/RunningLogsList/RunningLogListItem/RunningLogListItem.js","components/RunningLogsList/RunningLogsListTable/RunningLogsListTable.js","components/FileUploadButton/FileUploadButton.js","components/RunningLogsList/RunningLogsList.js","components/VegaLiteChart/VegaLiteChart.js","models/logData.js","models/logFileParser.js","components/MainComponent/MainComponent.js","App.js","serviceWorker.js","index.js","components/RunningLogsList/RunningLogListItem/RunningLogListItem.module.css","UI/ModalPopup/ModalPopup.module.css","components/FileUploadButton/FileUploadButton.module.css","components/MainComponent/MainComponent.module.css","components/RunningLogsList/RunningLogsList.module.css","components/RunningLogsList/RunningLogsListTable/RunningLogsListTable.module.css","components/FileContentPopup/FileContentPopup.module.css","components/VegaLiteChart/VegaLiteChart.module.css"],"names":["offsetX","offsetY","dragX","dragY","Modal","children","mount","document","getElementById","el","createElement","useEffect","appendChild","removeChild","createPortal","ModalPopup","props","handleKeyDown","ev","code","closePopup","elementDrag","window","event","clientX","clientY","element","target","style","top","offsetTop","left","offsetLeft","closeDragElement","onmouseup","onmousemove","addEventListener","removeEventListener","showPopup","id","className","classes","BackDrop","onClick","onMouseDown","header","FileContentPopup","row_lines","content","split","showFileContentPopup","closeFileContentPopup","map","line","RunningLogsListItem","useState","setShowFileContentPopup","refElement","useRef","selected","scrollIntoView","styles","RunningLogListItemClicked","RunningLogListItem","batchFailed","RunningLogListItemFailed","tableClientRect","current","parentElement","getBoundingClientRect","rowClientReact","bottom","Fragment","itemClicked","ref","data","runningDate","jobName","step","checklist","RunningLogListItemNumeric","actionsNum","layersNum","batchJobsNum","runningTime","index","key","text","RunningLogsListTable","e","stopPropagation","preventDefault","selectedIndex","logsListData","length","logItemClicked","dataLength","next","hasMore","width","errorTime","getPresignedURL","selectedFile","a","url","name","presignedURL","fetch","response","json","console","log","message","uploadFileToS3","file","method","headers","body","FileUploadButton","onSuccess","src","resp","onUploadSucceed","browseFiles","FileUploadButtonButton","RunningLogsList","fetchMoreData","onRefreshButtonPressed","VegaLiteChart","spec","title","runData","values","mark","type","tooltip","encoding","x","field","timeUnit","x2","y","sort","color","autosize","VegaLite","getListData","localData","batch","ActNum","Set","action","LayerName","size","StepName","ChecklistName","parse","arrayOfTimestamps","arrayOfLines","filter","match","tmpArrayOfLines","splice","timeStamp","utcDate","dateStr","i","JSON","timeStampToDate","time","toDateString","push","timestamps","errorTimeString","uploadTime","splitterTime","acpTime","mergerTime","downloadTime","toLocaleString","start_time","job_ended_arr","end_time","complete_time","Date","toISOString","substr","time_diff","d","batchObject","slice","join","StartTime","find","object","CompleteTime","splitter","s","merger","mergerStartMessage","mergerCompleteMessage","downloadStartMessage","downloadCompleteMessage","errorTimeStr","acp_transformed","Time","Step","Stage","Index","Number","acp_started","acp_completed","completeTimeMessage","c","Succeed","errorMessage","timeStr","splitArray","month","day","year","hour","min","sec","UTC","MainComponent","logDataArray","setLogDataArray","setIndex","loading","setLoading","chartData","api_uri","fetchKeysList","keysList","keys","fetchDataByKeysList","promises","Promise","all","respArray","json_promises","textArray","dataArray","forEach","keysListToFetch","filteredKeysList","filterNewKeysList","chunkOfKeysList","newDataArray","localDataArray","concat","b","some","mergerObj","downloadObj","stats","timestamp","StageIndex","Object","Name","AnalysisName","Layer","ActParam","BeginNf","EndNf","ContourGroupId","ContourGroupNum","StartDate","EndDate","uploadObj","splitterObj","getChartData","awsRegion","App","fontSize","Boolean","location","hostname","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","module","exports"],"mappings":"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","file":"static/js/main.4c63cc4a.chunk.js","sourcesContent":["import React, { useEffect } from \"react\";\nimport Modal from \"../Modal\";\nimport classes from \"./ModalPopup.module.css\";\n\nlet offsetX;\nlet offsetY;\nlet dragX;\nlet dragY;\n\nconst ModalPopup = (props) => {\n\n    const onBackDropClicked = (ev) => {\n        if (ev.target.id === \"backDrop\") {\n            props.closePopup();\n        }\n    };\n\n    const handleKeyDown = (ev) => {\n        if (ev.code === \"Escape\") {\n            props.closePopup();\n        }\n    };\n\n    const elementDrag = (ev) => {\n        ev = ev || window.event;\n        // calculate the new cursor position:\n        offsetX = dragX - ev.clientX;\n        offsetY = dragY - ev.clientY;\n        dragX = ev.clientX;\n        dragY = ev.clientY;\n        // set the element's new position:\n        let element = ev.target;\n        element.style.top = (element.offsetTop - offsetY) + \"px\";\n        element.style.left = (element.offsetLeft - offsetX) + \"px\";\n    };\n\n    const closeDragElement = (ev) => {\n        /* stop moving when mouse button is released:*/\n        ev.target.onmouseup = null;\n        ev.target.onmousemove = null;\n    };\n\n    const dragMouseDown = (ev) => {\n        ev = ev || window.event;\n        // get the mouse cursor position at startup:\n        dragX = ev.clientX;\n        dragY = ev.clientY;\n        ev.target.onmouseup = closeDragElement;\n        // call a function whenever the cursor moves:\n        ev.target.onmousemove = elementDrag;\n    };\n\n    useEffect(() => {\n        document.addEventListener('keydown', handleKeyDown);\n        return () => document.removeEventListener('keydown', handleKeyDown);\n    } );\n\n    return props.showPopup ? (\n        <Modal>\n            <div\n                id=\"backDrop\"\n                className={classes.BackDrop}\n                onClick={onBackDropClicked}\n            >\n                <div className={classes.ModalPopup}\n                     onMouseDown={dragMouseDown}\n                >\n                    <header>{props.header}</header>\n                    {props.children}\n                </div>\n            </div>\n        </Modal>\n    ) : null;\n};\n\nexport default ModalPopup;\n","import { useEffect } from \"react\";\nimport { createPortal } from \"react-dom\";\n\nconst Modal = ({children}) => {\n    const mount = document.getElementById(\"modal-root\");\n    const el = document.createElement(\"div\");\n\n    useEffect(() => {\n        mount.appendChild(el);\n        return () => mount.removeChild(el);\n    }, [el, mount]);\n\n    return createPortal(children, el)\n};\n\nexport default Modal;\n","/**\n * Created by alexanderbol on 13/04/2017.\n */\n\nimport React from 'react';\nimport classes from './FileContentPopup.module.css';\nimport ModalPopup from \"../../UI/ModalPopup/ModalPopup\";\n\nconst FileContentPopup = (props) => {\n    const row_lines = props.content.split('\\n');\n    return (\n        <ModalPopup\n            showPopup={props.showFileContentPopup}\n            closePopup={props.closeFileContentPopup}\n            header=\"Log File Content\"\n        >\n            <div className={classes.FileContentPopup}>\n                {\n                    row_lines.map( line =>\n                        <p>{line}</p>\n                    )\n                }\n            </div>\n        </ModalPopup>\n    )\n};\n\nexport default FileContentPopup;\n","import React, {useRef, useEffect, useState} from 'react';\nimport styles from './RunningLogListItem.module.css';\nimport FileContentPopup from \"../../FileContentPopup/FileContentPopup\";\n\nfunction RunningLogsListItem(props) {\n    const [showFileContentPopup, setShowFileContentPopup] = useState(false);\n    const refElement = useRef();\n    useEffect( () => {\n        if (props.selected) {\n            scrollIntoView();\n        }\n    })\n\n    let style = props.selected ? styles.RunningLogListItemClicked : styles.RunningLogListItem;\n    style = props.batchFailed ? `${style} ${styles.RunningLogListItemFailed}` : style;\n    // let object_url = \"https://s3.console.aws.amazon.com/s3/object/acp-cloud-logs/\"+props.data.key;\n\n    const scrollIntoView = () => {\n        const tableBody = refElement.current.parentElement;\n        const table = tableBody.parentElement;\n        const tableClientRect = table.getBoundingClientRect();\n        const rowClientReact = refElement.current.getBoundingClientRect();\n        if (rowClientReact.bottom > tableClientRect.bottom) {\n            refElement.current.scrollIntoView(false);\n        }\n        if (rowClientReact.top < tableClientRect.top) {\n            refElement.current.scrollIntoView(true);\n        }\n    }\n\n    // Callback to display Log File Content Popup\n    const showLogFileContentPopup = (index) => {\n        setShowFileContentPopup(true)\n    }\n\n    const closeLogFileContentPopup = () => {\n        setShowFileContentPopup(false)\n    }\n\n    return (\n        <React.Fragment>\n            <tr className={style} onClick={props.itemClicked} ref={refElement}>\n                <td>\n                    {props.data.runningDate}\n                </td>\n                <td>\n                    {props.data.jobName}\n                </td>\n                <td>\n                    {props.data.step}\n                </td>\n                <td>\n                    {props.data.checklist}\n                </td>\n                <td className={styles.RunningLogListItemNumeric}>\n                    {props.data.actionsNum}\n                </td>\n                <td className={styles.RunningLogListItemNumeric}>\n                    {props.data.layersNum}\n                </td>\n                <td className={styles.RunningLogListItemNumeric}>\n                    {props.data.batchJobsNum}\n                </td>\n                <td>\n                    {props.data.runningTime || \"Failed\"}\n                </td>\n                <td>\n                    <div onClick={showLogFileContentPopup} >\n                        {props.data.key}\n                    </div>\n                    {/*<a href={object_url} target=\"_blank\" rel=\"noopener noreferrer\">*/}\n                    {/*    {props.data.key}*/}\n                    {/*</a>*/}\n                </td>\n            </tr>\n\n            {showFileContentPopup ?\n                <FileContentPopup\n                    showFileContentPopup={showFileContentPopup}\n                    closeFileContentPopup={closeLogFileContentPopup}\n                    content={props.data.text}\n                /> : null }\n\n        </React.Fragment>\n    );\n}\n\nexport default RunningLogsListItem;\n","import React, {useEffect} from 'react';\nimport InfiniteScroll from 'react-infinite-scroll-component';\nimport styles from './RunningLogsListTable.module.css';\nimport RunningLogsListItem from \"../RunningLogListItem/RunningLogListItem\";\n\nfunction RunningLogsListTable(props) {\n    useEffect( () => {\n        const handleKeyDown = (e) => {\n            switch (e.code) {\n                case \"ArrowDown\":\n                    e.stopPropagation();\n                    e.preventDefault();\n                    if (props.selectedIndex < props.logsListData.length-1) {\n                        props.logItemClicked(props.selectedIndex+1);\n                    }\n                    break;\n                case \"ArrowUp\":\n                    e.stopPropagation();\n                    e.preventDefault();\n                    if (props.selectedIndex > 0) {\n                        props.logItemClicked(props.selectedIndex-1);\n                    }\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        document.addEventListener('keydown', handleKeyDown);\n        return () => {\n            document.removeEventListener('keydown', handleKeyDown);\n        };\n    })\n\n    const fetchMoreData = () => {\n        // alert(\"Fetch more data\")\n        // props.fetchMoreData();\n    }\n\n    return (\n        <div>\n            <InfiniteScroll\n                dataLength={props.logsListData?.length}\n                next={fetchMoreData}\n                hasMore={true}\n            >\n\n                <table className={styles.RunningLogsListTable}>\n                    <thead>\n                    <tr>\n                        <th style={{width:\"15%\"}}>Running date</th>\n                        <th style={{width:\"25%\"}}>Job Name</th>\n                        <th style={{width:\"3%\"}}>Step</th>\n                        <th style={{width:\"15%\"}}>Checklist</th>\n                        <th style={{width:\"5%\"}}># Actions</th>\n                        <th style={{width:\"5%\"}}># Layers</th>\n                        <th style={{width:\"5%\"}}># ACPs</th>\n                        <th style={{width:\"4%\"}}>Running Time</th>\n                        <th style={{width:\"13%\"}}>S3 bucket key (filename)</th>\n                    </tr>\n                    </thead>\n                    <tbody>\n                        {props.logsListData?.map( (data, index) =>\n                            <RunningLogsListItem key={index}\n                                                 data={data}\n                                                 selected={props.selectedIndex===index}\n                                                 batchFailed={!!data.errorTime}\n                                                 itemClicked={() => props.logItemClicked(index)}\n                            />\n                        )}\n                    </tbody>\n                </table>\n            </InfiniteScroll>\n\n        </div>\n    );\n}\n\nexport default RunningLogsListTable;\n","import React from \"react\";\nimport Files from \"react-butterfiles\";\nimport styles from \"./FileUploadButton.module.css\";\n\nasync function getPresignedURL(selectedFile) {\n    const url = \"https://vm7sirnd04.execute-api.us-east-1.amazonaws.com/test/get-presigned-url/\" +\n    selectedFile.name;\n\n    let presignedURL = null;\n    try {\n        let response = await fetch(url);\n        let json = await response.json();\n        presignedURL = json.url;\n    }\n    catch (err) {\n        console.log(err.message)\n    }\n    return presignedURL;\n};\n\nasync function uploadFileToS3(presignedURL, file) {\n    let json = null;\n    try {\n        let response = await fetch(presignedURL, {\n            method: \"PUT\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: file\n        });\n        json = await response.json();\n    }\n    catch (err) {\n        console.log(err.message)\n    }\n\n    return json;\n};\n\n/**\n * Component renders a simple \"Select file...\" button which opens a file browser.\n * Once a valid file has been selected, the upload process will start.\n * @returns {*}\n * @constructor\n */\nconst FileUploadButton = (props) => (\n    <Files\n        className={styles.FileUploadButton}\n        onSuccess={async ([selectedFile]) => {\n            // Step 1 - get pre-signed POST data.\n            const presignedURL = await getPresignedURL(selectedFile);\n            // Step 2 - upload the file to S3.\n            try {\n                const { file } = selectedFile.src;\n                const resp = await uploadFileToS3(presignedURL, file);\n                console.log(\"File was successfully uploaded! \" + resp);\n                props.onUploadSucceed([selectedFile.name]);\n            } catch (e) {\n                console.log(\"An error occurred!\", e.message);\n            }\n        }}\n    >\n        {({ browseFiles }) =>\n            <button\n                className={styles.FileUploadButtonButton}\n                onClick={browseFiles}>Upload\n            </button>}\n    </Files>\n);\n\nexport default FileUploadButton;","import React from 'react';\nimport styles from './RunningLogsList.module.css';\n// import RunningLogsListHeader from \"./RunningLogsListHeader/RunningLogsListHeader\";\nimport RunningLogsListTable from \"./RunningLogsListTable/RunningLogsListTable\";\nimport FileUploadButton from \"../FileUploadButton/FileUploadButton\";\n\nfunction RunningLogsList(props) {\n    return (\n        <div className={styles.RunningLogsList}>\n            <FileUploadButton\n                onUploadSucceed={props.onUploadSucceed}\n            />\n            {/*<RunningLogsListHeader*/}\n            {/*    awsRegion = {props.awsRegion}*/}\n            {/*    loading={props.loading}*/}\n            {/*    onRefreshButtonPressed={props.onRefreshButtonPressed}*/}\n            {/*/>*/}\n\n            <RunningLogsListTable\n                logsListData={props.logsListData}\n                selectedIndex={props.selectedIndex}\n                logItemClicked={props.logItemClicked}\n                fetchMoreData={props.onRefreshButtonPressed}\n            />\n\n        </div>\n    );\n}\n\nexport default RunningLogsList;\n","import React from 'react';\nimport { VegaLite } from 'react-vega'\nimport styles from './VegaLiteChart.module.css';\n\nfunction VegaLiteChart(props) {\n    const spec = {\n        \"$schema\": \"https://vega.github.io/schema/vega-lite/v4.json\",\n        title: props.runData?.jobName,\n        data: { values: props.data },\n        mark: { type: \"bar\", tooltip: [] },\n        encoding: {\n            x: {\n                type: \"temporal\",\n                field: \"StartDate\",\n                timeUnit: \"hoursminutesseconds\"\n            },\n            x2: {\n                type: \"temporal\",\n                field: \"EndDate\",\n                timeUnit: \"hoursminutesseconds\"\n            },\n            y: {\n                type: \"nominal\",\n                field: \"Index\",\n                sort: null\n            },\n            color: { field: \"Object\" }\n        },\n        width: 800,\n        // height: 800,\n        autosize: \"fit\"\n    }\n\n    return (\n        <div className={styles.VegaLiteChart}>\n            {\n                props.data && props.runData.runningTime ?\n                    <VegaLite spec={spec} data={props.data}/> : null\n            }\n        </div>\n    );\n}\n\nexport default VegaLiteChart;\n","export function getChartData(data) {\n    let stats = data.batch.map(action => {\n        let timestamp = data.acpTime.find(\n            a => a.Stage === action.Stage && a.Index === action.StageIndex\n        );\n        return {\n            Object: timestamp.Succeed ? \"Acp\" : \"Acp Failed\",\n            Stage: action.Stage,\n            Index: action.Stage + '_' + action.StageIndex,\n            ActNum: action.ActNum,\n            Name: action.AnalysisName,\n            Layer: action.LayerName,\n            ActParam: action.ActParam,\n            BeginNf: action.BeginNf,\n            EndNf: action.EndNf,\n            ContourGroupId: action.ContourGroupId,\n            ContourGroupNum: action.ContourGroupNum,\n            StartDate: timestamp ? timestamp.StartTime : \"\",\n            EndDate: timestamp ? timestamp.CompleteTime : \"\",\n            Time: time_diff(timestamp.StartTime, timestamp.CompleteTime)\n        };\n    });\n\n    let uploadObj = {\n        Object: \"Upload\",\n        Name: \"Upload\",\n        Index: -1,\n        StartDate: data.uploadTime.StartTime,\n        EndDate: data.uploadTime.CompleteTime\n    };\n\n    let splitterObj = {\n        Object: \"Splitter\",\n        Name: \"Splitter\",\n        Index: 0,\n        StartDate: data.splitterTime.StartTime,\n        EndDate: data.splitterTime.CompleteTime\n    };\n\n    let mergerObj;\n    if (data.mergerTime.StartTime && data.mergerTime.CompleteTime) {\n        mergerObj = {\n            Object: \"Merger\",\n            Name: \"Merger\",\n            Index: stats.length + 1,\n            StartDate: data.mergerTime.StartTime,\n            EndDate: data.mergerTime.CompleteTime\n        };\n    }\n\n    let downloadObj;\n    if (data.downloadTime.StartTime && data.downloadTime.CompleteTime) {\n        downloadObj = {\n            Object: \"Download\",\n            Name: \"Download\",\n            Index: stats.length + 2,\n            StartDate: data.downloadTime.StartTime,\n            EndDate: data.downloadTime.CompleteTime\n        };\n    }\n\n    stats = [uploadObj, splitterObj, ...stats];\n    if (mergerObj) stats = [...stats, mergerObj];\n    if (downloadObj) stats = [...stats, downloadObj];\n\n    return stats;\n}\n\n\nexport function getListData(localData) {\n    const actionsNum = localData?.batch[localData.batch.length - 1].ActNum;\n    const layersNum = new Set(localData?.batch.map(action => action.LayerName)).size;\n    return {\n        runningDate: localData?.runningDate,\n        jobName: localData?.jobName,\n        step: localData?.batch[0].StepName,\n        checklist: localData?.batch[0].ChecklistName,\n        actionsNum: actionsNum,\n        layersNum: layersNum,\n        runningTime: localData?.runningTime,\n        batchJobsNum: localData?.batch.length,\n        key: localData?.key,\n        errorTime: localData?.errorTime,\n        text: localData?.text\n    }\n}\n\n// function time_diff(start_time, complete_time) {\n//     let start = start_time.split(':').map(t => Number(t));\n//     let start_sec = start[0] * 3600 + start[1] * 60 + start[2];\n//     let complete = complete_time.split(':').map(t => Number(t));\n//     let complete_sec = complete[0] * 3600 + complete[1] * 60 + complete[2];\n//     let diff_sec = complete_sec - start_sec;\n//     return diff_sec;\n// }\n\nfunction time_diff(start_time, complete_time) {\n    return msecToHHMMSS(complete_time - start_time);\n}\n\nfunction msecToHHMMSS(time) {\n    return new Date(time).toISOString().substr(11, 8);\n}\n","export function parse(text) {\n    const row_lines = text.split('\\n');\n    const arrayOfTimestamps = timestamps(row_lines);\n    const errorTimeString = errorTime(row_lines, arrayOfTimestamps);\n    return {\n        runningDate: runningDate(arrayOfTimestamps),\n        runningTime: runningTime(arrayOfTimestamps, errorTimeString),\n        jobName: jobName(row_lines),\n        batch: batch(arrayOfTimestamps),\n        uploadTime: uploadTime(arrayOfTimestamps),\n        splitterTime: splitterTime(arrayOfTimestamps),\n        acpTime: acpTime(row_lines, arrayOfTimestamps),\n        mergerTime: mergerTime(arrayOfTimestamps),\n        downloadTime: downloadTime(arrayOfTimestamps),\n        errorTime: errorTimeString\n    };\n}\n\nfunction jobName(row_lines) {\n    const job_line = row_lines.filter(line => line.match(\"Job:\"))[0];\n    const job_name = job_line.split(' ')[1];\n    return job_name;\n}\n\nfunction runningDate(arrayOfTimestamps) {\n    let job_started = arrayOfTimestamps.filter(\n        line => line.message === \"Ready for commands\"\n    )[0];\n    return job_started.utcDate.toLocaleString();\n}\n\n// function runningDate(row_lines) {\n//     let arrayOfLines = row_lines.filter(line => line.match(\"time\"));\n//     let splitArray = arrayOfLines[0].split(' ');\n//     let [day, month, year] = splitArray[1].split(':')[1].split('/');\n//     if (day.length > 2) day = day.substr(1);\n//     let [hour, min] = splitArray[2].split(':');\n//     if (hour.trim().length > 2) hour = hour.substr(1);\n//     if (min.trim().length > 2) min = min.substr(1);\n//     return new Date(Date.UTC(year, month - 1, day, hour, min)).toUTCString();\n// }\n\nfunction runningTime(arrayOfTimestamps, errorTime) {\n    let job_started = arrayOfTimestamps.filter(\n        line => line.message === \"Ready for commands\"\n    )[0];\n    let start_time = job_started.utcDate;\n    let job_ended_arr = arrayOfTimestamps.filter(\n        line => line.message === \"Job is ready\"\n    );\n    let end_time = job_ended_arr.length > 0 ? job_ended_arr[0].utcDate : errorTime;\n\n    return end_time ? time_diff(start_time, end_time) : \"\";\n}\n\nfunction batch(arrayOfTimestamps) {\n    let batchObjectList = arrayOfTimestamps.filter(d => d.type === \"Batch\");\n    let messageList = batchObjectList.map(batchObject =>\n        batchObject.message.slice(2)\n    );\n    let message = messageList.join(\"\");\n    return JSON.parse(message);\n}\n\nfunction uploadTime(arrayOfTimestamps) {\n    let uploadTime = {\n        StartTime: arrayOfTimestamps.find(\n            d => d.object === \"WebClient\" && d.message === \"Job was registered\"\n        ).utcDate,\n        CompleteTime: arrayOfTimestamps.find(\n            d => d.object === \"WebClient\" && d.message === \"After send\"\n        ).utcDate\n    };\n    return uploadTime;\n}\n\nfunction splitterTime(arrayOfTimestamps) {\n    let splitter = arrayOfTimestamps.filter(d => d.object === \"Splitter\")\n    let s = {\n        StartTime: splitter.find(s => s.message === \"Splitter started\").utcDate,\n        CompleteTime: splitter.find(s => s.message === \"End of Split\").utcDate\n    };\n    return s;\n}\n\nfunction mergerTime(arrayOfTimestamps) {\n    let merger = arrayOfTimestamps.filter(d => d.object === \"Merger\");\n    let mergerStartMessage = merger.find(s => s.message === \"Preparing job for merge\");\n    let mergerCompleteMessage = merger.find(s => s.message === \"Moving Job to S3\");\n\n    let s = {\n        StartTime: mergerStartMessage ? mergerStartMessage.utcDate : null,\n        CompleteTime: mergerCompleteMessage ? mergerCompleteMessage.utcDate : null\n    };\n    return s;\n}\n\nfunction downloadTime(arrayOfTimestamps) {\n    let downloadStartMessage = arrayOfTimestamps.find(d => d.object === \"WebClient\" && d.message === \"Download Data\");\n    let downloadCompleteMessage = arrayOfTimestamps.find(d => d.object === \"WebClient\" && d.message === \"Job is ready\");\n    let downloadTime = {\n        StartTime: downloadStartMessage ? downloadStartMessage.utcDate : null,\n        CompleteTime: downloadCompleteMessage ? downloadCompleteMessage.utcDate : null\n    };\n    return downloadTime;\n}\n\nfunction acpTime(row_lines, arrayOfTimestamps) {\n    let errorTimeStr = errorTime(row_lines, arrayOfTimestamps);\n    let acp = arrayOfTimestamps.filter(d => (d.type === \"Progress\" || d.type === \"Info\") && d.object === \"ACP\");\n    let acp_transformed = acp.map(action => {\n        let message = action.message.split(' ');\n        return {\n            Time: action.utcDate,\n            Step: message[0],\n            Stage: message[1].split(':')[1],\n            Index: Number(message[2].split(':')[1]) + 1\n        };\n    });\n    let acp_started = acp_transformed\n        .filter(action => action.Step === \"Starting\")\n        .map(action => {\n            return {\n                Stage: action.Stage,\n                Index: action.Index,\n                StartTime: action.Time\n            };\n        });\n    let acp_completed = acp_transformed\n        .filter(action => action.Step === \"Completing\")\n        .map(action => {\n            return {\n                Stage: action.Stage,\n                Index: action.Index,\n                CompleteTime: action.Time\n            };\n        });\n    let acp_timestamp = acp_started.map(action => {\n        let completeTimeMessage = acp_completed.find(\n            c => c.Stage === action.Stage && c.Index === action.Index\n        );\n\n        return {\n            Stage: action.Stage,\n            Index: action.Index,\n            StartTime: action.StartTime,\n            CompleteTime: completeTimeMessage ? completeTimeMessage.CompleteTime : errorTimeStr,\n            Succeed: !!completeTimeMessage\n        };\n    });\n    return acp_timestamp;\n}\n\nfunction errorTime(row_lines, arrayOfTimestamps) {\n    let errorMessage = arrayOfTimestamps.find(\n        d => d.object === \"WebClient\" && d.type === \"ERROR\"\n    );\n\n    let errorTime = null;\n    if (errorMessage) {\n        errorTime = errorMessage.utcDate\n    }\n    // else {\n    //     let ping_lines = row_lines\n    //         .filter(line => line.match(\"I am alive\"));\n    //     errorTime = ping_lines.length > 0 ? JSON.parse(ping_lines[ping_lines.length - 1]).Time : null;\n    // }\n    return errorTime;\n}\n\nfunction timestamps(row_lines) {\n    let arrayOfLines = row_lines.filter(line => line.match(\"time\"));\n    let tmpArrayOfLines = [...arrayOfLines];\n    tmpArrayOfLines.splice(0, 1);\n    let arrayOfTimestamps = [];\n    let timeStamp;\n    let utcDate;\n    let dateStr = \"\";\n    for (let i = 0; i < tmpArrayOfLines.length; i++) {\n        try {\n            timeStamp = JSON.parse(tmpArrayOfLines[i]);\n            if (timeStamp.message === \"Submit Splitter\") continue; // bad format\n            utcDate = timeStampToDate(timeStamp.time, dateStr);\n            dateStr = utcDate.toDateString();\n            arrayOfTimestamps.push({ utcDate, ...timeStamp });\n        } catch (e) {\n            return [i, tmpArrayOfLines[i]];\n        }\n    }\n    return arrayOfTimestamps;\n}\n\nfunction time_diff(start_time, complete_time) {\n    return msecToHHMMSS(complete_time - start_time);\n}\n\nfunction msecToHHMMSS(time) {\n    return new Date(time).toISOString().substr(11, 8);\n}\n\nfunction timeStampToDate(timeStr, dateStr) {\n    let splitArray = timeStr.split(', ');\n    if (splitArray.length === 1) {   // bad format only time no date\n        return new Date(dateStr + ' ' + timeStr)\n    }\n    else {\n        let [month, day, year] = splitArray[0].split('/');\n        let [hour, min, sec] = splitArray[1].split(':');\n        return new Date(Date.UTC(year, month - 1, day, hour, min, sec)); // .toUTCString();\n    }\n}\n","import React, {useEffect, useState} from 'react';\nimport styles from './MainComponent.module.css';\nimport RunningLogsList from \"../RunningLogsList/RunningLogsList\";\nimport VegaLiteChart from \"../VegaLiteChart/VegaLiteChart\";\nimport {getChartData, getListData} from \"../../models/logData\";\nimport {parse} from \"../../models/logFileParser\";\n\nfunction MainComponent(props) {\n    const [logDataArray, setLogDataArray] = useState([]);\n    const [index, setIndex] = useState(0);\n    const [loading, setLoading] = useState(false);\n\n    const numInChunk = 8;\n    let logsListData = [];\n    let chartData = null;\n    let runData = null;\n    let awsRegion = \"eu-central-1\";\n    // let api_uri = \"https://bah2tkltg6.execute-api.eu-central-1.amazonaws.com/test/list\";\n    let api_uri = \"https://vm7sirnd04.execute-api.us-east-1.amazonaws.com/test/list\";\n\n    // Fetch keys list (filenames) from s3 bucket using given api\n    const fetchKeysList = async() => {\n        let response = await fetch(api_uri);\n        let json = await response.json();\n        let keysList = JSON.parse(json.body).keys;\n        return keysList;\n    }\n\n    // Fetch content of files from s3 bucket by given list of keys\n    const fetchDataByKeysList = async (keysList) => {\n        let promises = keysList.map (key => fetch(`${api_uri}/${key}`))\n        let respArray = await Promise.all(promises)\n        let json_promises = respArray.map(resp => resp.json())\n        let textArray = await Promise.all(json_promises);\n        let dataArray = textArray.map( e => parse(e.text));\n        dataArray.forEach( (data,i) => data.key = keysList[i] )\n        dataArray.forEach( (data,i) => data.text = textArray[i].text )\n        return dataArray;\n    }\n\n    const fetchMoreData = async (keysListToFetch) => {\n        setLoading(true);\n\n        let keysList = keysListToFetch || await fetchKeysList(api_uri);\n        let filteredKeysList = filterNewKeysList(keysList);\n        let chunkOfKeysList = filteredKeysList.slice(0,numInChunk);\n        let newDataArray = await fetchDataByKeysList(chunkOfKeysList);\n\n        let localDataArray = logDataArray.concat(newDataArray);\n\n        localDataArray.sort(function(a,b){\n            return new Date(b.runningDate) - new Date(a.runningDate);\n        });\n\n        console.log(`data array length: ${localDataArray.length}`);\n\n        // If all data loaded, render list and select first row\n        if (localDataArray.length > 0) {\n            setLoading(false);\n            setLogDataArray(localDataArray);             // trigger rendering\n        }\n    }\n\n    // Filter keysList: keep only new keys that do not exist in logDataArray\n    const filterNewKeysList = (keysList) => {\n        let filteredKeyList = keysList\n            .filter( key => !logDataArray.some( data => data.key === key))\n        return filteredKeyList;\n    }\n\n    const syncData = () => {\n        fetchMoreData()\n        // setLoading(true)\n    }\n\n    const fetchUploaded = (keysList) => {\n        fetchMoreData(keysList)\n    }\n\n    // Effect to load all data from AWS s3 bucket after component mounted\n    useEffect( () => {\n        if (logDataArray.length === 0) {\n            fetchMoreData();\n        }\n    });\n\n    // Callback to set new chart data and update selected index\n    const logItemClicked = (index) => {\n        setIndex(index);                                     // trigger rendering\n    }\n\n    // Setup data before rendering\n    if (logDataArray.length > 0) {\n        logsListData = logDataArray.map(data => getListData(data))\n\n        let localData = logDataArray[index];\n        try {\n            chartData = getChartData(localData);\n        }\n        catch (e) {\n            chartData = null;\n        }\n\n        runData = getListData(localData);\n    }\n\n    return (\n        <main className={styles.MainComponent}>\n            <RunningLogsList\n                awsRegion = {awsRegion}\n                logsListData={logsListData}\n                selectedIndex={index}\n                loading={loading}\n                logItemClicked={logItemClicked}\n                onRefreshButtonPressed={syncData}\n                onUploadSucceed={fetchUploaded}\n            />\n            <VegaLiteChart data={chartData} runData={runData} />\n        </main>\n    );\n}\n\nexport default MainComponent;\n","import React from 'react';\nimport MainComponent from \"./components/MainComponent/MainComponent\";\nimport './App.css';\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <div className=\"content\">\n                <h1>Cloud Log Viewer</h1>\n                <hr />\n                <MainComponent />\n                <hr />\n            </div>\n            <footer className=\"footer\">\n                <p style={{fontSize:\"12px\"}}>Alex Bol 2020</p>\n            </footer>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"RunningLogListItem\":\"RunningLogListItem_RunningLogListItem__wcmB-\",\"RunningLogListItemClicked\":\"RunningLogListItem_RunningLogListItemClicked__2euIm\",\"RunningLogListItemFailed\":\"RunningLogListItem_RunningLogListItemFailed__sXOJI\",\"RunningLogListItemNumeric\":\"RunningLogListItem_RunningLogListItemNumeric__28nyp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"BackDrop\":\"ModalPopup_BackDrop__3oXJD\",\"ModalPopup\":\"ModalPopup_ModalPopup__3TsOV\",\"fadeIn\":\"ModalPopup_fadeIn__1BHZf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"FileUploadButton\":\"FileUploadButton_FileUploadButton__3Mpxc\",\"FileUploadButtonButton\":\"FileUploadButton_FileUploadButtonButton__1Og_g\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"MainComponent\":\"MainComponent_MainComponent__1UCA3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"RunningLogsList\":\"RunningLogsList_RunningLogsList__1jWMA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"RunningLogsListTable\":\"RunningLogsListTable_RunningLogsListTable__3tUhi\",\"fadeIn\":\"RunningLogsListTable_fadeIn__1fouu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"FileContentPopup\":\"FileContentPopup_FileContentPopup__1wTAX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"VegaLiteChart\":\"VegaLiteChart_VegaLiteChart__3452l\"};"],"sourceRoot":""}