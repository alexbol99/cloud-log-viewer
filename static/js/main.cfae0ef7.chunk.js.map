{"version":3,"sources":["UI/Button/Button.js","components/RunningLogsList/RunningLogsListHeader/RunningLogsListHeader.js","UI/ModalPopup/ModalPopup.js","UI/Modal.js","components/FileContentPopup/FileContentPopup.js","components/RunningLogsList/RunningLogListItem/RunningLogListItem.js","components/RunningLogsList/RunningLogsListTable/RunningLogsListTable.js","components/RunningLogsList/RunningLogsList.js","components/VegaLiteChart/VegaLiteChart.js","models/logData.js","models/logFileParser.js","components/MainComponent/MainComponent.js","App.js","serviceWorker.js","index.js","components/RunningLogsList/RunningLogListItem/RunningLogListItem.module.css","UI/ModalPopup/ModalPopup.module.css","components/MainComponent/MainComponent.module.css","components/RunningLogsList/RunningLogsList.module.css","UI/Button/Button.module.css","components/RunningLogsList/RunningLogsListHeader/RunningLogsListHeader.module.css","components/RunningLogsList/RunningLogsListTable/RunningLogsListTable.module.css","components/FileContentPopup/FileContentPopup.module.css","components/VegaLiteChart/VegaLiteChart.module.css"],"names":["button","props","title","onClick","className","classes","Button","icon","size","spin","RunningLogsListHeader","offsetX","offsetY","dragX","dragY","styles","awsRegion","href","target","rel","faSyncAlt","loading","onRefreshButtonPressed","Modal","children","mount","document","getElementById","el","createElement","useEffect","appendChild","removeChild","createPortal","ModalPopup","handleKeyDown","ev","code","closePopup","elementDrag","window","event","clientX","clientY","element","style","top","offsetTop","left","offsetLeft","closeDragElement","onmouseup","onmousemove","addEventListener","removeEventListener","showPopup","id","BackDrop","onMouseDown","header","FileContentPopup","row_lines","content","split","showFileContentPopup","closeFileContentPopup","map","line","RunningLogsListItem","useState","setShowFileContentPopup","refElement","useRef","selected","scrollIntoView","RunningLogListItemClicked","RunningLogListItem","batchFailed","RunningLogListItemFailed","tableClientRect","current","parentElement","getBoundingClientRect","rowClientReact","bottom","Fragment","itemClicked","ref","data","runningDate","jobName","step","checklist","RunningLogListItemNumeric","actionsNum","layersNum","batchJobsNum","runningTime","index","key","text","RunningLogsListTable","e","stopPropagation","preventDefault","selectedIndex","logsListData","length","logItemClicked","dataLength","next","fetchMoreData","hasMore","errorTime","RunningLogsList","VegaLiteChart","spec","runData","values","mark","type","tooltip","encoding","x","field","timeUnit","x2","y","sort","color","width","autosize","VegaLite","getListData","localData","batch","ActNum","Set","action","LayerName","StepName","ChecklistName","time_diff","start_time","complete_time","start","t","Number","start_sec","complete","parse","arrayOfTimestamps","arrayOfLines","filter","match","tmpArrayOfLines","splice","JSON","timestamps","errorTimeString","uploadTime","splitterTime","acpTime","mergerTime","downloadTime","splitArray","day","month","year","substr","hour","min","trim","Date","UTC","toUTCString","time","job_started_line","job_ended_line","end_time","toISOString","batchObject","d","message","StartTime","find","object","CompleteTime","splitter","toLocal","s","merger","mergerStartMessage","mergerCompleteMessage","downloadStartMessage","downloadCompleteMessage","errorTimeStr","acp_transformed","Time","Step","Stage","Index","acp_started","acp_completed","completeTimeMessage","c","Succeed","errorMessage","hhmmss","HH","MM","SS","join","MainComponent","logDataArray","setLogDataArray","setIndex","setLoading","chartData","api_uri","fetchKeysList","a","fetch","response","json","keysList","body","keys","fetchDataByKeysList","promises","Promise","all","respArray","json_promises","resp","textArray","dataArray","forEach","i","filterNewKeysList","chunkOfKeysList","slice","newDataArray","localDataArray","concat","b","some","mergerObj","downloadObj","stats","timestamp","StageIndex","Object","Name","AnalysisName","Layer","ActParam","BeginNf","EndNf","StartDate","EndDate","uploadObj","splitterObj","getChartData","App","fontSize","Boolean","location","hostname","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","module","exports"],"mappings":"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","file":"static/js/main.cfae0ef7.chunk.js","sourcesContent":["import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport classes from \"./Button.module.css\";\n\nconst button = (props) => {\n    return (\n        <button title={props.title} onClick={props.onClick} className={classes.Button}>\n            <FontAwesomeIcon icon={props.icon} size=\"2x\" spin={props.spin}  />\n        </button>\n    );\n};\n\nexport default button;","import React from 'react';\nimport Button from '../../../UI/Button/Button';\nimport { faSyncAlt } from '@fortawesome/free-solid-svg-icons'\n\nimport styles from './RunningLogsListHeader.module.css'\n\nfunction RunningLogsListHeader(props) {\n    return (\n        <header className={styles.RunningLogsListHeader}>\n            <span>Amazon s3 ({props.awsRegion}) ></span>\n            <span>\n                <a href=\"https://s3.console.aws.amazon.com/s3/buckets/acp-cloud-logs/?region=eu-central-1&tab=overview#\"\n                   target=\"_blank\" rel=\"noopener noreferrer\">\n                    acp-cloud-logs\n                </a>\n            </span>\n            <span>\n                <Button\n                    title=\"Reload logs from S3 bucket\"\n                    icon={faSyncAlt}\n                    spin={props.loading}\n                    onClick={props.onRefreshButtonPressed}\n                />\n            </span>\n        </header>\n    );\n}\n\nexport default RunningLogsListHeader;\n","import React, { useEffect } from \"react\";\nimport Modal from \"../Modal\";\nimport classes from \"./ModalPopup.module.css\";\n\nlet offsetX;\nlet offsetY;\nlet dragX;\nlet dragY;\n\nconst ModalPopup = (props) => {\n\n    const onBackDropClicked = (ev) => {\n        if (ev.target.id === \"backDrop\") {\n            props.closePopup();\n        }\n    };\n\n    const handleKeyDown = (ev) => {\n        if (ev.code === \"Escape\") {\n            props.closePopup();\n        }\n    };\n\n    const elementDrag = (ev) => {\n        ev = ev || window.event;\n        // calculate the new cursor position:\n        offsetX = dragX - ev.clientX;\n        offsetY = dragY - ev.clientY;\n        dragX = ev.clientX;\n        dragY = ev.clientY;\n        // set the element's new position:\n        let element = ev.target;\n        element.style.top = (element.offsetTop - offsetY) + \"px\";\n        element.style.left = (element.offsetLeft - offsetX) + \"px\";\n    };\n\n    const closeDragElement = (ev) => {\n        /* stop moving when mouse button is released:*/\n        ev.target.onmouseup = null;\n        ev.target.onmousemove = null;\n    };\n\n    const dragMouseDown = (ev) => {\n        ev = ev || window.event;\n        // get the mouse cursor position at startup:\n        dragX = ev.clientX;\n        dragY = ev.clientY;\n        ev.target.onmouseup = closeDragElement;\n        // call a function whenever the cursor moves:\n        ev.target.onmousemove = elementDrag;\n    };\n\n    useEffect(() => {\n        document.addEventListener('keydown', handleKeyDown);\n        return () => document.removeEventListener('keydown', handleKeyDown);\n    } );\n\n    return props.showPopup ? (\n        <Modal>\n            <div\n                id=\"backDrop\"\n                className={classes.BackDrop}\n                onClick={onBackDropClicked}\n            >\n                <div className={classes.ModalPopup}\n                     onMouseDown={dragMouseDown}\n                >\n                    <header>{props.header}</header>\n                    {props.children}\n                </div>\n            </div>\n        </Modal>\n    ) : null;\n};\n\nexport default ModalPopup;\n","import { useEffect } from \"react\";\nimport { createPortal } from \"react-dom\";\n\nconst Modal = ({children}) => {\n    const mount = document.getElementById(\"modal-root\");\n    const el = document.createElement(\"div\");\n\n    useEffect(() => {\n        mount.appendChild(el);\n        return () => mount.removeChild(el);\n    }, [el, mount]);\n\n    return createPortal(children, el)\n};\n\nexport default Modal;\n","/**\n * Created by alexanderbol on 13/04/2017.\n */\n\nimport React from 'react';\nimport classes from './FileContentPopup.module.css';\nimport ModalPopup from \"../../UI/ModalPopup/ModalPopup\";\n\nconst FileContentPopup = (props) => {\n    const row_lines = props.content.split('\\n');\n    return (\n        <ModalPopup\n            showPopup={props.showFileContentPopup}\n            closePopup={props.closeFileContentPopup}\n            header=\"Log File Content\"\n        >\n            <div className={classes.FileContentPopup}>\n                {\n                    row_lines.map( line =>\n                        <p>{line}</p>\n                    )\n                }\n            </div>\n        </ModalPopup>\n    )\n};\n\nexport default FileContentPopup;\n","import React, {useRef, useEffect, useState} from 'react';\nimport styles from './RunningLogListItem.module.css';\nimport FileContentPopup from \"../../FileContentPopup/FileContentPopup\";\n\nfunction RunningLogsListItem(props) {\n    const [showFileContentPopup, setShowFileContentPopup] = useState(false);\n    const refElement = useRef();\n    useEffect( () => {\n        if (props.selected) {\n            scrollIntoView();\n        }\n    })\n\n    let style = props.selected ? styles.RunningLogListItemClicked : styles.RunningLogListItem;\n    style = props.batchFailed ? `${style} ${styles.RunningLogListItemFailed}` : style;\n    // let object_url = \"https://s3.console.aws.amazon.com/s3/object/acp-cloud-logs/\"+props.data.key;\n\n    const scrollIntoView = () => {\n        const tableBody = refElement.current.parentElement;\n        const table = tableBody.parentElement;\n        const tableClientRect = table.getBoundingClientRect();\n        const rowClientReact = refElement.current.getBoundingClientRect();\n        if (rowClientReact.bottom > tableClientRect.bottom) {\n            refElement.current.scrollIntoView(false);\n        }\n        if (rowClientReact.top < tableClientRect.top) {\n            refElement.current.scrollIntoView(true);\n        }\n    }\n\n    // Callback to display Log File Content Popup\n    const showLogFileContentPopup = (index) => {\n        setShowFileContentPopup(true)\n    }\n\n    const closeLogFileContentPopup = () => {\n        setShowFileContentPopup(false)\n    }\n\n    return (\n        <React.Fragment>\n            <tr className={style} onClick={props.itemClicked} ref={refElement}>\n                <td>\n                    {props.data.runningDate}\n                </td>\n                <td>\n                    {props.data.jobName}\n                </td>\n                <td>\n                    {props.data.step}\n                </td>\n                <td>\n                    {props.data.checklist}\n                </td>\n                <td className={styles.RunningLogListItemNumeric}>\n                    {props.data.actionsNum}\n                </td>\n                <td className={styles.RunningLogListItemNumeric}>\n                    {props.data.layersNum}\n                </td>\n                <td className={styles.RunningLogListItemNumeric}>\n                    {props.data.batchJobsNum}\n                </td>\n                <td>\n                    {props.data.runningTime || \"Failed\"}\n                </td>\n                <td>\n                    <div onClick={showLogFileContentPopup} >\n                        {props.data.key}\n                    </div>\n                    {/*<a href={object_url} target=\"_blank\" rel=\"noopener noreferrer\">*/}\n                    {/*    {props.data.key}*/}\n                    {/*</a>*/}\n                </td>\n            </tr>\n\n            {showFileContentPopup ?\n                <FileContentPopup\n                    showFileContentPopup={showFileContentPopup}\n                    closeFileContentPopup={closeLogFileContentPopup}\n                    content={props.data.text}\n                /> : null }\n\n        </React.Fragment>\n    );\n}\n\nexport default RunningLogsListItem;\n","import React, {useEffect} from 'react';\nimport InfiniteScroll from 'react-infinite-scroll-component';\nimport styles from './RunningLogsListTable.module.css';\nimport RunningLogsListItem from \"../RunningLogListItem/RunningLogListItem\";\n\nfunction RunningLogsListTable(props) {\n    useEffect( () => {\n        const handleKeyDown = (e) => {\n            switch (e.code) {\n                case \"ArrowDown\":\n                    e.stopPropagation();\n                    e.preventDefault();\n                    if (props.selectedIndex < props.logsListData.length-1) {\n                        props.logItemClicked(props.selectedIndex+1);\n                    }\n                    break;\n                case \"ArrowUp\":\n                    e.stopPropagation();\n                    e.preventDefault();\n                    if (props.selectedIndex > 0) {\n                        props.logItemClicked(props.selectedIndex-1);\n                    }\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        document.addEventListener('keydown', handleKeyDown);\n        return () => {\n            document.removeEventListener('keydown', handleKeyDown);\n        };\n    })\n\n    const fetchMoreData = () => {\n        // alert(\"Fetch more data\")\n        props.fetchMoreData();\n    }\n\n    return (\n        <div>\n            <InfiniteScroll\n                dataLength={props.logsListData?.length}\n                next={fetchMoreData}\n                hasMore={true}\n            >\n\n                <table className={styles.RunningLogsListTable}>\n                    <thead>\n                    <tr>\n                        <th>Running date</th>\n                        <th>Job Name</th>\n                        <th>Step</th>\n                        <th>Checklist</th>\n                        <th># Actions</th>\n                        <th># Layers</th>\n                        <th># ACPs</th>\n                        <th>Running Time</th>\n                        <th>S3 bucket key (filename)</th>\n                    </tr>\n                    </thead>\n                    <tbody>\n                        {props.logsListData?.map( (data, index) =>\n                            <RunningLogsListItem key={index}\n                                                 data={data}\n                                                 selected={props.selectedIndex===index}\n                                                 batchFailed={!!data.errorTime}\n                                                 itemClicked={() => props.logItemClicked(index)}\n                            />\n                        )}\n                    </tbody>\n                </table>\n            </InfiniteScroll>\n\n        </div>\n    );\n}\n\nexport default RunningLogsListTable;\n","import React from 'react';\nimport styles from './RunningLogsList.module.css';\nimport RunningLogsListHeader from \"./RunningLogsListHeader/RunningLogsListHeader\";\nimport RunningLogsListTable from \"./RunningLogsListTable/RunningLogsListTable\";\n\nfunction RunningLogsList(props) {\n    return (\n        <div className={styles.RunningLogsList}>\n            <RunningLogsListHeader\n                awsRegion = {props.awsRegion}\n                loading={props.loading}\n                onRefreshButtonPressed={props.onRefreshButtonPressed}\n            />\n\n            <RunningLogsListTable\n                logsListData={props.logsListData}\n                selectedIndex={props.selectedIndex}\n                logItemClicked={props.logItemClicked}\n                fetchMoreData={props.onRefreshButtonPressed}\n            />\n\n        </div>\n    );\n}\n\nexport default RunningLogsList;\n","import React from 'react';\nimport { VegaLite } from 'react-vega'\nimport styles from './VegaLiteChart.module.css';\n\nfunction VegaLiteChart(props) {\n    const spec = {\n        \"$schema\": \"https://vega.github.io/schema/vega-lite/v4.json\",\n        title: props.runData?.jobName,\n        data: { values: props.data },\n        mark: { type: \"bar\", tooltip: [] },\n        encoding: {\n            x: {\n                type: \"temporal\",\n                field: \"StartDate\",\n                timeUnit: \"hoursminutesseconds\"\n            },\n            x2: {\n                type: \"temporal\",\n                field: \"EndDate\",\n                timeUnit: \"hoursminutesseconds\"\n            },\n            y: {\n                type: \"nominal\",\n                field: \"Index\",\n                sort: null\n            },\n            color: { field: \"Object\" }\n        },\n        width: 800,\n        // height: 800,\n        autosize: \"fit\"\n    }\n\n    return (\n        <div className={styles.VegaLiteChart}>\n            {\n                props.data && props.runData.runningTime ?\n                    <VegaLite spec={spec} data={props.data}/> : null\n            }\n        </div>\n    );\n}\n\nexport default VegaLiteChart;\n","export function getChartData(data) {\n    let stats = data.batch.map(action => {\n        let timestamp = data.acpTime.find(\n            a => a.Stage === action.Stage && a.Index === action.StageIndex\n        );\n        return {\n            Object: timestamp.Succeed ? \"Acp\" : \"Acp Failed\",\n            Stage: action.Stage,\n            Index: action.Stage + '_' + action.StageIndex,\n            ActNum: action.ActNum,\n            Name: action.AnalysisName,\n            Layer: action.LayerName,\n            ActParam: action.ActParam,\n            BeginNf: action.BeginNf,\n            EndNf: action.EndNf,\n            StartTime: timestamp ? timestamp.StartTime : \"\",\n            CompleteTime: timestamp ? timestamp.CompleteTime : \"\",\n            Time: time_diff(timestamp.StartTime, timestamp.CompleteTime),\n            StartDate: new Date(`01/01/1970 ${timestamp.StartTime}`),\n            EndDate: new Date(`01/01/1970 ${timestamp.CompleteTime}`)\n        };\n    });\n\n    let uploadObj = {\n        Object: \"Upload\",\n        Name: \"Upload\",\n        Index: -1,\n        StartDate: new Date(`01/01/1970 ${data.uploadTime.StartTime}`),\n        EndDate: new Date(`01/01/1970 ${data.uploadTime.CompleteTime}`)\n    };\n\n    let splitterObj = {\n        Object: \"Splitter\",\n        Name: \"Splitter\",\n        Index: 0,\n        StartDate: new Date(`01/01/1970 ${data.splitterTime.StartTime}`),\n        EndDate: new Date(`01/01/1970 ${data.splitterTime.CompleteTime}`)\n    };\n\n    let mergerObj;\n    if (data.mergerTime.StartTime && data.mergerTime.CompleteTime) {\n        mergerObj = {\n            Object: \"Merger\",\n            Name: \"Merger\",\n            Index: stats.length + 1,\n            StartDate: new Date(`01/01/1970 ${data.mergerTime.StartTime}`),\n            EndDate: new Date(`01/01/1970 ${data.mergerTime.CompleteTime}`)\n        };\n    }\n\n    let downloadObj;\n    if (data.downloadTime.StartTime && data.downloadTime.CompleteTime) {\n        downloadObj = {\n            Object: \"Download\",\n            Name: \"Download\",\n            Index: stats.length + 2,\n            StartDate: new Date(`01/01/1970 ${data.downloadTime.StartTime}`),\n            EndDate: new Date(`01/01/1970 ${data.downloadTime.CompleteTime}`)\n        };\n    }\n\n    stats = [uploadObj, splitterObj, ...stats];\n    if (mergerObj) stats = [...stats, mergerObj];\n    if (downloadObj) stats = [...stats, downloadObj];\n\n    return stats;\n}\n\n\nexport function getListData(localData) {\n    const actionsNum = localData?.batch[localData.batch.length - 1].ActNum;\n    const layersNum = new Set(localData?.batch.map(action => action.LayerName)).size;\n    return {\n        runningDate: localData?.runningDate,\n        jobName: localData?.jobName,\n        step: localData?.batch[0].StepName,\n        checklist: localData?.batch[0].ChecklistName,\n        actionsNum: actionsNum,\n        layersNum: layersNum,\n        runningTime: localData?.runningTime,\n        batchJobsNum: localData?.batch.length,\n        key: localData?.key,\n        errorTime: localData?.errorTime,\n        text: localData?.text\n    }\n}\n\nfunction time_diff(start_time, complete_time) {\n    let start = start_time.split(':').map(t => Number(t));\n    let start_sec = start[0] * 3600 + start[1] * 60 + start[2];\n    let complete = complete_time.split(':').map(t => Number(t));\n    let complete_sec = complete[0] * 3600 + complete[1] * 60 + complete[2];\n    let diff_sec = complete_sec - start_sec;\n    return diff_sec;\n}\n","export function parse(text) {\n    const row_lines = text.split('\\n');\n    const arrayOfTimestamps = timestamps(row_lines);\n    const errorTimeString = errorTime(row_lines, arrayOfTimestamps);\n    return {\n        runningDate: runningDate(row_lines),\n        runningTime: runningTime(row_lines, errorTimeString),\n        jobName: jobName(row_lines),\n        batch: batch(arrayOfTimestamps),\n        uploadTime: uploadTime(arrayOfTimestamps),\n        splitterTime: splitterTime(arrayOfTimestamps),\n        acpTime: acpTime(row_lines, arrayOfTimestamps),\n        mergerTime: mergerTime(arrayOfTimestamps),\n        downloadTime: downloadTime(arrayOfTimestamps),\n        errorTime: errorTimeString\n    };\n}\n\nfunction jobName(row_lines) {\n    const job_line = row_lines.filter(line => line.match(\"Job:\"))[0];\n    const job_name = job_line.split(' ')[1];\n    return job_name;\n}\n\nfunction runningDate(row_lines) {\n    let arrayOfLines = row_lines.filter(line => line.match(\"time\"));\n    let splitArray = arrayOfLines[0].split(' ');\n    let [day, month, year] = splitArray[1].split(':')[1].split('/');\n    if (day.length > 2) day = day.substr(1);\n    let [hour, min] = splitArray[2].split(':');\n    if (hour.trim().length > 2) hour = hour.substr(1);\n    if (min.trim().length > 2) min = min.substr(1);\n    return new Date(Date.UTC(year, month - 1, day, hour, min)).toUTCString();\n}\n\nfunction runningTime(row_lines, errorTime) {\n    let job_started_line = row_lines\n        .filter(line => line.match(\"Ready for commands\"))[0];\n    let start_time = JSON.parse(job_started_line).time;\n    let job_ended_line = row_lines\n        .filter(line => line.match(\"Job is ready\"));\n    let end_time = job_ended_line.length > 0 ? JSON.parse(job_ended_line).time : errorTime;\n\n    return end_time ? secToHHMMSS(\n        time_diff(start_time, end_time)) : \"\";\n}\n\n// export function getChartData(data) {\n//     let stats = data.batch.map(action => {\n//         let timestamp = data.acpTime.find(\n//             a => a.Stage === action.Stage && a.Index === action.StageIndex\n//         );\n//         return {\n//             Object: \"Acp\",\n//             ActNum: action.ActNum,\n//             Name: action.AnalysisName,\n//             Layer: action.LayerName,\n//             Stage: action.Stage,\n//             Index: action.StageIndex,\n//             StartTime: timestamp ? timestamp.StartTime : \"\",\n//             CompleteTime: timestamp ? timestamp.CompleteTime : \"\",\n//             Time: time_diff(timestamp.StartTime, timestamp.CompleteTime),\n//             StartDate: new Date(`01/01/1970 ${timestamp.StartTime}`),\n//             EndDate: new Date(`01/01/1970 ${timestamp.CompleteTime}`)\n//         };\n//     });\n\n//     let splitterObj = {\n//         Object: \"Splitter\",\n//         Name: \"Splitter\",\n//         Index: 0,\n//         StartDate: new Date(`01/01/1970 ${data.splitterTime.StartTime}`),\n//         EndDate: new Date(`01/01/1970 ${data.splitterTime.CompleteTime}`)\n//     };\n\n//     let mergerObj = {\n//         Object: \"Merger\",\n//         Name: \"Merger\",\n//         Index: stats.length + 1,\n//         StartDate: new Date(`01/01/1970 ${data.mergerTime.StartTime}`),\n//         EndDate: new Date(`01/01/1970 ${data.mergerTime.CompleteTime}`)\n//     };\n\n//     let uploadObj = {\n//         Object: \"Upload\",\n//         Name: \"Upload\",\n//         Index: -1,\n//         StartDate: new Date(`01/01/1970 ${data.uploadTime.StartTime}`),\n//         EndDate: new Date(`01/01/1970 ${data.uploadTime.CompleteTime}`)\n//     };\n\n//     let downloadObj = {\n//         Object: \"Download\",\n//         Name: \"Download\",\n//         Index: stats.length + 2,\n//         StartDate: new Date(`01/01/1970 ${data.downloadTime.StartTime}`),\n//         EndDate: new Date(`01/01/1970 ${data.downloadTime.CompleteTime}`)\n//     };\n\n//     // stats = [uploadObj, splitterObj, ...stats, mergerObj, downloadTime];\n//     stats = [uploadObj, splitterObj, ...stats, mergerObj, downloadObj];\n//     return stats;\n// }\n\nfunction batch(arrayOfTimestamps) {\n    let batchObject = arrayOfTimestamps.filter(d => d.type === \"Batch\")[0];\n    return JSON.parse(batchObject.message);\n}\n\nfunction uploadTime(arrayOfTimestamps) {\n    let uploadTime = {\n        StartTime: arrayOfTimestamps.find(\n            d => d.object === \"WebClient\" && d.message === \"Job was registered\"\n        ).time,\n        CompleteTime: arrayOfTimestamps.find(\n            d => d.object === \"WebClient\" && d.message === \"After send\"\n        ).time\n    };\n    return uploadTime;\n}\n\nfunction splitterTime(arrayOfTimestamps) {\n    let splitter = arrayOfTimestamps.filter(d => d.object === \"Splitter\")\n    let s = {\n        StartTime: toLocal(\n            splitter.find(s => s.message === \"Splitter started\").time\n        ),\n        CompleteTime: toLocal(splitter.find(s => s.message === \"End of Split\").time)\n    };\n    return s;\n}\n\nfunction mergerTime(arrayOfTimestamps) {\n    let merger = arrayOfTimestamps.filter(d => d.object === \"Merger\");\n    // if (!merger) return null\n\n    let mergerStartMessage = merger.find(s => s.message === \"Preparing job for merge\");\n    let mergerCompleteMessage = merger.find(s => s.message === \"Moving Job to S3\");\n\n    let s = {\n        StartTime: mergerStartMessage ? toLocal(mergerStartMessage.time) : null,\n        CompleteTime: mergerCompleteMessage ? toLocal(mergerCompleteMessage.time) : null\n    };\n    return s;\n}\n\nfunction downloadTime(arrayOfTimestamps) {\n    let downloadStartMessage = arrayOfTimestamps.find(d => d.object === \"WebClient\" && d.message === \"Download Data\");\n    let downloadCompleteMessage = arrayOfTimestamps.find(d => d.object === \"WebClient\" && d.message === \"Job is ready\");\n    let downloadTime = {\n        StartTime: downloadStartMessage ? downloadStartMessage.time : null,\n        CompleteTime: downloadCompleteMessage ? downloadCompleteMessage.time : null\n    };\n    return downloadTime;\n}\n\nfunction acpTime(row_lines, arrayOfTimestamps) {\n    let errorTimeStr = errorTime(row_lines, arrayOfTimestamps);\n    let acp = arrayOfTimestamps.filter(d => (d.type === \"Progress\" || d.type === \"Info\") && d.object === \"ACP\");\n    let acp_transformed = acp.map(action => {\n        let message = action.message.split(' ');\n        let localTime = toLocal(action.time);\n        return {\n            Time: localTime,\n            Step: message[0],\n            Stage: message[1].split(':')[1],\n            Index: Number(message[2].split(':')[1]) + 1\n        };\n    });\n    let acp_started = acp_transformed\n        .filter(action => action.Step === \"Starting\")\n        .map(action => {\n            return {\n                Stage: action.Stage,\n                Index: action.Index,\n                StartTime: action.Time\n            };\n        });\n    let acp_completed = acp_transformed\n        .filter(action => action.Step === \"Completing\")\n        .map(action => {\n            return {\n                Stage: action.Stage,\n                Index: action.Index,\n                CompleteTime: action.Time\n            };\n        });\n    let acp_timestamp = acp_started.map(action => {\n        let completeTimeMessage = acp_completed.find(\n            c => c.Stage === action.Stage && c.Index === action.Index\n        );\n\n        return {\n            Stage: action.Stage,\n            Index: action.Index,\n            StartTime: action.StartTime,\n            CompleteTime: completeTimeMessage ? completeTimeMessage.CompleteTime : errorTimeStr,\n            Succeed: !!completeTimeMessage\n        };\n    });\n    return acp_timestamp;\n}\n\nfunction errorTime(row_lines, arrayOfTimestamps) {\n    let errorMessage = arrayOfTimestamps.find(\n        d => d.object === \"WebClient\" && d.type === \"ERROR\"\n    );\n\n    let errorTime = null;\n    if (errorMessage) {\n        errorTime = errorMessage.time\n    }\n    // else {\n    //     let ping_lines = row_lines\n    //         .filter(line => line.match(\"I am alive\"));\n    //     errorTime = ping_lines.length > 0 ? JSON.parse(ping_lines[ping_lines.length - 1]).Time : null;\n    // }\n    return errorTime;\n}\n\nfunction timestamps(row_lines) {\n    let arrayOfLines = row_lines.filter(line => line.match(\"time\"));\n    let tmpArrayOfLines = [...arrayOfLines];\n    tmpArrayOfLines.splice(0, 1);\n    return tmpArrayOfLines.map(line => JSON.parse(line));\n}\n\nfunction time_diff(start_time, complete_time) {\n    let start = start_time.split(':').map(t => Number(t));\n    let start_sec = start[0] * 3600 + start[1] * 60 + start[2];\n    let complete = complete_time.split(':').map(t => Number(t));\n    let complete_sec = complete[0] * 3600 + complete[1] * 60 + complete[2];\n    let diff_sec = complete_sec - start_sec;\n    return diff_sec;\n}\n\nfunction secToHHMMSS(time) {\n    return new Date(time * 1000).toISOString().substr(11, 8);\n}\n\nfunction toLocal(hhmmss) {\n    if (!hhmmss) return null;\n    let [HH, MM, SS] = hhmmss.split(':');\n    let local = [Number(HH) + 3, MM, SS].join(':');\n    return local;\n}\n","import React, {useEffect, useState} from 'react';\nimport styles from './MainComponent.module.css';\nimport RunningLogsList from \"../RunningLogsList/RunningLogsList\";\nimport VegaLiteChart from \"../VegaLiteChart/VegaLiteChart\";\nimport {getChartData, getListData} from \"../../models/logData\";\nimport {parse} from \"../../models/logFileParser\";\n\nfunction MainComponent(props) {\n    const [logDataArray, setLogDataArray] = useState([]);\n    const [index, setIndex] = useState(0);\n    const [loading, setLoading] = useState(false);\n\n    const numInChunk = 8;\n    let logsListData = [];\n    let chartData = null;\n    let runData = null;\n    let awsRegion = \"eu-central-1\";\n    let api_uri = \"https://bah2tkltg6.execute-api.eu-central-1.amazonaws.com/test/list\";\n\n    // Fetch keys list (filenames) from s3 bucket using given api\n    const fetchKeysList = async() => {\n        let response = await fetch(api_uri);\n        let json = await response.json();\n        let keysList = JSON.parse(json.body).keys;\n        return keysList;\n    }\n\n    // Fetch content of files from s3 bucket by given list of keys\n    const fetchDataByKeysList = async (keysList) => {\n        let promises = keysList.map (key => fetch(`${api_uri}/${key}`))\n        let respArray = await Promise.all(promises)\n        let json_promises = respArray.map(resp => resp.json())\n        let textArray = await Promise.all(json_promises);\n        let dataArray = textArray.map( e => parse(e.text));\n        dataArray.forEach( (data,i) => data.key = keysList[i] )\n        dataArray.forEach( (data,i) => data.text = textArray[i].text )\n        return dataArray;\n    }\n\n    // const fetchAllData = async () => {\n    //     setLoading(true);\n    //\n    //     let keysList = await fetchKeysList(api_uri);\n    //     let localDataArray = await fetchDataByKeysList(keysList);\n    //\n    //     localDataArray.sort(function(a,b){\n    //         return new Date(b.runningDate) - new Date(a.runningDate);\n    //     });\n    //\n    //     // If all data loaded, render list and select first row\n    //     if (localDataArray.length > 0) {\n    //         setLoading(false);\n    //         setLogDataArray(localDataArray);             // trigger rendering\n    //     }\n    // };\n\n    // const fetchNewData = async () => {\n    //     setLoading(true);\n    //\n    //     let keysList = await fetchKeysList(api_uri);\n    //     let filteredKeysList = filterNewKeysList(keysList);\n    //\n    //     let newDataArray = await fetchDataByKeysList(filteredKeysList);\n    //\n    //     let localDataArray = logDataArray.concat(newDataArray);\n    //\n    //     localDataArray.sort(function(a,b){\n    //         return new Date(b.runningDate) - new Date(a.runningDate);\n    //     });\n    //\n    //     // If all data loaded, render list and select first row\n    //     if (localDataArray.length > 0) {\n    //         setLoading(false);\n    //         setLogDataArray(localDataArray);             // trigger rendering\n    //     }\n    // }\n\n    const fetchMoreData = async () => {\n        setLoading(true);\n\n        let keysList = await fetchKeysList(api_uri);\n        let filteredKeysList = filterNewKeysList(keysList);\n        let chunkOfKeysList = keysList.slice(0,numInChunk);\n        let newDataArray = await fetchDataByKeysList(chunkOfKeysList);\n\n        let localDataArray = logDataArray.concat(newDataArray);\n\n        localDataArray.sort(function(a,b){\n            return new Date(b.runningDate) - new Date(a.runningDate);\n        });\n\n        // If all data loaded, render list and select first row\n        if (localDataArray.length > 0) {\n            setLoading(false);\n            setLogDataArray(localDataArray);             // trigger rendering\n        }\n    }\n\n    // Filter keysList: keep only new keys that do not exist in logDataArray\n    const filterNewKeysList = (keysList) => {\n        let filteredKeyList = keysList\n            .filter( key => !logDataArray.some( data => data.key === key))\n        return filteredKeyList;\n    }\n\n    const syncData = () => {\n        fetchMoreData()\n        // setLoading(true)\n    }\n\n    // Effect to load all data from AWS s3 bucket after component mounted\n    useEffect( () => {\n        if (logDataArray.length === 0) {\n            fetchMoreData();\n        }\n    });\n\n    // Callback to set new chart data and update selected index\n    const logItemClicked = (index) => {\n        setIndex(index);                                     // trigger rendering\n    }\n\n    // Setup data before rendering\n    if (logDataArray.length > 0) {\n        logsListData = logDataArray.map(data => getListData(data))\n\n        let localData = logDataArray[index];\n        try {\n            chartData = getChartData(localData);\n        }\n        catch (e) {\n            chartData = null;\n        }\n\n        runData = getListData(localData);\n    }\n\n    return (\n        <main className={styles.MainComponent}>\n            <RunningLogsList\n                awsRegion = {awsRegion}\n                logsListData={logsListData}\n                selectedIndex={index}\n                loading={loading}\n                logItemClicked={logItemClicked}\n                onRefreshButtonPressed={syncData}\n            />\n            <VegaLiteChart data={chartData} runData={runData} />\n        </main>\n    );\n}\n\nexport default MainComponent;\n","import React from 'react';\nimport MainComponent from \"./components/MainComponent/MainComponent\";\nimport './App.css';\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <div className=\"content\">\n                <h1>DFM Cloud Monitor</h1>\n                <hr />\n                <MainComponent />\n                <hr />\n            </div>\n            <footer className=\"footer\">\n                <p style={{fontSize:\"12px\"}}>Alex Bol 2020</p>\n            </footer>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"RunningLogListItem\":\"RunningLogListItem_RunningLogListItem__wcmB-\",\"RunningLogListItemClicked\":\"RunningLogListItem_RunningLogListItemClicked__2euIm\",\"RunningLogListItemFailed\":\"RunningLogListItem_RunningLogListItemFailed__sXOJI\",\"RunningLogListItemNumeric\":\"RunningLogListItem_RunningLogListItemNumeric__28nyp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"BackDrop\":\"ModalPopup_BackDrop__3oXJD\",\"ModalPopup\":\"ModalPopup_ModalPopup__3TsOV\",\"fadeIn\":\"ModalPopup_fadeIn__1BHZf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"MainComponent\":\"MainComponent_MainComponent__1UCA3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"RunningLogsList\":\"RunningLogsList_RunningLogsList__1jWMA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Button\":\"Button_Button__3h9Fb\",\"Icon\":\"Button_Icon__c_IsA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"RunningLogsListHeader\":\"RunningLogsListHeader_RunningLogsListHeader__2REzz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"RunningLogsListTable\":\"RunningLogsListTable_RunningLogsListTable__3tUhi\",\"fadeIn\":\"RunningLogsListTable_fadeIn__1fouu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"FileContentPopup\":\"FileContentPopup_FileContentPopup__1wTAX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"VegaLiteChart\":\"VegaLiteChart_VegaLiteChart__3452l\"};"],"sourceRoot":""}